{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to my MkDocs","text":"<ul> <li>Programming basics</li> <li>Python</li> <li>Coding rules</li> <li>Latex</li> <li>Jupyer book</li> <li>Tools</li> <li>Others</li> </ul>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2022/09/12/blog/","title":"Blog","text":""},{"location":"blog/2023/09/12/test/","title":"Test","text":""},{"location":"pages/basics/","title":"Basics","text":"<ul> <li>Command Line</li> <li>$PATH</li> <li>Alias</li> <li>Zsh</li> <li>Markdown</li> <li>GitHub</li> <li>Commit Message with Emoji</li> <li>Homebrew and venv</li> </ul>"},{"location":"pages/basics/alias/","title":"Alias","text":"<p>If you are using command line, there must be commands you use frequently. Some commands are long and you might think that copying them every time is a waste of time. In such case, you can use <code>alias</code> for a command. If you want to use <code>h</code> as an alias for <code>cd ~</code>, you define <code>alias h='cd ~'</code> in <code>~/.zshrc</code> (or <code>~/.bashrc</code>). If you can't find such files in your home directory, you need to make it with <code>touch ~/.zshrc</code>.</p> <p>If you find some useful aliases below, write them in <code>~/.zshrc</code>.</p>"},{"location":"pages/basics/alias/#basic","title":"Basic","text":""},{"location":"pages/basics/alias/#customize-and-colorize-prompt","title":"Customize and colorize PROMPT","text":"<pre><code>PS1=\"%F{082}%n%f %F{051}%~%f %# \"\nRPROMPT='%T'\n</code></pre> <ul> <li><code>PS1</code> is the main (left) prompt and <code>RPROMPT</code> is the right prompt.</li> <li><code>%n</code> means username</li> <li><code>%~</code> means current directory</li> <li><code>%#</code> shows <code>#</code> if you are root, <code>%</code> if not.</li> <li><code>%T</code> shows the current time in 24-hour format (<code>%t</code> for 12-hour format).</li> <li>you can colorize your prompt by using <code>%F{color number}</code> ~ <code>%f</code>. You can find color numbers here.</li> </ul> <p>Read more about Prompt Expansion in this link.</p>"},{"location":"pages/basics/alias/#put-a-blank-line-before-every-prompt-except-the-first-one","title":"Put a blank line before every prompt except the first one.","text":"<pre><code>precmd() { precmd() { echo } }\n</code></pre>"},{"location":"pages/basics/alias/#change-directory","title":"change directory","text":"<pre><code>cs() { cd $@ &amp;&amp; la }\nalias cd='cs'\nalias ..='cd ..'\nalias ...='cd ../..'\nalias ....='cd ../../..'\nalias cb='cd -'\nalias d='cd ~/Desktop'\nalias dl=\"cd ~/Downloads\"\nalias h='cd ~'\nalias /='cd /'\n\n# Change working directory to the top-most Finder window location.\ncdf() { cd \"$(osascript -e 'tell app \"Finder\" to POSIX path of (insertion location as alias)')\" }\n</code></pre>"},{"location":"pages/basics/alias/#show-files","title":"show files","text":"<p><pre><code>#alias ls='ls -F'\nalias ls='gls --color --group-directories-first -F'\nalias l='ls'\nalias la='ls -A'\nalias ll='ls -AhlS'\nalias ds='du -d 1 -h 2&gt;/dev/null | sort -h'\nalias pwd='sed \"s/ /\\\\\\ /g\" &lt;&lt;&lt; ${PWD/#$HOME/\"~\"}'\nalias p='pwd'\nalias path='echo -e ${PATH//:/\\\\n}'\n</code></pre> - <code>ls</code>: To use <code>gls</code>, you need to install <code>coreutils</code> with <code>brew install coreutils</code>. You can use the same colorization as <code>tree</code> command.     - <code>--color</code> option colorize the output of <code>gls</code> command.     - <code>--group-directories-first</code> option puts directories first.     - <code>-F</code> option adds a trailing <code>/</code> to directory names, <code>@</code> to symbolic links, and so on. </p> <ul> <li> <p><code>la</code>, <code>ll</code>: <code>ls</code> is defined as <code>gls --color --group-directories-first -F</code> before <code>la='ls -A'</code>. This means <code>la='gls --color --group-directories-first -F -A'</code> and the same for <code>ll</code>.</p> <ul> <li><code>-A</code> option shows all files and directories except <code>.</code> and <code>..</code>.</li> <li><code>-h</code> option shows the size in human readable format.</li> <li><code>-l</code> option shows the file size, owner, group, and permissions.</li> <li><code>-S</code> option sorts by file size.</li> </ul> </li> <li> <p><code>ds</code>: <code>du -d 1</code> shows the size of directories in the current directory.</p> <ul> <li><code>-h</code> option shows the size in human readable format.</li> <li><code>2&gt;/dev/null</code> hides error messages.</li> <li><code>sort -h</code> sorts by file size using pipe.</li> </ul> </li> <li> <p><code>pwd</code> :<code>sed \"s/ /\\\\\\ /g\"</code> puts <code>\\</code> before every space. <code>&lt;&lt;&lt;</code> is a \"here string\". <code>${PWD/#$HOME/\"~\"}</code> replaces <code>$HOME</code> with <code>~</code> in the current directory path.</p> </li> </ul> <p>Hint</p> <p>When you specify options, you can use <code>ls -AhlS</code> instead of <code>ls -A -h -l -S</code>.</p>"},{"location":"pages/basics/alias/#edit-files","title":"edit files","text":"<p><pre><code>alias v='vi'\nalias cp='cp -iv'\nalias mv='mv -iv'\nalias rm='rm -iv'\nalias rf='rm -rf'\n</code></pre> - <code>-i</code> option asks you before overwriting a file. - <code>-v</code> option shows the name of the file being copied, moved, or removed.</p>"},{"location":"pages/basics/alias/#search","title":"search","text":"<pre><code>fb() { find . -size +$2M -type f -name $1 -exec ls -lhS \"{}\" +}\nfd() { find . -name \"*.$1\" -type f -delete }\nrn() { for filename in *.$1; do mv -f \"$filename\" $(echo \"$filename\" | sed -e \"s/$2//g\"); done }\ndif(){ diff --color -u $1 $2 }\nalias imgopt='open -a ImageOptim .'\nalias grep='grep --color'\n</code></pre> <p>Note</p> <p>You can make an alias with arguments, which is called a function. Functions are defined as <code>function_name() { commands }</code>. For example, <code>fb</code> takes two arguments, <code>$1</code> and <code>$2</code>. <code>$1</code> is the first argument and <code>$2</code> is the second argument. Use like <code>fb \"*.pdf\" 10</code> to find files with the name <code>pdf</code> larger than 10 MB.</p> <p>In addition to <code>$1</code> and <code>$2</code>, there are other special variables: <code>$0</code> is the function name. <code>$@</code> is all arguments. <code>$#</code> is the number of arguments. <code>$?</code> is the exit status of the last command. <code>$$</code> is the process ID of the current shell. <code>$!</code> is the process ID of the last command run in the background.</p> <ul> <li><code>fb</code> finds files larger than <code>$2</code> MB with the name <code>$1</code> in the current directory.<ul> <li><code>-size +$2M</code> option finds files larger than <code>$2</code> MB.</li> <li><code>-type f</code> option finds only files (<code>-type d</code> finds only directories).</li> <li><code>-name $1</code> option finds files with the name <code>$1</code>.</li> <li><code>-exec ls -lhS \"{}\" +</code> option executes <code>ls -lhS</code> command for each file found.</li> </ul> </li> <li><code>fd</code>: <code>find . -name \"*.$1\" -type f -delete</code> finds files with the extension <code>$1</code> and deletes them.</li> <li><code>rn</code> renames files with the extension <code>$1</code> by removing <code>$2</code> from the file name. For example, <code>rn txt asdf</code> renames <code>aaasdfff.txt</code> to <code>aaff.txt</code>.</li> </ul> <p>Note</p> <p><code>-exec &lt;command&gt; {} +</code> is a common syntax to execute <code>&lt;command&gt;</code> for each file found. <code>{}</code> is a placeholder for the file name. <code>+</code> is a delimiter to tell the end of the command.</p>"},{"location":"pages/basics/alias/#open-apps","title":"open apps","text":"<pre><code>alias hr='open .'\nalias c='open /Applications/CotEditor.app'\nalias vs='code'\nalias fire='open /Applications/Firefox.app'\nalias chrome='open /Applications/Google\\ Chrome.app'\nalias safari='open /Applications/Safari.app'\n</code></pre> <ul> <li><code>hr</code> opens the current directory.</li> <li><code>c</code> opens CotEditor.</li> <li><code>vs</code> opens Visual Studio Code.</li> <li><code>fire</code> opens Firefox.</li> <li><code>chrome</code> opens Google Chrome.</li> <li><code>safari</code> opens Safari.</li> </ul>"},{"location":"pages/basics/alias/#others","title":"others","text":"<pre><code>alias his='history'\nalias rl='exec ${SHELL} -l' #reload\n</code></pre>"},{"location":"pages/basics/alias/#zip-encryption","title":"zip encryption","text":"<pre><code>zipen(){\n    zip -er enc.zip \"$@\"\n}\n</code></pre> <ul> <li><code>zipen</code> zips files and encrypts them with a password as <code>enc.zip</code>. Use like <code>zipen file1 file2 dir1</code>.</li> </ul> <p>Note</p> <p><code>\"$@\"</code> is a special variable that expands to all arguments. For example, <code>\"$@\"</code> is expanded to <code>file1 file2 dir1</code> in the above example.</p>"},{"location":"pages/basics/alias/#mac-os-settings","title":"Mac OS settings","text":""},{"location":"pages/basics/alias/#showhide-hidden-files-in-finder","title":"Show/hide hidden files in Finder","text":"<pre><code>alias show=\"defaults write com.apple.finder AppleShowAllFiles -bool true &amp;&amp; killall Finder\"\nalias hide=\"defaults write com.apple.finder AppleShowAllFiles -bool false &amp;&amp; killall Finder\"\n</code></pre> <p>Note</p> <p>You can also use <code>Command + Shift + .</code> to show/hide hidden files in Finder.</p>"},{"location":"pages/basics/alias/#hideshow-all-desktop-icons","title":"Hide/show all desktop icons","text":"<pre><code>alias dhide=\"defaults write com.apple.finder CreateDesktop -bool false &amp;&amp; killall Finder\"\nalias dshow=\"defaults write com.apple.finder CreateDesktop -bool true &amp;&amp; killall Finder\"\n</code></pre>"},{"location":"pages/basics/alias/#screenshot-settings","title":"Screenshot settings","text":"<p><pre><code>alias dwl='defaults write com.apple.screencapture location'\nalias ddl='defaults delete com.apple.screencapture location'\nalias drl='defaults read com.apple.screencapture location'\n</code></pre> You can change the location of screenshots by <code>dwl ~/path/to/dir</code>.</p>"},{"location":"pages/basics/alias/#sleep-setting","title":"sleep setting","text":"<pre><code>alias sleepon='sudo pmset -a disablesleep 0'\nalias sleepoff='sudo pmset -a disablesleep 1'\n</code></pre>"},{"location":"pages/basics/alias/#github","title":"GitHub","text":"<pre><code>alias g='git'\nalias ga='git add'\nalias gb='git branch'\nalias gc='git commit'\nalias gch='git checkout'\nalias gcl='git clone'\nalias gd='git diff'\nalias gf='git fetch'\nalias gi='git init'\nalias gm='git merge'\nalias gps='git push'\nalias gpl='git pull'\nalias gpom='git push origin main'\nalias gs='git status'\n</code></pre>"},{"location":"pages/basics/alias/#function","title":"Function","text":"<pre><code>gacpm() { git add -A &amp;&amp; git commit -m \"$1\" &amp;&amp; git push origin main }\n</code></pre> <ul> <li><code>gacpm</code> adds all files, commits with the message <code>$1</code>, and pushes to the main branch of the origin remote repository. Use like <code>gacpm \"update README.md\"</code>.</li> </ul> <p>For example, you can define a function to make a new repository with just one command. <pre><code># $1 = private or public\nginit() {\n    git init\n    git add .\n    git commit -m \"\ud83c\udf89  Initial commit\"\n    gh repo create --\"$1\" --source=. --push\n}\n</code></pre> You need to install GitHub CLI to use <code>gh</code> command.</p>"},{"location":"pages/basics/alias/#gitignoreio","title":"gitignore.io","text":"<p>gitignore.io enable us to make .gitignore file easily <pre><code>function gi() { curl -sLw n https://www.toptal.com/developers/gitignore/api/$@ ;}\n</code></pre></p>"},{"location":"pages/basics/alias/#python","title":"Python","text":"<pre><code>alias wpy='which python'\n\nalias pip='pip3'\nalias pin='pip install'\nalias puin='pip uninstall'\nalias pup='pip install --upgrade pip'\nalias pinreq='pip install -r requirements.txt'\nalias pf='pip list --format=freeze'\nalias pfr='pip list --format=freeze &gt; requirements.txt'\n</code></pre>"},{"location":"pages/basics/alias/#make-activate-deactivate-venv","title":"Make, activate, deactivate venv","text":"<pre><code>alias mkv='python3 -m venv venv; acv; pip install --upgrade pip'\nalias acv='source venv/bin/activate'\nalias deac='deactivate'\n</code></pre>"},{"location":"pages/basics/alias/#latex","title":"Latex","text":""},{"location":"pages/basics/alias/#copy-latex-template-directory-to-somewhere","title":"Copy latex-template directory to somewhere;","text":"<p>If you write a lot of latex documents, you should make a template directory. You can copy the template directory to somewhere with this function. <pre><code>mklt(){\n    cp -r ~/latex-template ./\"$1\"\n}\n\nmkbt(){\n    cp -r ~/beamer-template ./\"$1\"\n}\n</code></pre></p>"},{"location":"pages/basics/linux/","title":"Command line","text":"<p>Here, we learn command line. The command line is a text interface to computers. You input text commands to your computer to do some operations, for example making or removing files, and changing files permissions, etc.</p> <p>In Mac, you can use the command line in <code>terminal.app</code></p>"},{"location":"pages/basics/linux/#basic","title":"Basic","text":"<p>To begin with, we check shortcuts.</p> Command Description Ctrl + C Interrupt the current process Ctrl + Z Suspend the current process Ctrl + S Stop command output to the screen Ctrl + Q resume output to the screen paused by Ctrl+S Ctrl + L Clear the screen Ctrl + D Exit the shell Ctrl + A Move the cursor to the start of a line Ctrl + E Move the cursor to the end of the line Ctrl + W Cut the word before the cursor Ctrl + U Cut the part of the line before the cursor Ctrl + K Cut the part of the line after the cursor Ctrl + Y Paste the last thing you cut"},{"location":"pages/basics/linux/#special-symbols","title":"Special symbols","text":"<p>There are 4 special symbols and each of them represents a location.</p> Symbol Meaning <code>/</code> root directory <code>.</code> current directory <code>..</code> parent directory <code>~</code> home directory"},{"location":"pages/basics/linux/#basics-commands","title":"basics commands","text":"<p><code>pwd</code>:  show the current directory</p> <p><code>mkdir</code>: make directory <pre><code>mkdir ~/tmp\n</code></pre></p> <p><code>cd</code>: change directory <pre><code>cd ~/tmp\n</code></pre></p> <p><code>touch</code>: make files <pre><code>touch file\n</code></pre></p> <p><code>ls</code>: list files or directories <pre><code>ls\n# file\n</code></pre></p> <p><code>mkdir -p</code>; make parent directories as needed <pre><code>mkdir -p dir/subdir/ssubdir\nls\n# file dir\n</code></pre></p> <p><code>rm</code>: remove files\\ <code>rm -r</code>: remove directories and their contents <pre><code>rm file\nrm -r dir\n</code></pre></p> <p>cf. <pre><code>rm -v file # show filename when removed\nrm -i file # comfirm whether to rmove\nrm -f file # force remove\n</code></pre></p> <p><code>rmdir</code>: remove empty directory <pre><code>mkdir dir\nls\n# dir\nrmdir dir\nls\n# (nothing)\n</code></pre></p> <p>cf. <pre><code>mkdir -p dir/subdir/ssubdir\n\nrmdir -p dir/subdir/ssubdir\n</code></pre></p> <p><code>echo</code>: - print strings     <pre><code>echo $PATH\n</code></pre> - make files with contents     - Make new file or overwrite a existing file : <code>&gt;</code> <pre><code>echo [Strings] &gt; [filename]\n</code></pre>     - Append : <code>&gt;&gt;</code> <pre><code>echo [Strings] &gt;&gt; [filename]\n</code></pre></p> <p><code>cat</code>: print file contents <pre><code>echo hello &gt; file1\ncat file1\n# hello\n</code></pre></p> <pre><code>cat &gt; file2\nasdf  (input something)\nCtrl + D (end input)\ncat file2\n# asdf\n</code></pre> <p><code>cp</code>: copy file(s) or directory(ies) <pre><code>cp file1 file3\ncat file3\n# hello\n</code></pre></p> <pre><code>mkdir dir1\ntouch dir1/file4\ncp -r dir1 dir2\nls dir2\n# file4\n</code></pre> <p>Note</p> <p>When doing <code>cp file1 file2</code> and the <code>file2</code> already exists, you will be asked whether to overwrite the contents of <code>file2</code>.</p> <p>If the <code>file2</code> does not exist, the contents of <code>file1</code> will be copied to <code>file2</code>.</p> <p>When doing <code>cp -r dir1 dir2</code> and the <code>dir2</code> already exists, new <code>dir1</code> will be created in <code>dir2</code>.</p> <p>If the <code>dir2</code> does not exist, the contents of <code>dir1</code> will be copied to <code>dir2</code>. So the contents of these directories are the same.</p> <p><code>mv</code>: move file(s) or directory(ies). If <code>file5</code> does not exist, the following operation is rename <pre><code>mv file1 file5\n</code></pre></p> <p><code>file5</code> will be moved to <code>dir3</code>. <pre><code>mkdir dir3\nmv file5 dir3\n</code></pre></p> <p>If <code>dir4</code> does not exist, the following operation is rename. Otherwise <code>dir1</code> will be moved to <code>dir4</code>. <pre><code>mv dir1 dir4\n</code></pre></p> <p><code>tree</code>: print contents of the current directory in a tree-like format. You can use <code>tree -d</code> to print directory contents. You can use <code>tree -L</code> to print directory contents up to a certain level.</p> <p>You have to install <code>tree</code> command in bash first. <pre><code>brew install tree\n</code></pre></p> <pre><code>tree\ntest\n\u251c\u2500\u2500 dir2\n\u2502   \u2514\u2500\u2500 file4\n\u251c\u2500\u2500 dir3\n\u2502   \u2514\u2500\u2500 file5\n\u251c\u2500\u2500 dir4\n\u2502   \u2514\u2500\u2500 file4\n\u251c\u2500\u2500 file2\n\u2514\u2500\u2500 file3\n</code></pre> <pre><code># print directory contents up to level 2\ntree -L 2\n</code></pre> <p><code>chomd</code>: change file modes(permissions) <pre><code>chmod 755 file\n</code></pre></p> <p>You can specify the mode with octal numbers.</p> <p>When you specify the mode with octal number;\\ 4 stands for \"read\"\\ 2 stands for \"write\"\\ 1 stands for \"execute\" \\ 0 stands for \"no permission\"</p> <p>If you permit all operations(4+2+1) to everyone, you can use <code>777</code> for example. If you permit all operations(4+2+1) to owner and read and execute(4+1) to group and others, you can use <code>755</code> for example.</p> <p>You can specify the mode with symbol like <code>u+x</code> for user, <code>g+x</code> for group, <code>o+x</code> for others.</p> target meaning operation meaning mode meaning u User = set the modes r read g Group + add the mode w write o Others - remove the mode x execute a All <p>For example, <pre><code>chmod u=rwx,g=rx,o=r file\n\nchmod u+x file\n</code></pre></p> <p>You can use <code>chmod -R</code> to change permissions recursively.</p>"},{"location":"pages/basics/linux/#shell-globbing","title":"Shell globbing","text":"<p><code>globbing patterns</code> specify sets of filenames with wildcard characters. <code>globbing patterns</code> is a powerful way to find files that match a pattern. For example, <code>*.txt</code> means all files with the extension <code>.txt</code> in the current directory.</p> <p>There are several common wildcard characters: <pre><code>* : matches zero or more characters\n? : matches any single character\n[abc] : matches any character in set\n[a-z] : matches any character in range\n[!abc] : matches any character not in set\n[!a-z] : matches any character not in range\n</code></pre></p> <p>extended pattern matching</p> <ul> <li>*(pattern)    more than 0 times</li> <li>?(pattern)    0,1 times</li> <li>@(pattern)   only 1 times</li> <li>+(pattern)    more than 1 times</li> <li>!(pattern)     not in the pattern</li> </ul> <pre><code>ls\n# file1 file2 file3 file4 file11 file123\nls !(file1)\n# file2 file3 file4 file11 file123\nls !(file1|file2)\n# file3  file4 file11 file123\nls file[0-9]\n# file1 file2 file3 file4\nls file[0-9]+([0-9])\n# file11 file123\n</code></pre> <p><code>find</code>: find files and directories <pre><code># search the current directory for filename(not recursively)\nfind filename\n\n# search target directory recursively for lecture0~lecture9 directories (cf. -type f)\nfind target -name lecture[0-9] -type d\n\n# search the current directory recursively for files accessed within 1 day\nfind . -atime -1\n\n# search the current directory recursively for files modified within 1 day\nfind . -mtime -1\n\n# search the current directory recursively for files with size between 30kB and 1MB\nfind . -size +30k -size -1M -name '*.py'\n\n# search target directory recursively for files or directories that match condition1 and condition2 (cf. -or, -not)\nfind target condtion1 -and condition2\n\n# search the current directory recursively for .txt files and remove them all.\nfind . -name '*.txt' -exec rm {} +\n</code></pre></p> <p><code>grep</code>: search files for patterns <pre><code># Search any line that contains `word` in filename\ngrep [-Options] 'word' filename\n\ngrep 'word' file1 file2 file3\ngrep 'string1 string2'  filename\n</code></pre></p> Options Description -i Ignore case distinctions -w The expression is searched for as a word -v Select non-matching lines -n Print line number with output lines -h Suppress the Unix file name prefix on output -H Print file name with output lines -r Search directories recursivly -R Just like -r but follow all symlinks -l Print only names of FILEs with matches -L Print only names of FILEs without matches -c Print only a count of selected lines per FILE --color Display matched pattern in colors -m NUMBER Stop grep command NUMBER selected lines -o Display only matched parts of lines"},{"location":"pages/basics/linux/#brace-expansion","title":"Brace Expansion","text":"<p>You can generate arbitrary strings using brace expansion. <pre><code>echo a{d,c,b}e\nade ace abe\n\necho {1,2}{3,4}\n13 14 23 24\n</code></pre></p> <p>Some examples: <pre><code># move all files and directories to `dir`\nmv * dir\n\nmv ./path/{foo,bar,baz}.txt dir\n# = mv ./path/foo.txt ./path/bar.txt ./path/baz.txt `dir`\n\n# move all pyhon and shell files to `dir`\nmv *{.py,.sh} dir\n</code></pre></p>"},{"location":"pages/basics/linux/#pipeline-and-redirect","title":"Pipeline and redirect","text":"<pre><code>`|`: pipe\n`&gt;`: redirect\n</code></pre> <p>In Unix-like systems, there are three types of streams, which connect computer programs and its environment; standard input (<code>stdin</code>), standard output (<code>stdout</code>), and standard error (<code>stderr</code>). The input stream is the stream that receives data from the user. The output stream is the stream that sends data to the user. The error stream is the stream that sends error messages to the user. A <code>pipe</code> and a <code>redirect</code> are techniques that connects two programs by sending output from one command to the input of the other command.</p> <p>pipeline</p> <p><code>|</code> stdout to stdin. Second command will take the stdout of the previous command as stdin.</p> <pre><code>history | head\n</code></pre> <p>redirect</p> <p><code>&gt;</code> stdout to file</p> <pre><code>history &gt; hist.txt\ncat hist.txt | head\n</code></pre> <p><code>&gt;&gt;</code>  add contents</p> <pre><code>echo asdf &gt; test.txt\ncat test.txt\n# asdf\n\necho fdsa &gt;&gt; test.txt\ncat test.txt\n# asdf\n# fdsa\n</code></pre> <p>To remove stderr, add <code>2&gt;/dev/null</code> to the end of the command.</p>"},{"location":"pages/basics/linux/#combine-commands","title":"Combine commands","text":"<p>%<code>;</code> <code>&amp;</code> <code>&amp;&amp;</code> <code>||</code> <code>$()</code> <code>xargs</code></p> <ul> <li> <p><code>command2</code> after <code>commmand1</code>\\     <code>command2</code> is executed even when <code>command1</code> puts stderr     <pre><code>command1 ; command2\n</code></pre></p> </li> <li> <p><code>command2</code> and <code>commmand1</code> at the same time     <pre><code>command1 &amp; command2\n</code></pre></p> </li> <li> <p><code>command2</code> after <code>commmand1</code> succeeded     <pre><code>command1 &amp;&amp; command2\n</code></pre></p> </li> <li> <p><code>command2</code> after <code>commmand1</code> failed     <pre><code>command1 || command2\n</code></pre></p> </li> </ul> <p>command using the other stdout <code>$()</code></p> <pre><code>date +%Y%D\ntouch file_`date +%Y%D`\n# touch file_$(date +%Y%D)\n\n# nested command\ndirname $(which cat)\nls $(dirname $(which cat))\n</code></pre>"},{"location":"pages/basics/linux/#symbolic-links","title":"Symbolic links","text":"<p><code>ln -s</code>: make symbolic links Symbolic links is the file that refers to another file. <pre><code>ln -s original_file link_file\nls -l\n# lrwxr-xr-x  1 user  group  12 Aug  4 15:18 link_file -&gt; original_file\n</code></pre></p> <p>Note</p> <p>Aliases are similar to symlinks, but they are valid after you move the original files unlike symlinks. Although it seems aliases are more useful, aliases are not compatible with unix system. You cannot use like <code>cd alias</code> but <code>cd syslink</code>.</p> <p>Note</p> <p><code>ln</code> options:\\ -s, --symbolic    make symbolic links instead of hard links\\ -f, --force       make links even if the file exists</p>"},{"location":"pages/basics/linux/#reference","title":"Reference","text":"<ul> <li>The Unix Shell</li> <li>The Missing Semester of Your CS Education</li> </ul>"},{"location":"pages/basics/markdown/","title":"Markdown","text":"<p>Here, you can learn the basic usage of Markdown. Markdown is a simple, lightweight markup language for creating formatted, structured text. This whole Jupyter Book source code are also written in Markdown (especiallly MyST). You can use Markdown to make websites, documents, notes, book, presentations, email messages. MyST is one of markedown derivatives which have features for scientific and technical documentation.</p> <p>In the following, you see how to write Markdown and how it looks like.</p> <pre><code># Heading 1\n## Heading 2\n### Heading 3\n</code></pre>"},{"location":"pages/basics/markdown/#heading-1","title":"Heading 1","text":""},{"location":"pages/basics/markdown/#heading-2","title":"Heading 2","text":""},{"location":"pages/basics/markdown/#heading-3","title":"Heading 3","text":""},{"location":"pages/basics/markdown/#list","title":"list","text":"<pre><code>- list item 1\n- list item 2\n- list item 3\n    - list item 3-1\n    - list item 3-2\n        - list item 3-2-1\n        * list item 3-2-2\n        + list item 3-2-3\n\n1. list item 1\n2. list item 2\n3. list item 3\n    1. list item 3-1\n    2. list item 3-2\n</code></pre> <ul> <li>list item 1</li> <li>list item 2</li> <li>list item 3</li> <li>list item 3-1</li> <li> <p>list item 3-2</p> <ul> <li>list item 3-2-1</li> <li>list item 3-2-2</li> <li>list item 3-2-3</li> </ul> </li> <li> <p>list item 1</p> </li> <li>list item 2</li> <li>list item 3</li> <li>list item 3-1</li> <li>list item 3-2</li> </ul>"},{"location":"pages/basics/markdown/#color","title":"Color","text":"<p>You can use HTML in Markdown.</p> <pre><code>&lt;font color=\"red\"&gt;Red string&lt;/font&gt;\n</code></pre> <p>Red string </p>"},{"location":"pages/basics/markdown/#code","title":"Code","text":"<pre><code>```python\nimport streamlit as st\nimport numpy as np\nimport pandas as pd\n```\n</code></pre> <pre><code>import streamlit as st\nimport numpy as np\nimport pandas as pd\n</code></pre>"},{"location":"pages/basics/markdown/#links","title":"Links","text":"<pre><code>[Wikipedia](https://en.wikipedia.org/wiki/Viola%E2%80%93Jones_object_detection_framework)\n</code></pre> <p>\u30ea\u30f3\u30af Wikipedia</p>"},{"location":"pages/basics/markdown/#checkbox","title":"Checkbox","text":"<pre><code>- [ ] \u30bf\u30b9\u30af1\n- [x] \u30bf\u30b9\u30af2\n</code></pre> <ul> <li> \u30bf\u30b9\u30af1</li> <li> \u30bf\u30b9\u30af2</li> </ul>"},{"location":"pages/basics/markdown/#raw-text-code-bold-italic-strikethrough","title":"raw text, code, bold, italic, strikethrough","text":"<pre><code>```\nasdf\n```\n\n`asdf`\n\n*asdf*\n_adsf_\n\n**asdf**\n__adsf__\n\n***asdf***\n___adsf___\n*__adsf__*\n~~asdf~~\n</code></pre> <pre><code>asdf\n</code></pre> <p><code>asdf</code></p> <p>asdf adsf</p> <p>asdf adsf</p> <p>asdf adsf adsf</p> <p>asdf</p>"},{"location":"pages/basics/markdown/#latex","title":"Latex","text":"<pre><code>&gt;$\\LaTeX$\n$$\n\\left( \\sum_{k=1}^n a_k b_k \\right)^2 \\leq\n\\left( \\sum_{k=1}^n a_k^2 \\right) \\left( \\sum_{k=1}^n b_k^2 &gt;\\right)\n$$\n</code></pre> <p>\\(\\LaTeX\\)</p> \\[ \\left( \\sum_{k=1}^n a_k b_k \\right)^2 \\leq \\left( \\sum_{k=1}^n a_k^2 \\right) \\left( \\sum_{k=1}^n b_k^2 \\right) \\]"},{"location":"pages/basics/markdown/#quote","title":"Quote","text":"<pre><code>&gt; This is a quote.\n</code></pre> <p>This is a quote.</p>"},{"location":"pages/basics/markdown/#table","title":"Table","text":"<pre><code>| Header 1 | Header 2 | Header 3 |\n| :-------- | :--------: | --------: |\n| align=left | align=center | align=right |\n| cell 1   | cell 2   | cell 3   |\n| cell 4   | cell 5   | cell 6   |\n| caption |\n</code></pre> Header 1 Header 2 Header 3 align=left align=center align=right cell 1 cell 2 cell 3 cell 4 cell 5 cell 6 caption"},{"location":"pages/basics/markdown/#in-page-link","title":"In-page link","text":"<pre><code>[link to list](#list)\n</code></pre> <p>link to list</p>"},{"location":"pages/basics/markdown/#reference","title":"Reference","text":"<ul> <li>Markdown Guide</li> </ul>"},{"location":"pages/basics/packageManager/","title":"Homebrew and venv","text":"<p>What is a package manager?</p> <p>A package manager or package-management system is a collection of software tools that automates the process of installing, upgrading, configuring, and removing computer programs for a computer in a consistent manner. - wikipedia</p> <p>There are various package managers.</p> <p>For OS level, - Windows: vcpkg - Mac: Homebrew - Ubuntu: apt</p> <p>For application level, - PHP: composer - JavaScript(node): npm, Yarn - Ruby: gem - Java: Maven, Gradle - Python: pip, conda - R: conda, CRAN</p> <p>In this page, we install homebrew and make a venv to manage python packages.</p>"},{"location":"pages/basics/packageManager/#homebrew","title":"Homebrew","text":"<p>Homebrew is\u3000a missing package manager for macOS (or Linux). To install it, input next code in the Terminal (you should check the newest code here); <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre></p> <p>you will get next output: <pre><code>==&gt; Next steps:\n- Run these two commands in your terminal to add Homebrew to your PATH:\n    echo 'eval \"$(/opt/homebrew/bin/brew shellenv)\"' &gt;&gt; /Users/kensuke/.zprofile\n    eval \"$(/opt/homebrew/bin/brew shellenv)\"\n- Run brew help to get started\n- Further documentation:\n    https://docs.brew.sh\n</code></pre></p> <p>So input next to add Homebrew to your PATH (change Username below): <pre><code>echo 'eval \"$(/opt/homebrew/bin/brew shellenv)\"' &gt;&gt; /Users/Username/.zprofile\neval \"$(/opt/homebrew/bin/brew shellenv)\"\n</code></pre></p> <p>Let's check whether you succeeded! <pre><code>brew --version\n</code></pre> if you get: <code>Homebrew x.x.x</code>, you succeeded.</p> <p>(venv)=</p>"},{"location":"pages/basics/packageManager/#venv","title":"Venv","text":"<p>To make a virtual environment for python, venv is the easiest tool! Although there are pyenv or anaconda for python, they are not necessary for beginners. Let's make a venv. Making and deleting a venv are really easy. Let's make a test venv in your home directory.</p> <p><pre><code>python3 -m venv ~/test\n</code></pre> then activate the venv: <pre><code>source test/bin/activate\n</code></pre> or <pre><code>. test/bin/activate\n</code></pre></p> <p>Now your venv is activated. You can see the name of venv on the left side of your user name in the terminal like <code>(test) Username@MacBook-Pro ~ %</code>. Let's check the version of python: <pre><code>python -V\n</code></pre> and you get <code>Python 3.x.x</code>.</p> <p>Now you made a new venv and activated it, but actually there is almost nothing in the venv. <code>pip list --format=freeze</code> shows the packages in your venv and there is no output for now. Before installing something, you might have to upgrade <code>pip</code>, which is a python package manager(change Username below): <pre><code>/Users/Username/test/bin/python3 -m pip install --upgrade pip\n</code></pre> then let's install a package (here numpy)! <pre><code>pip install numpy\n</code></pre> and let's check: <pre><code>pip list --format=freeze\n</code></pre> and you get <code>numpy==x.xx.x</code>.</p> <p>If you want to use python as a beginner, you should install matplotlib, pandas, and jupyter-lab; <pre><code>pip install matplotlib\npip install jupyterlab\n</code></pre></p> <p>Matplotlib is a library for visualization, pandas for data analysis and manipulation, and jupyter-lab for web-based user interface for running python code. Scipy, which is for scientific computing, is also a useful package for some people. Now you can see many packages in your test venv; try <code>pip list --format=freeze</code>, though you installed apparently just 4 or 5 packages. Actually, you installed many packages with jupyter-lab. To deactivate the venv, just input: <code>deactivate</code> in the terminal. To activate again, input; <code>source test/bin/activate</code>.</p> <p>Warning</p> <p>If you want to delete the venv, remove it with: <pre><code>rm -rf ~/test\n</code></pre> in the terminal.</p>"},{"location":"pages/basics/packageManager/#lets-use-jupyter-lab","title":"Let's use jupyter-lab!","text":"<p>You installed jupyter-lab, so let's try to use it !!</p> <p><pre><code>jupyter-lab\n</code></pre> Your default browser will show up and open jupyter-lab.</p> <p>To deactivate juypter-lab (not venv) in the Terminal; <code>Control + C</code> and you will be asked whether to quit, then enter y[yes]. For more details, see Jupyter Book page.</p> <p>Note</p> <ul> <li>Renaming venv</li> <li>Renaming the parent directories of venv</li> <li>Changing the location of venv are not recommended.</li> </ul>"},{"location":"pages/basics/path/","title":"$PATH","text":"<p>A path usually indicates a string to identify a location of a file/directory in a directory tree. PATH is one of the environmental variables and is a little different from the path explained above.</p> <p>When you input a command in the shell, the shell has to find and run the command. PATH specifies the places the shell should search for a command you input.</p> <p>To see the PATH, run <code>echo $PATH</code>: <pre><code>echo $PATH\n# /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\n</code></pre> The result shows PATH holds some directories (colon is a separator): <code>/usr/local/bin</code>, <code>/usr/bin</code>, <code>/bin</code>, <code>/usr/sbin</code>, <code>/sbin</code></p> <p>Tip</p> <p>You can see all environmental variables with <code>printenv</code></p> <p>When you input a command, the shell searches <code>/usr/local/bin</code> at first. If the shell finds a command, it runs the command. If not, then it searches <code>/usr/bin</code>. If it finds the command, it runs the command. If not, then it searches <code>/bin</code>. This flow repeats until it finds and runs the command. So only the command found at first is run. If the shell could not find the command in all the directories in PATH, the shell returns <code>zsh: command not found: xxx</code>.</p> <p>Command <code>which</code> shows the directories where (for example) the <code>ls</code> is. <pre><code>which ls\n# /bin/ls\n</code></pre></p>"},{"location":"pages/basics/path/#add-command-search-path","title":"Add command search path","text":"<p>Add the following code in ~/.zshrc or ~/.bashrc to add a directory to PATH. <pre><code>export PATH=$PATH:&lt;command search path&gt;\n(or export PATH=&lt;command search path&gt;:$PATH)\n</code></pre></p> <p>and save ths changes. <pre><code>source ~/.zshrc\nsource ~/.bashrc\nsource ~/.bash_profile\n</code></pre></p>"},{"location":"pages/basics/path/#environmental-variables","title":"Environmental variables","text":"<pre><code>% printenv\n...\nSHELL=/bin/zsh\nHOME=/Users/asdf\nUSER=asdf\nPATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\nPWD=/Users/asdf\n...\n</code></pre>"},{"location":"pages/basics/path/#make-a-new-environmental-variable","title":"make a new environmental variable","text":"<pre><code>export US=/usr/sbin\necho $US\n# /usr/sbin\n</code></pre> <p>each command below shows the same results <pre><code>ls /usr/sbin\nls $US\n</code></pre></p>"},{"location":"pages/basics/path/#remove-a-environmental-variable","title":"Remove a environmental variable","text":"<pre><code>unset US\n</code></pre>"},{"location":"pages/basics/zsh/","title":"Zsh","text":"<p>Zsh</p> <p>Z shell (Zsh) is one of the Unix command shells. It can be used as an interactive login command shell and as a powerful shell script command interpreter. Zsh can also be viewed as an extended version of Bourne Shell with many improvements. Not only that, but some useful features of bash, ksh, and tcsh are also incorporated. - wikipedia</p>"},{"location":"pages/basics/zsh/#manage-zsh-files-in-zsh-directory","title":"Manage <code>.zsh*</code> files in <code>zsh/</code> directory","text":"<p>```{image} img/zsh.png :width: 600px :align: center <pre><code>`.zsh*` files are easy to get messy in the home directory. By setting `$ZDOTDIR`, most files can be moved from the home directory. In the following, `.zsh*` is managed in a directory named `zsh/`.\n\n```bash\n- zsh/\n  |-- aliases/\n    |-- git.sh\n    |-- ...\n    |-- python.sh\n  |-- settings/\n    |-- prompt.sh\n    |-- zsh-extensions.sh\n  |-- .zprofile\n  |-- .zshrc\n  |-- .zshenv\n  |-- ...\n  |-- .git\n  |-- .gitignore\n</code></pre></p> <p>Set <code>zsh/</code> as <code>ZDOTDIR</code> so that <code>.zsh*</code> in it is read.</p> <pre><code># In .zshenv\n# Set zsh/ as ZDOTDIR\nexport ...\nexport ZDOTDIR=\"$HOME/path/to/zsh\"\n</code></pre> <pre><code># Put the alias of .zshenv in the home directory\n.zshenv -&gt; '/Users/$HOME/path/to/zsh/.zshenv'\n</code></pre>"},{"location":"pages/basics/zsh/#zshrc","title":"<code>.zshrc</code>","text":"<p>Contents in<code>.zshrc</code> are also easy to get messy, so divide them into files and import them in <code>.zshrc</code>. Here, we have prepared directories called <code>aliases</code> and <code>settings</code> in the same hierarchy as <code>.zshrc</code>, and put the files to be read in them.</p> <pre><code>[[ -f $ZDOTDIR/settings/prompt.sh ]]  &amp;&amp; . $ZDOTDIR/settings/prompt.sh\n...\n[[ -f $ZDOTDIR/aliases/git.sh ]]      &amp;&amp; . $ZDOTDIR/aliases/git.sh\n[[ -f $ZDOTDIR/aliases/python.sh ]]   &amp;&amp; . $ZDOTDIR/aliases/python.sh\n...\n</code></pre> <p>Tip</p> <p>Other dotfiles in the home directory can also be managed in the same way.</p> <ul> <li>My zsh</li> </ul>"},{"location":"pages/basics/github/commitMessage/","title":"Commit Masssages with Emoji","text":"<p>When you commit files in github, you add some commit-messages. In the code of comduct of some project, it is recommended to use <code>emoji</code> to easily represent what the commit is all about. Here, we introduce a setting for that with aliases.</p> <p>Put code below in <code>.zshrc</code>. <pre><code>## Using EMOJI-LOG (https://github.com/ahmadawais/Emoji-Log) ##\n# Git Commit, Add all and Push \u2014 in one step.\ngacp() { git add . &amp;&amp; git commit -m \"$*\" &amp;&amp; git push origin main }\n\ngini() { gacp \"\ud83c\udf89 Initial commit\"}\ngnew() { gacp \"\u2728 NEW: $@\" }\ngimp() { gacp \"\ud83d\udc4c IMPROVE: $@\" }\ngprg() { gacp \"\ud83d\udea7 PROGRESS: $@\" }\n\ngmtn() { gacp \"\ud83d\udd27 MAINTAIN: $@\" }\ngfix() { gacp \"\ud83d\udc1b FIX: $@\" }\nghot() { gacp \"\ud83d\ude91 HOTFIX: $@\" }\ngbrk() { gacp \"\u203c\ufe0f BREAKING: $@\" }\ngrem() { gacp \"\ud83d\uddd1\ufe0f REMOVE: $@\" }\n\ngmrg() { gacp \"\ud83d\udd00 MERGE: $@\" }\ngref() { gacp \"\u267b\ufe0f REFACTOR: $@\" }\ngtst() { gacp \"\ud83e\uddea TEST: $@\" }\ngdoc() { gacp \"\ud83d\udcda DOC: $@\" }\ngrls() { gacp \"\ud83d\ude80 RELEASE: $@\" }\ngsec() { gacp \"\ud83d\udc6e SECURITY: $@\" }\n\n# Show commit type\ngtyp() {\nNORMAL='\\033[0;39m'\nGREEN='\\033[0;32m'\necho \"$GREEN gini$NORMAL \u2014 \ud83c\udf89 Initial commit\n$GREEN gnew$NORMAL \u2014 \u2728 NEW\n$GREEN gimp$NORMAL \u2014 \ud83d\udc4c IMPROVE\n$GREEN gprg$NORMAL \u2014 \ud83d\udea7 PROGRESS\n$GREEN gmtn$NORMAL \u2014 \ud83d\udd27 MAINTAIN\n$GREEN gfix$NORMAL \u2014 \ud83d\udc1b FIX\n$GREEN ghot$NORMAL \u2014 \ud83d\ude91 HOTFIX\n$GREEN gbrk$NORMAL \u2014 \u203c\ufe0f  BREAKING\n$GREEN grem$NORMAL \u2014 \ud83d\uddd1\ufe0f  REMOVE\n$GREEN gmrg$NORMAL \u2014 \ud83d\udd00 MERGE\n$GREEN gref$NORMAL \u2014 \u267b\ufe0f  REFACTOR\n$GREEN gtst$NORMAL \u2014 \ud83e\uddea TEST\n$GREEN gdoc$NORMAL \u2014 \ud83d\udcda DOC\n$GREEN grls$NORMAL \u2014 \ud83d\ude80 RELEASE\n$GREEN gsec$NORMAL \u2014 \ud83d\udc6e SECURITY\"\n}\n</code></pre></p>"},{"location":"pages/basics/github/commitMessage/#reference","title":"Reference","text":"<ul> <li>jupyterbook Development Conventions</li> <li>How to Write a Git Commit Message</li> <li>Emoji-Log</li> <li>gitmoji-cli</li> <li>emoji-cheat-sheet</li> <li>Complete list of github markdown emoji markup </li> <li>Commit message examples</li> </ul>"},{"location":"pages/basics/github/github/","title":"GitHub","text":"<p>{image} ./img/GitHub-flow.png :name: flow :width: 600px :align: center</p>"},{"location":"pages/basics/github/github/#git-version-control-system-vsc","title":"Git (version control system, VSC)","text":"<p>Git is a popular version control system used by developers to manage source code changes and collaborate on software development projects. It allows multiple people to work on the same codebase simultaneously and track changes made over time.</p> <p>A local repository in Git is a copy of the codebase that is stored on a developer's computer. When changes are made to the codebase, they are tracked locally, and the developer can commit those changes to their local repository. This allows developers to experiment with new code changes and make revisions without affecting the codebase that other developers are working on.</p> <p>A remote repository, on the other hand, is a copy of the codebase that is stored on a remote server. Developers can push their local changes to the remote repository to share them with others on the team. This allows everyone on the team to see the latest changes made to the codebase and collaborate more effectively.</p> <p>The key difference between local and remote repositories is that local repositories are stored on a developer's computer, while remote repositories are stored on a server that can be accessed by multiple developers. Both local and remote repositories are essential to a Git workflow, as they allow developers to work on code changes independently while still keeping everyone on the team up to date with the latest changes.</p> <p>Here are some key terms and concepts related to Git:</p> <ul> <li>Repository: A repository is a collection of files and folders in a project that are tracked by Git. It is located on a local computer and remote server (i.e., GitHub).</li> <li>Clone: To clone a repository means to create a local copy of the repository on your own computer.</li> <li>Add: When you add a file to a Git repository, you are telling Git to start tracking changes to that file.</li> <li>Commit: A commit is a snapshot of the changes you have made to the files in your repository. When you commit changes, you are creating a permanent record of those changes.</li> <li>Push: Pushing changes means sending your committed changes to the remote repository. This makes your changes visible to other team members who are also working on the same repository.</li> <li>Pull: Pulling changes means retrieving changes from the remote repository and updating your local repository with those changes. This is typically done before making changes to ensure that your local repository is up-to-date with the latest changes made by other team members.</li> <li>Branch: A branch is a separate line of development that allows you to work on changes independently of the main codebase. This can be useful when you want to experiment with new features without affecting the main codebase.</li> <li>Merge: Merging is the process of combining changes from one branch into another. This is typically done when a feature is complete and ready to be integrated into the main codebase.</li> </ul> <p>These are just a few of the most common terms and concepts used in Git. Learning Git can take some time, but it's an important skill for any developer working on a team.</p>"},{"location":"pages/basics/github/github/#basic-commands","title":"Basic commands","text":""},{"location":"pages/basics/github/github/#create-a-new-repository","title":"Create a new repository","text":"<p>First, make a repository on the GitHub website without initializing. Second, execute the commands below on the local computer</p> <pre><code>[mkdir project_name]\n[cd project_name]\n\necho \"# test\" &gt;&gt; README.md\n\n# initialize the repository\ngit init\n\n# add all files in the current directory to working tree\ngit add .\n\n# commit the changes to the local repository\ngit commit -m \"first commit\"\n\ngit branch -M main\ngit remote add origin https://github.com/&lt;Username&gt;/&lt;repository&gt;.git\n\n# push the changes to the remote repository\ngit push -u origin main\n</code></pre> <p>Note</p> <p><code>git init</code> makes repository, or <code>.git</code>, in the current directory.\\ <code>git init project_name</code> makes a directory named project_name and <code>.git</code> in it.</p>"},{"location":"pages/basics/github/github/#push-an-existing-repository-from-the-command-line","title":"push an existing repository from the command line","text":"<p>If you have already made (or initialized) a local repository, you just need to use the following commands to link to the remote repository. <pre><code>git remote add origin https://github.com/&lt;Username&gt;/&lt;repository&gt;.git\ngit branch -M main\ngit push -u origin main\n</code></pre></p> <p>Tip</p> <p>You can make a repository more easily with GitHub CLI: make new repository with GitHub CLI</p>"},{"location":"pages/basics/github/github/#clone","title":"Clone","text":"<p>In an arbitrary directory, <pre><code>$ git clone [branch, or you can omit here for main] https://github.com/&lt;Username&gt;/&lt;repository&gt;.git\n$ cd &lt;repository&gt;\n</code></pre></p>"},{"location":"pages/basics/github/github/#take-new-changes-of-the-remote-repository-into-the-local-repository","title":"take new changes of the remote repository into the local repository","text":"<pre><code>$ git pull origin main\n</code></pre> <p>Tip</p> <p>This is equivalent to <pre><code>$ git fetch\n$ git merge origin main\n</code></pre></p>"},{"location":"pages/basics/github/github/#make-a-branch-and-change-branches-at-local","title":"make a branch and change branches at local","text":"<p>When you make a repository, the only main branch exists at first. So, you are in the main branch by default.</p> <p>You can check the current branch by <pre><code>$ git branch\n</code></pre></p> <p>You can see all branches including the remote branches by <pre><code>$ git branch -a\n</code></pre></p> <p>1, Making new branch at local (branch not in remote)</p> <p>Let's make a new branch! <pre><code># make a branch\n$ git branch &lt;branch&gt;\n# switch to &lt;branch&gt; from main\n$ git checkout &lt;branch&gt;\n</code></pre></p> <p>Tip</p> <p>These two lines are equivalent to <pre><code>$ git checkout -b &lt;branch&gt;\n</code></pre></p> <p>Then reflect the new branch to the remote repository. <pre><code>$ git push origin &lt;branch&gt;\n</code></pre></p> <p>2, when remote/branch already exists <pre><code># create a new local branch pointing to the remote branch\n$ git branch &lt;branch&gt; origin/&lt;branch&gt;\n# check out that branch\n$ git checkout &lt;branch&gt;\n</code></pre></p> <p>Tip</p> <p>These two lines are equivalent to <pre><code>$ git checkout -b &lt;branch&gt; origin/&lt;branch&gt;\n</code></pre></p>"},{"location":"pages/basics/github/github/#gitignore","title":".gitignore","text":"<p>You can configure Git to ignore files you don't want to check in to GitHub. All you have to do is write down filenames in <code>.gitignore</code> in the same directory as <code>.git</code>.</p> <p>However, making <code>.gitignore</code> and writing filenames in each directory in the control of Git is troublesome. You can make <code>.gitignore</code> easily with gitignore.io website or gitignore.io CLI</p> <p>As to some files, you will append their filenames in every <code>.gitignore</code>. To avoid it, making <code>~/.gitignore_global</code> is a solution.</p> <p>Firstly, install .gitignore.io from here.</p> <p>for macOS &amp; zsh : - execute the following commands only once     <pre><code>$ git config --global core.excludesfile ~/.gitignore_global;\necho \"function gi() { curl -sLw \\\"\\\\\\n\\\" https://www.toptal.com/developers/gitignore/api/\\$@ ;}\" &gt;&gt; ~/.zshrc &amp;&amp; source ~/.zshrc\n</code></pre> - make <code>~/.gitignore_global</code> <pre><code>$ gi macos,python,visualstudiocode &gt; ~/.gitignore_global\n</code></pre> Refer to Ignoring files for more details.</p>"},{"location":"pages/basics/github/github/#when-you-want-to-rename-a-repository","title":"When you want to rename a repository","text":"<p>First, rename it on GitHub website. Second, open the corresponding [.git/ -&gt; config], and [url = https://~..git]"},{"location":"pages/basics/github/github/#quit-git-administration","title":"Quit Git administration","text":"<p>All you have to do is remove the <code>.git</code> directory.</p>"},{"location":"pages/basics/github/github/#remove-files","title":"Remove files","text":"<p>1, remove files from the repository and local directory</p> <p>2, remove files from the repository</p> <pre><code>$ git rm FILENAME #1\n$ git rm --cached FILENAME #2\n$ git commit -m \"delete\"; git push origin main\n</code></pre>"},{"location":"pages/basics/github/github/#invite-people-to-my-private-repository","title":"Invite people to my Private repository","text":"<ul> <li>Go to the repository on GitHub</li> <li>Click <code>Settings</code></li> <li>Click <code>Collaborators</code></li> <li>Click <code>Add people</code></li> <li>Type the username of the person you want to invite</li> </ul> <p>(github-cli)=</p>"},{"location":"pages/basics/github/github/#github-cli","title":"GitHub CLI","text":""},{"location":"pages/basics/github/github/#install","title":"Install","text":"<pre><code>$ brew install gh\n</code></pre>"},{"location":"pages/basics/github/github/#make-a-new-repository-based-on-the-current-directory","title":"Make a new repository based on the current directory","text":"<pre><code>$ git init; git add .\n$ git commit -m \"Initial commit\"\n$ gh repo create --private --source=. --push\n</code></pre> <p>You can define an alias in <code>~/.zshrc</code> as follows: <pre><code># make a new repository based on the current directory\n# $1 = private or public\nginit() {\n    git init\n    git add .\n    git commit -m \"\ud83c\udf89 Initial commit\"\n    gh repo create --\"$1\" --source=. --push\n}\n</code></pre></p>"},{"location":"pages/basics/github/github/#make-an-alias-to-delete-remote-repository","title":"Make an alias to delete remote repository","text":"<ul> <li>Register     <pre><code>$ gh alias set repo-delete 'api -X DELETE repos/$1'\n$ gh auth refresh -h github.com -s delete_repo\n</code></pre></li> <li>Usage (WARNING: no confirmation!)     <pre><code>$ gh repo-delete user/myrepo\n</code></pre></li> <li>Comfirm     <pre><code>$ gh alias list\n</code></pre></li> </ul>"},{"location":"pages/basics/github/github/#reference","title":"Reference","text":"<ul> <li>What is Git?</li> <li>Bitbucket.</li> </ul>"},{"location":"pages/book/asdf/","title":"Asdf","text":""},{"location":"pages/coding-rules/","title":"Coding rules","text":"<p>Coding rules are guidelines that help developers write clean, readable, and maintainable code. They can be enforced manually or through the use of automated tools.</p> <p>Some common coding rules include:</p> <ul> <li>Use consistent naming conventions for variables, functions, and classes.</li> <li>Use meaningful variable names that reflect the purpose of the data they represent.</li> <li>Avoid using abbreviations or acronyms unless they are widely used.</li> <li>Avoid using magic numbers.</li> <li>Avoid using global variables.</li> <li>Avoid deep nesting.</li> <li>Avoid duplicating code. Instead, use functions or classes to encapsulate reusable logic.</li> <li>Write small functions that perform a single task.</li> <li>Don\u2019t reinvent the wheel.</li> <li>Remove unused or commented-out code.</li> <li>Use comments to explain complex logic and describe the purpose of each function.</li> <li>Use whitespace and indentation to make your code easier to read.</li> <li>Use error handling techniques to prevent unexpected behavior or crashes.</li> <li>Test your code thoroughly to ensure that it works as expected and is free of bugs.</li> <li>Use version control to keep track of changes and collaborate with other developers.</li> </ul> <p>By following coding rules, developers can write code that is easy to understand, modify, and maintain, which can save time and reduce errors in the long run.</p>"},{"location":"pages/coding-rules/naming/","title":"Naming Conventions","text":""},{"location":"pages/coding-rules/naming/#naming-conventions-in-python","title":"Naming Conventions in Python","text":"<p>PEP 8 \u2013 Style Guide for Python Code | peps.python.org</p>"},{"location":"pages/coding-rules/naming/#package","title":"Package","text":"<ul> <li>Python packages should have short, all-lowercase names, and the use of underscores is discouraged. Examples: <code>mypackage</code></li> </ul>"},{"location":"pages/coding-rules/naming/#module","title":"Module","text":"<ul> <li>Modules should have short, all-lowercase names. Underscores can be used in the module name if it improves readability. Example: <code>module_name</code></li> </ul>"},{"location":"pages/coding-rules/naming/#constant","title":"Constant","text":"<ul> <li>Constants are usually defined on a module level and written in all capital letters with underscores separating words. Examples: <code>MAX_OVERFLOW</code></li> </ul>"},{"location":"pages/coding-rules/naming/#variable","title":"Variable","text":"<ul> <li>Variable names should be lowercase, with underscores for readability.</li> <li>Variable names should be short but descriptive. Single-character variable names and meaningless variable names should be avoided. Examples: <code>player_name</code>, <code>score</code>, etc.</li> <li>Boolean variable names are typically in the form of <code>is + adjective</code>, <code>has + noun</code>, <code>can + verb</code>, <code>with + noun</code>, etc. Example: <code>is_active</code>, <code>has_children</code>, <code>can_swim</code>, <code>with_fins</code>, etc. However, the first word can be omitted if it is obvious from the context.</li> </ul>"},{"location":"pages/coding-rules/naming/#function","title":"Function","text":"<ul> <li>Function names should be lowercase, with underscores for readability. They should be in the form of <code>verb + noun</code>, but either can be omitted if it is obvious from the context. Examples: <code>get_score</code>, <code>print_message</code></li> </ul>"},{"location":"pages/coding-rules/naming/#class","title":"Class","text":"<ul> <li>Class names should normally use the CapWords convention. Examples: <code>MyClass</code></li> </ul>"},{"location":"pages/coding-rules/naming/#method-and-variable","title":"Method and Variable","text":"<ul> <li>Use the function and variable naming rules</li> <li>Use one leading underscore only for non-public methods and instance variables.</li> </ul>"},{"location":"pages/coding-rules/naming/#naming-conventions-in-other-programming-languages","title":"Naming conventions in other programming languages","text":"<p>Unlike Python, <code>camelCase</code> is used for naming variables and functions in other programming languages. Examples: <code>playerName</code>, <code>getScore</code>, <code>printMessage</code></p>"},{"location":"pages/coding-rules/naming/#abbreviations","title":"Abbreviations","text":"<p>\ud83d\udeab Don\u2019t use abbreviations unless they are widely used. Recommended abbreviations are given here.</p>"},{"location":"pages/latex/","title":"\\(\\LaTeX\\)","text":"<p>\\(\\LaTeX\\)</p> <p>\\(\\LaTeX\\) is a typesetting system that is widely used in academia. It is especially useful for writing mathematical equations.</p> <p>We are going to see some basic settings and usage for LaTeX in VS Code.</p> <ul> <li>\\(\\LaTeX\\) settings in VS Code</li> <li>LaTeX Basics</li> </ul> <p>Preamble</p> <p>Preamble is the part in which you can set the document class, load packages, define commands, and set some options for the document. It is placed between <code>\\documentclass</code> and <code>\\begin{document}</code>. You can also put it in a separate file and load it with <code>\\input{preamble.tex}</code>.</p> <p>Sometimes, you can't use some packages due to the conflicts between packages and document classes. So, you need to change the settings in the preamble according to the document class.</p> <p>You also have to care about the conflicts between packages themselves because you can't use some packages together, or you need to load them in a specific order.</p> <p>We are going to see some examples of the preamble for some document classes.</p> <ul> <li>article</li> <li>revtex4-2</li> <li>beamer</li> <li>\\newcommands</li> </ul> <p>You can download all the files related to these sections here.</p>"},{"location":"pages/latex/article/","title":"article","text":""},{"location":"pages/latex/article/#preambletex","title":"<code>preamble.tex</code>","text":"<pre><code>% set margins\n\\usepackage[top=15truemm,bottom=15truemm,left=15truemm,right=15truemm]{geometry}\n\\usepackage[dvipdfmx]{graphicx,hyperref,xcolor}\n% math\n\\usepackage{amsmath,amsthm,amssymb,mathtools,mathrsfs}\n% physics\n\\usepackage{physics}\n% itembox\n\\usepackage{ascmac}\n% algorithm\n\\usepackage{algorithm,algorithmic}\n% vector graphics\n\\usepackage{tikz}\n% author and affiliation\n\\usepackage{authblk}\n% comment\n\\usepackage{comment}\n% image position\n\\usepackage{here}\n% Align table columns on decimal point\n\\usepackage{dcolumn}\n\n\n% style setting\n% ---------------------------------------------------------------------------- %\n\\allowdisplaybreaks[1]\n\\renewcommand\\Authfont{\\fontsize{14}{14.4}\\selectfont}\n\\renewcommand\\Affilfont{\\fontsize{10}{10.8}\\itshape}\n\\renewcommand{\\baselinestretch}{1.25}\n% ---------------------------------------------------------------------------- %\n\n\n% number figures, tables and equations within the sections\n% ---------------------------------------------------------------------------- %\n\\numberwithin{equation}{section}\n\\numberwithin{figure}{section}\n\\numberwithin{table}{section}\n% ---------------------------------------------------------------------------- %\n\n\n% Logic and proofs\n% ---------------------------------------------------------------------------- %\n\\newtheorem{theorem}{Theorem}[section]\n\\newtheorem{corollary}{Corollary}[theorem]\n\\newtheorem{lemma}[theorem]{Lemma}\n\\newtheorem{proposition}[theorem]{Proposition}\n\n\\theoremstyle{definition}\n\\newtheorem{definition}{Definition}[section]\n\\newtheorem{example}{Example}[section]\n\\newtheorem{exercise}{Exercise}[section]\n\n\\theoremstyle{remark}\n\\newtheorem{remark}{Remark}[section]\n% ---------------------------------------------------------------------------- %\n</code></pre>"},{"location":"pages/latex/article/#maintex","title":"<code>main.tex</code>","text":"<p>If you want to use <code>report</code> class, change <code>article</code> to <code>report</code> in the first line.</p> <pre><code>\\documentclass[12pt]{article}\n\\input{preamble}\n\\allowdisplaybreaks[1]\n\n\\title{Title}\n\\author{Author}\n\\affil{Dept.\\ of Physics, The University of Asdf, address}\n\\date{\\today}\n\\begin{document}\n\\maketitle\n\\tableofcontents\n\n\\section{Introduction}\nasdf asdf asdf asdf asdf asdf\n\n\\end{document}\n</code></pre>"},{"location":"pages/latex/basics/","title":"Latex Basics","text":""},{"location":"pages/latex/basics/#inline-equations","title":"Inline equations","text":"<p>You can write inline equations by using <code>$</code>.</p> <p>Example</p> <pre><code>The equation $E=mc^2$ is the most famous equation in physics.\n</code></pre> <p>The equation \\(E=mc^2\\) is the most famous equation in physics.</p>"},{"location":"pages/latex/basics/#display-equations","title":"Display equations","text":"<p>You can write display equations by using <code>$$</code> or <code>\\[ \\]</code>.</p> <p>Example</p> <p><pre><code>Schrodinger equation:\n\n$$ i\\hbar\\frac{\\partial}{\\partial t}|\\psi(t)\\rangle = H |\\psi(t)\\rangle $$\n</code></pre> Schrodinger equation:</p> \\[ i\\hbar\\frac{\\partial}{\\partial t}|\\psi(t)\\rangle = H |\\psi(t)\\rangle \\] <p>Tip</p> <p>You can use shorter commands with <code>physics</code> package.</p> <pre><code>\\begin{align}\n    i\\hbar\\pdv{t} \\ket{\\psi(t)} = H \\ket{\\psi(t)}\n\\end{align}\n</code></pre> \\[ \\begin{align}     i\\hbar\\pdv{t} \\ket{\\psi(t)} = H \\ket{\\psi(t)} \\end{align} \\]"},{"location":"pages/latex/basics/#basic-symbols","title":"Basic Symbols","text":""},{"location":"pages/latex/basics/#greek-letters","title":"Greek letters","text":"Command Symbol <code>\\alpha</code> \\(\\alpha\\) <code>\\beta</code> \\(\\beta\\) <code>\\gamma</code> \\(\\gamma\\) <code>\\delta</code> \\(\\delta\\) <code>\\epsilon</code> \\(\\epsilon\\) <code>\\zeta</code> \\(\\zeta\\) <code>\\eta</code> \\(\\eta\\) <code>\\theta</code> \\(\\theta\\) <code>\\iota</code> \\(\\iota\\) <code>\\kappa</code> \\(\\kappa\\) <code>\\lambda</code> \\(\\lambda\\) <code>\\mu</code> \\(\\mu\\) <code>\\nu</code> \\(\\nu\\) <code>\\xi</code> \\(\\xi\\) <code>\\pi</code> \\(\\pi\\) <code>\\rho</code> \\(\\rho\\) <code>\\sigma</code> \\(\\sigma\\) <code>\\tau</code> \\(\\tau\\) <code>\\upsilon</code> \\(\\upsilon\\) <code>\\phi</code> \\(\\phi\\) <code>\\chi</code> \\(\\chi\\) <code>\\psi</code> \\(\\psi\\) <code>\\omega</code> \\(\\omega\\) <code>\\Gamma</code> \\(\\Gamma\\) <code>\\Delta</code> \\(\\Delta\\) <code>\\Theta</code> \\(\\Theta\\) <code>\\Lambda</code> \\(\\Lambda\\) <code>\\Xi</code> \\(\\Xi\\) <code>\\Pi</code> \\(\\Pi\\) <code>\\Sigma</code> \\(\\Sigma\\) <code>\\Upsilon</code> \\(\\Upsilon\\) <code>\\Phi</code> \\(\\Phi\\) <code>\\Psi</code> \\(\\Psi\\) <code>\\Omega</code> \\(\\Omega\\)"},{"location":"pages/latex/basics/#operators","title":"Operators","text":"Command Symbol <code>+</code> \\(+\\) <code>-</code> \\(-\\) <code>=</code> \\(=\\) <code>\\div</code> \u00f7 <code>\\frac{a}{b}</code> \\(\\frac{a}{b}\\) <code>\\times</code> \\(\\times\\) <code>\\pm</code> \\(\\pm\\) <p>Note</p> <p>In <code>physics</code> package, <code>\\div</code> is replaced by \\(\\nabla\\cdot\\)</p>"},{"location":"pages/latex/basics/#big-operators","title":"Big Operators","text":"Command Symbol <code>\\lim x</code> \\(\\lim x\\) <code>\\lim_{x \\to \\infty} x</code> \\(\\lim_{x \\to \\infty} x\\) <code>\\lim\\limits_{x \\to \\infty} x</code> \\(\\lim\\limits_{x \\to \\infty} x\\) <code>\\sum x</code> \\(\\sum x\\) <code>\\sum_{i=1}^n x</code> \\(\\sum_{i=1}^n x\\) <code>\\sum\\limits_{i=1}^n x</code> \\(\\sum\\limits_{i=1}^n x\\) <code>\\prod_{i=1}^n x</code> \\(\\prod_{i=1}^n x\\) <code>\\coprod_{i=1}^n x</code> \\(\\coprod_{i=1}^n x\\) <code>\\bigcup_{i=1}^n x</code> \\(\\bigcup_{i=1}^n x\\) <code>\\bigcap_{i=1}^n x</code> \\(\\bigcap_{i=1}^n x\\) <code>\\bigvee_{i=1}^n x</code> \\(\\bigvee_{i=1}^n x\\) <code>\\bigwedge_{i=1}^n x</code> \\(\\bigwedge_{i=1}^n x\\) <code>\\bigsqcup_{i=1}^n x</code> \\(\\bigsqcup_{i=1}^n x\\) <code>\\bigodot_{i=1}^n x</code> \\(\\bigodot_{i=1}^n x\\) <code>\\bigotimes_{i=1}^n x</code> \\(\\bigotimes_{i=1}^n x\\) <code>\\int_a^b x</code> \\(\\int_a^b x\\) <code>\\oint_a^b x</code> \\(\\oint_a^b x\\) <code>\\iint_a^b x</code> \\(\\iint_a^b x\\) <code>\\iiint_a^b x</code> \\(\\iiint_a^b x\\)"},{"location":"pages/latex/basics/#miscellaneous","title":"Miscellaneous","text":"Command Symbol <code>\\forall</code> \\(\\forall\\) <code>\\exists</code> \\(\\exists\\) <code>\\partial</code> \\(\\partial\\) <code>\\nabla</code> \\(\\nabla\\) <code>\\infty</code> \\(\\infty\\) <code>\\dots</code> \\(\\dots\\) <code>\\cdot</code> \\(\\cdot\\) <code>\\cdots</code> \\(\\cdots\\) <code>\\vdots</code> \\(\\vdots\\) <code>\\ddots</code> \\(\\ddots\\) <code>\\therefore</code> \\(\\therefore\\) <code>\\because</code> \\(\\because\\) <code>\\clubsuit</code> \\(\\clubsuit\\) <code>\\diamondsuit</code> \\(\\diamondsuit\\) <code>\\heartsuit</code> \\(\\heartsuit\\) <code>\\spadesuit</code> \\(\\spadesuit\\) <code>\\prime</code> \\(\\prime\\) <code>f^\\prime</code> \\(f^\\prime\\) <code>\\angle</code> \\(\\angle\\) <p>Dots</p> \\[     \\sum_{i=1}^n x_i = x_1 + x_2 + \\cdots + x_n \\] \\[     A = \\mqty[a_{11} &amp; \\cdots &amp; a_{1n} \\\\ \\vdots &amp; \\ddots &amp; \\vdots \\\\ a_{n1} &amp; \\cdots &amp; a_{nn}] \\]"},{"location":"pages/latex/basics/#functions","title":"Functions","text":"Command Symbol <code>\\sqrt{x}</code> \\(\\sqrt{x}\\) <code>\\sqrt[n]{x}</code> \\(\\sqrt[n]{x}\\) <code>\\sin x</code> \\(\\sin x\\) <code>\\cos x</code> \\(\\cos x\\) <code>\\tan x</code> \\(\\tan x\\) <code>\\cot x</code> \\(\\cot x\\) <code>\\sec x</code> \\(\\sec x\\) <code>\\csc x</code> \\(\\csc x\\) <code>\\arcsin x</code> \\(\\arcsin x\\) <code>\\arccos x</code> \\(\\arccos x\\) <code>\\arctan x</code> \\(\\arctan x\\) <code>\\sinh x</code> \\(\\sinh x\\) <code>\\cosh x</code> \\(\\cosh x\\) <code>\\tanh x</code> \\(\\tanh x\\) <code>\\coth x</code> \\(\\coth x\\) <code>\\log x</code> \\(\\log x\\) <code>\\ln x</code> \\(\\ln x\\) <code>\\exp x</code> \\(\\exp x\\) <code>\\binom{n}{k}</code> \\(\\binom{n}{k}\\) <p>Tip</p> <p>You can wirte <code>\\sum\\limits_{i=1}^n x</code> instead of <code>\\sum_{i=1}^n x</code> to make the limits appear above and below the symbol.</p> <p>You can wirte \\(\\sum\\limits_{i=1}^n x\\) instead of \\(\\sum_{i=1}^n x\\) to make the limits appear above and below the symbol.</p>"},{"location":"pages/latex/basics/#relations","title":"Relations","text":"Command Symbol <code>a = b</code> \\(a = b\\) <code>a \\neq b</code> \\(a \\neq b\\) <code>a \\approx b</code> \\(a \\approx b\\) <code>a \\equiv b</code> \\(a \\equiv b\\) <code>a \\leq b</code> \\(a \\leq b\\) <code>a \\geq b</code> \\(a \\geq b\\) <code>a \\ll b</code> \\(a \\ll b\\) <code>a \\gg b</code> \\(a \\gg b\\) <code>a \\sim b</code> \\(a \\sim b\\) <code>a \\propto b</code> \\(a \\propto b\\) <code>a \\subset b</code> \\(a \\subset b\\) <code>a \\supset b</code> \\(a \\supset b\\) <code>a \\subseteq b</code> \\(a \\subseteq b\\) <code>a \\supseteq b</code> \\(a \\supseteq b\\) <code>a \\in b</code> \\(a \\in b\\) <code>a \\ni b</code> \\(a \\ni b\\) <code>a \\notin b</code> \\(a \\notin b\\) <code>a \\mapsto b</code> \\(a \\mapsto b\\) <code>a \\to b</code> \\(a \\to b\\) <code>a \\gets b</code> \\(a \\gets b\\) <code>a \\leftrightarrow b</code> \\(a \\leftrightarrow b\\) <code>a \\Leftrightarrow b</code> \\(a \\Leftrightarrow b\\) <code>a \\implies b</code> \\(a \\implies b\\) <code>a \\impliedby b</code> \\(a \\impliedby b\\) <code>a \\iff b</code> \\(a \\iff b\\) <code>a \\to b</code> \\(a \\to b\\) <code>a \\gets b</code> \\(a \\gets b\\) <code>a \\uparrow b</code> \\(a \\uparrow b\\) <code>a \\downarrow b</code> \\(a \\downarrow b\\) <code>a \\updownarrow b</code> \\(a \\updownarrow b\\) <code>a \\Uparrow b</code> \\(a \\Uparrow b\\) <code>a \\Downarrow b</code> \\(a \\Downarrow b\\) <code>a \\Updownarrow b</code> \\(a \\Updownarrow b\\) <code>a \\mid b</code> \\(a \\mid b\\) <code>a \\parallel b</code> \\(a \\parallel b\\) <code>a \\perp b</code> \\(a \\perp b\\) <code>a \\smile b</code> \\(a \\smile b\\) <code>a \\frown b</code> \\(a \\frown b\\) <code>a \\vdash b</code> \\(a \\vdash b\\) <code>a \\dashv b</code> \\(a \\dashv b\\)"},{"location":"pages/latex/basics/#spaces","title":"Spaces","text":"Command Symbol <code>a \\! b</code> \\(a \\! b\\) <code>a \\, b</code> \\(a \\, b\\) <code>a \\: b</code> \\(a \\: b\\) <code>a \\; b</code> \\(a \\; b\\) <code>a \\hspace{1pt} b</code> \\(a \\hspace{1pt} b\\) <code>a \\hspace{1mm} b</code> \\(a \\hspace{1mm} b\\) <code>a \\hspace{1ex} b</code> \\(a \\hspace{1ex} b\\) <code>a \\hspace{1em} b</code> \\(a \\hspace{1em} b\\) <code>a \\quad b</code> \\(a \\quad b\\) <code>a \\qquad b</code> \\(a \\qquad b\\) <code>a \\hspace{1cm} b</code> \\(a \\hspace{1cm} b\\) <code>a \\hspace{1in} b</code> \\(a \\hspace{1in} b\\)"},{"location":"pages/latex/basics/#brackets-and-parentheses","title":"Brackets and Parentheses","text":"Command Symbol <code>$(A)$</code> \\((A)\\) <code>$[A]$</code> \\([A]\\) <code>$\\{A\\}$</code> \\(\\{A\\}\\) <code>$\\langle A \\rangle$</code> \\(\\langle A \\rangle\\) <code>$\\vert A \\vert$</code> \\(\\vert A \\vert\\) <code>$\\Vert A \\Vert$</code> \\(\\Vert A \\Vert\\) <code>$\\lfloor A \\rfloor$</code> \\(\\lfloor A \\rfloor\\) <code>$\\lceil A \\rceil$</code> \\(\\lceil A \\rceil\\)"},{"location":"pages/latex/basics/#accents","title":"Accents","text":"Command Symbol <code>\\hat{a}</code> \\(\\hat{a}\\) <code>\\check{a}</code> \\(\\check{a}\\) <code>\\tilde{a}</code> \\(\\tilde{a}\\) <code>\\acute{a}</code> \\(\\acute{a}\\) <code>\\grave{a}</code> \\(\\grave{a}\\) <code>\\dot{a}</code> \\(\\dot{a}\\) <code>\\ddot{a}</code> \\(\\ddot{a}\\) <code>\\breve{a}</code> \\(\\breve{a}\\) <code>\\bar{a}</code> \\(\\bar{a}\\) <code>\\vec{a}</code> \\(\\vec{a}\\)"},{"location":"pages/latex/basics/#styles","title":"Styles","text":"Command Example <code>\\mathit{A}</code> \\(\\mathit{A\\,B\\,C\\,D\\,E\\,F\\,G\\,H\\,I\\,J\\,K\\,L\\,M\\,N\\,O\\,P\\,Q\\,R\\,S\\,T\\,U\\,V\\,W\\,X\\,Y\\,Z}\\) <code>\\mathrm{A}</code> \\(\\mathrm{A\\,B\\,C\\,D\\,E\\,F\\,G\\,H\\,I\\,J\\,K\\,L\\,M\\,N\\,O\\,P\\,Q\\,R\\,S\\,T\\,U\\,V\\,W\\,X\\,Y\\,Z}\\) <code>\\mathsf{A}</code> \\(\\mathsf{A\\,B\\,C\\,D\\,E\\,F\\,G\\,H\\,I\\,J\\,K\\,L\\,M\\,N\\,O\\,P\\,Q\\,R\\,S\\,T\\,U\\,V\\,W\\,X\\,Y\\,Z}\\) <code>\\mathbf{A}</code> \\(\\mathbf{A\\,B\\,C\\,D\\,E\\,F\\,G\\,H\\,I\\,J\\,K\\,L\\,M\\,N\\,O\\,P\\,Q\\,R\\,S\\,T\\,U\\,V\\,W\\,X\\,Y\\,Z}\\) <code>\\mathcal{A}</code> \\(\\mathcal{A\\,B\\,C\\,D\\,E\\,F\\,G\\,H\\,I\\,J\\,K\\,L\\,M\\,N\\,O\\,P\\,Q\\,R\\,S\\,T\\,U\\,V\\,W\\,X\\,Y\\,Z}\\) <code>\\mathfrak{A}</code> \\(\\mathfrak{A\\,B\\,C\\,D\\,E\\,F\\,G\\,H\\,I\\,J\\,K\\,L\\,M\\,N\\,O\\,P\\,Q\\,R\\,S\\,T\\,U\\,V\\,W\\,X\\,Y\\,Z}\\) <code>\\mathbb{A}</code> \\(\\mathbb{A\\,B\\,C\\,D\\,E\\,F\\,G\\,H\\,I\\,J\\,K\\,L\\,M\\,N\\,O\\,P\\,Q\\,R\\,S\\,T\\,U\\,V\\,W\\,X\\,Y\\,Z}\\)"},{"location":"pages/latex/basics/#matrices","title":"Matrices","text":"Symbol Command <code>\\begin{pmatrix} a \\\\ b \\end{pmatrix}</code> \\(\\begin{pmatrix} a \\\\ b \\end{pmatrix}\\) <code>\\begin{pmatrix} a &amp; b \\\\ c &amp; d \\end{pmatrix}</code> \\(\\begin{pmatrix} a &amp; b \\\\ c &amp; d \\end{pmatrix}\\) <code>\\begin{bmatrix} a &amp; b \\\\ c &amp; d \\end{bmatrix}</code> \\(\\begin{bmatrix} a &amp; b \\\\ c &amp; d \\end{bmatrix}\\) <code>\\begin{vmatrix} a &amp; b \\\\ c &amp; d \\end{vmatrix}</code> \\(\\begin{vmatrix} a &amp; b \\\\ c &amp; d \\end{vmatrix}\\) <code>\\begin{Vmatrix} a &amp; b \\\\ c &amp; d \\end{Vmatrix}</code> \\(\\begin{Vmatrix} a &amp; b \\\\ c &amp; d \\end{Vmatrix}\\)"},{"location":"pages/latex/basics/#amsmath-package","title":"<code>amsmath</code> package","text":"<p>You can use <code>amsmath</code> package to use more commands, such as <code>cases</code> and <code>align</code>.</p>"},{"location":"pages/latex/basics/#cases","title":"<code>cases</code>","text":"<p>You can use <code>cases</code> environment to write piecewise functions.</p> <p>Example</p> <pre><code>\\begin{align}\n    f(x) = \\begin{cases}\n        0 &amp; (x &lt; 0) \\\\\n        1 &amp; (x \\geq 0)\n    \\end{cases}\n\\end{align}\n</code></pre> \\[ \\begin{align}     f(x) = \\begin{cases}         0 &amp; (x &lt; 0) \\\\         1 &amp; (x \\geq 0)     \\end{cases} \\end{align} \\]"},{"location":"pages/latex/basics/#align","title":"<code>align</code>","text":"<p>You can align equations by using <code>align</code> environment. You can align equations by <code>&amp;</code>.</p> <p>Example</p> <pre><code>\\begin{align}\n    f(x) &amp;= \\int_{0}^{x} \\left( \\frac{1}{2}t^3 - 3t^2 + 4t + 7 \\right) dt \\\\\n    &amp;= \\left[ \\frac{1}{8}t^4 - t^3 + 2t^2 + 7t \\right]_{0}^{x} \\\\\n    &amp;= \\frac{1}{8}x^4 - x^3 + 2x^2 + 7x\n\\end{align}\n</code></pre> \\[ \\begin{align}     f(x)     &amp;= \\int_{0}^{x} \\left( \\frac{1}{2}t^3 - 3t^2 + 4t + 7 \\right) dt \\\\     &amp;= \\left[ \\frac{1}{8}t^4 - t^3 + 2t^2 + 7t \\right]_{0}^{x} \\\\     &amp;= \\frac{1}{8}x^4 - x^3 + 2x^2 + 7x \\end{align} \\]"},{"location":"pages/latex/basics/#physics-package","title":"<code>physics</code> package","text":"<p>You can use <code>physics</code> package to use more commands, such as <code>\\qty</code>, <code>\\dv</code>, <code>pdv</code>, <code>\\eval</code>, <code>\\order</code>, <code>\\abs</code>, <code>\\norm</code>, <code>\\commutator</code> [or <code>\\comm</code>], <code>\\anticommutator</code> [or <code>\\acomm</code>]</p>"},{"location":"pages/latex/basics/#qty","title":"<code>\\qty</code>","text":"<p>You can use <code>\\qty</code> command to write adaptive parentheses instead of <code>\\left</code> and <code>\\right</code>.</p> <p>Example</p> <pre><code>\\begin{align}\n    \\qty( \\frac{1}{2} )\n    \\quad\n    \\qty[ \\frac{1}{2} ]\n    \\quad\n    \\qty{ \\frac{1}{2} }\n\\end{align}\n</code></pre> \\[ \\begin{align}     \\qty( \\frac{1}{2} )     \\quad     \\qty[ \\frac{1}{2} ]     \\quad     \\qty{ \\frac{1}{2} } \\end{align} \\]"},{"location":"pages/latex/basics/#dv","title":"<code>dv</code>","text":"<p>You can use <code>dv</code> command to write derivatives easily.</p> <p>Example</p> <pre><code>\\begin{align}\n    \\dv{x} \\sin{x} = \\cos{x}\n\\end{align}\n</code></pre> \\[ \\begin{align}     \\dv{x} \\sin{x} = \\cos{x} \\end{align} \\]"},{"location":"pages/latex/basics/#pdv","title":"<code>pdv</code>","text":"<p>You can use <code>pdv</code> command to write partial derivatives easily.</p> <p>Example</p> <pre><code>\\begin{align}\n    \\pdv{x} f(x, y), \\quad \\pdv{f}{x}, \\quad \\pdv{f}{x}{y}, \\quad \\pdv[2]{f}{x}\n\\end{align}\n</code></pre> \\[ \\begin{align}     \\pdv{x} f(x, y), \\quad \\pdv{f}{x}, \\quad \\pdv{f}{x}{y}, \\quad \\pdv[2]{f}{x} \\end{align} \\]"},{"location":"pages/latex/basics/#eval","title":"<code>\\eval</code>","text":"<p>You can use <code>\\eval</code> command to write evaluation easily.</p> <p>Example</p> <pre><code>\\begin{align}\n    \\eval{x^2}_{x=1}, \\quad \\eval{x^{-2}}_{1}^{\\infty}\n\\end{align}\n</code></pre> \\[ \\begin{align}     \\eval{x^2}_{x=1}, \\quad \\eval{x^{-2}}_{1}^{\\infty} \\end{align} \\]"},{"location":"pages/latex/basics/#order","title":"<code>\\order</code>","text":"<p>You can use <code>\\order</code> command to write order easily.</p> <p>Example</p> <pre><code>\\begin{align}\n    \\order{x^2}, \\quad \\order{\\frac{1}{x^2}}\n\\end{align}\n</code></pre> \\[ \\begin{align}     \\order{x^2}, \\quad \\order{\\frac{1}{x^2}} \\end{align} \\]"},{"location":"pages/latex/basics/#abs","title":"<code>\\abs</code>","text":"<p>You can use <code>\\abs</code> command to write absolute value easily.</p> <p>Example</p> <pre><code>\\begin{align}\n    \\abs{x}, \\quad \\abs{\\frac{1}{x}}\n\\end{align}\n</code></pre> \\[ \\begin{align}     \\abs{x}, \\quad \\abs{\\frac{1}{x}} \\end{align} \\]"},{"location":"pages/latex/basics/#norm","title":"<code>\\norm</code>","text":"<p>You can use <code>\\norm</code> command to write norm easily.</p> <p>Example</p> <pre><code>\\begin{align}\n    \\norm{x}, \\quad \\norm{\\frac{1}{x}}\n\\end{align}\n</code></pre> \\[ \\begin{align}     \\norm{x}, \\quad \\norm{\\frac{1}{x}} \\end{align} \\]"},{"location":"pages/latex/basics/#commutator-or-comm","title":"<code>\\commutator</code> [or <code>\\comm</code>]","text":"<p>You can use <code>\\commutator</code> command to write commutator easily.</p> <p>Example</p> <pre><code>\\begin{align}\n    \\commutator{A}{B}, \\quad \\comm{A}{B}\n\\end{align}\n</code></pre> \\[ \\begin{align}     \\commutator{A}{B}, \\quad \\comm{A}{B} \\end{align} \\]"},{"location":"pages/latex/basics/#anticommutator-or-acomm","title":"<code>\\anticommutator</code> [or <code>\\acomm</code>]","text":"<p>You can use <code>\\anticommutator</code> command to write anticommutator easily.</p> <p>Example</p> <pre><code>\\begin{align}\n    \\anticommutator{A}{B}, \\quad \\acomm{A}{B}\n\\end{align}\n</code></pre> \\[ \\begin{align}     \\anticommutator{A}{B}, \\quad \\acomm{A}{B} \\end{align} \\]"},{"location":"pages/latex/basics/#vector-notation","title":"Vector notation","text":"Command Output <code>\\va{a}</code> \\(\\va{a}\\) <code>\\vb{a}</code> \\(\\vb{a}\\) <code>\\grad{a}</code> \\(\\grad{a}\\) <code>\\curl{a}</code> \\(\\curl{a}\\) <code>\\div{a}</code> \\(\\div{a}\\) <code>\\laplacian{a}</code> \\(\\laplacian{a}\\)"},{"location":"pages/latex/basics/#operators_1","title":"Operators","text":"Command Output <code>\\tr[A]</code> \\(\\tr[A]\\) <code>\\Tr[A]</code> \\(\\Tr[A]\\) <code>\\rank M</code> \\(\\rank M\\) <code>\\erf</code> \\(\\erf\\) <code>\\Res</code> \\(\\Res\\) <code>\\pv{\\int f(z) \\dd{z}}</code> \\(\\pv{\\int f(z) \\dd{z}}\\) <code>\\Re</code> \\(\\Re\\) <code>\\Im</code> \\(\\Im\\)"},{"location":"pages/latex/basics/#dirac-bra-ket-notation","title":"Dirac bra-ket notation","text":"Command Output <code>\\ket{a}</code> \\(\\ket{a}\\) <code>\\bra{a}</code> \\(\\bra{a}\\) <code>\\braket{a}</code> \\(\\braket{a}\\) <code>\\braket{a}{b}</code> \\(\\braket{a}{b}\\) <code>dyad{a}</code> \\(\\dyad{a}\\) <code>dyad{a}{b}</code> \\(\\dyad{a}{b}\\) <code>expval{A}</code> \\(\\expval{A}\\) <code>ev{A}</code> \\(\\ev{A}\\) <code>expval{A}{a}</code> \\(\\expval{A}{a}\\) <code>ev{A}{a}</code> \\(\\ev{A}{a}\\) <code>\\mel{a}{A}{b}</code> \\(\\mel{a}{A}{b}\\)"},{"location":"pages/latex/basics/#matrices_1","title":"Matrices","text":"Command Output <code>\\mqty(a &amp; b \\\\ c &amp; d)</code> \\(\\mqty(a &amp; b \\\\ c &amp; d)\\) <code>\\mqty[ a &amp; b \\\\ c &amp; d ]</code> \\(\\mqty[ a &amp; b \\\\ c &amp; d ]\\) <code>\\vmqty{a &amp; b \\\\ c &amp; d}</code> \\(\\vmqty{a &amp; b \\\\ c &amp; d}\\) <code>\\mqty[\\imat{2}]</code> \\(\\mqty[\\imat{2}]\\) <code>\\mqty[\\pmat{0}]</code> \\(\\mqty[\\pmat{0}]\\) <code>\\mqty[\\pmat{1}]</code> \\(\\mqty[\\pmat{1}]\\) <code>\\mqty[\\pmat{2}]</code> \\(\\mqty[\\pmat{2}]\\) <code>\\mqty[\\pmat{3}]</code> \\(\\mqty[\\pmat{3}]\\) <code>\\mqty(\\dmat{1,2,3})</code> \\(\\mqty(\\dmat{1,2,3})\\) <code>\\mqty(\\admat{1,2,3})</code> \\(\\mqty(\\admat{1,2,3})\\)"},{"location":"pages/latex/beamer/","title":"beamer","text":""},{"location":"pages/latex/beamer/#preambletex","title":"<code>preamble.tex</code>","text":"<pre><code>% mathtools: math tools, mathrsfs: RSFS fonts\n\\usepackage{mathtools,mathrsfs}\n% physics\n\\usepackage{physics}\n% algorithm\n\\usepackage{algorithm,algorithmic}\n% vector graphics\n\\usepackage{tikz}\n% comment\n\\usepackage{comment}\n% image position\n\\usepackage{here}\n% figure caption\n\\usepackage{caption}\n\\captionsetup[figure]{labelformat=empty}\n\n% font family\n\\usepackage{helvet}\n\\renewcommand{\\kanjifamilydefault}{\\gtdefault} % for japanese\n\n\n% theme\n\\usetheme{Madrid}\n\\usefonttheme{professionalfonts}\n\\useoutertheme[height=0cm,width=1.5cm,left]{sidebar}\n\n\n% frame number\n\\setbeamertemplate{frametitle}{\n    \\nointerlineskip\n    \\begin{beamercolorbox}[wd=\\paperwidth,ht=2.25ex,dp=0.75ex]{frametitle} % set ht\n        \\hspace*{1ex}\\insertframetitle\n        \\hfill\\insertframenumber/\\inserttotalframenumber\\hspace*{8ex}\n        % \\hfill\\insertframenumber/{set total framenumber manually}\\hspace*{8ex}\n    \\end{beamercolorbox}\n}\n\n\n% hides nvigation buttons at bottom\n\\setbeamertemplate{navigation symbols}{}\n\n\n% Remove title and name from sidebar\n\\makeatletter\n\\setbeamertemplate{sidebar \\beamer@sidebarside}%{sidebar theme}\n{\n    \\beamer@tempdim=\\beamer@sidebarwidth%\n    \\advance\\beamer@tempdim by 10pt%\n    \\insertverticalnavigation{\\beamer@sidebarwidth}%\n    \\vfill\n    \\ifx\\beamer@sidebarside\\beamer@lefttext%\n    \\else%\n    \\usebeamercolor{normal text}%\n    \\llap{\\usebeamertemplate***{navigation symbols}\\hskip0.1cm}%\n    \\vskip5pt%\n    \\fi%\n}%\n\\makeatother\n\n\n% show toc at the beginning of each section\n\\AtBeginSection[]\n{\n    \\begin{frame}\n        \\frametitle{Table of Contents}\n        \\tableofcontents[currentsection]\n    \\end{frame}\n}\n\n\n% display transparently\n\\setbeamercovered{transparent}\n\n\n% table style\n% This sets the thickness of the borders of the table.\n\\setlength{\\arrayrulewidth}{0.5mm}\n% The space between the text and the left/right border of its containing cell\n\\setlength{\\tabcolsep}{18pt}\n% The height of each row is set to 1.5 relative to its default height.\n\\renewcommand{\\arraystretch}{2.5}\n\n\n\n% define colors\n% ---------------------------------------------------------------------------- %\n\\definecolor{red}{rgb}{0.9,0.30,0.30}\n\\definecolor{blue}{rgb}{0.32,0.66,0.82}\n\\definecolor{darkblue}{rgb}{0.2,0.4,0.6}\n\\definecolor{green}{rgb}{0.47,0.72,0.29}\n\\definecolor{darkgreen}{rgb}{0.25,0.42,0.21}\n\\definecolor{yellow}{rgb}{0.95,0.85,0.25}\n\\definecolor{darkyellow}{rgb}{0.75,0.65,0.05}\n\\definecolor{orange}{rgb}{0.95,0.55,0.25}\n\\definecolor{darkorange}{rgb}{0.75,0.35,0.05}\n\\definecolor{purple}{rgb}{0.75,0.55,0.85}\n\\definecolor{darkpurple}{rgb}{0.55,0.35,0.65}\n\\definecolor{brown}{rgb}{0.75,0.55,0.25}\n\\definecolor{darkbrown}{rgb}{0.55,0.35,0.05}\n\\definecolor{pink}{rgb}{0.95,0.55,0.75}\n\\definecolor{darkpink}{rgb}{0.75,0.35,0.55}\n\\definecolor{grey}{rgb}{0.55,0.55,0.55}\n\\definecolor{darkgrey}{rgb}{0.35,0.35,0.35}\n% ---------------------------------------------------------------------------- %\n\n\n% set colors\n% ---------------------------------------------------------------------------- %\n\\setbeamercolor{structure}{fg=blue}\n\\setbeamertemplate{blocks}[rounded][shadow=false]\n\\setbeamercolor{block title alerted}{bg=red, fg=white}\n\\setbeamercolor{block title example}{bg=green, fg=white}\n\n\n% define blocks\n% ---------------------------------------------------------------------------- %\n\\addtobeamertemplate{theorem begin}{\n    \\setbeamercolor{block title}{bg=darkblue, fg=white}\n}{}\n\\addtobeamertemplate{proof begin}{\n    \\setbeamercolor{block title}{bg=grey, fg=white}\n}{}\n\n\\newenvironment&lt;&gt;{note}[1]{\n    \\setbeamercolor{block title}{bg=blue, fg=white}\n    \\begin{block}{Note}#1}{\\end{block}}\n\\newenvironment&lt;&gt;{warning}[1]{\n    \\setbeamercolor{block title}{bg=red}\n    \\begin{block}{Warning}#1}{\\end{block}}\n\\newenvironment&lt;&gt;{important}[1]{\n    \\setbeamercolor{block title}{bg=orange}\n    \\begin{block}{Important}#1}{\\end{block}}\n\n\\newenvironment&lt;&gt;{definition}[1]{\n    \\setbeamercolor{block title}{bg=grey}\n    \\begin{block}{Definition}#1}{\\end{block}}\n\\newenvironment&lt;&gt;{proposition}[1]{\n    \\setbeamercolor{block title}{bg=darkblue}\n    \\begin{block}{Proposition}#1}{\\end{block}}\n\\newenvironment&lt;&gt;{lemma}[1]{\n    \\setbeamercolor{block title}{bg=darkblue}\n    \\begin{block}{Lemma}#1}{\\end{block}}\n\\newenvironment&lt;&gt;{corollary}[1]{\n    \\setbeamercolor{block title}{bg=darkblue}\n    \\begin{block}{Corollary}#1}{\\end{block}}\n\\newenvironment&lt;&gt;{remark}[1]{\n    \\setbeamercolor{block title}{bg=blue}\n    \\begin{block}{Remark}#1}{\\end{block}}\n% ---------------------------------------------------------------------------- %\n</code></pre>"},{"location":"pages/latex/beamer/#maintex","title":"<code>main.tex</code>","text":"<pre><code>\\documentclass[10pt,aspectratio=169]{beamer}\n\n\\input{beamer-preamble.tex}\n\\input{preamble.tex}\n\n\n\\title{Title}\n%\\subtitle{Subtitle}\n\n\\author{Qwerty Qwerty\\inst{1} \\and Asdf Asdf\\inst{2}}\n\\institute{\\inst{1} Dept.\\ of Physics, The University of Qwerty \\quad \\inst{2} Dept.\\ of Physics, The University of Asdf}\n\n\\date{\\today}\n%\\logo{\\includegraphics[width=2cm]{logo.png}}\n\n\\begin{document}\n\n\\frame{\\titlepage}\n\\begin{frame}{Table of Contents}\n    \\tableofcontents\n\\end{frame}\n\n\n\\section{abcd}\n\n\\begin{frame}{Motivation}\n    \\begin{itemize}\n        \\item a\n        \\item b\n    \\end{itemize}\n\\end{frame}\n\n\n\\begin{frame}\n    \\begin{columns}\n        \\column{0.5\\textwidth}\n            This is a first column. This is a first column. This is a first column. This is a first column. This is a first column. This is a first column. This is a first column.\n        \\column{0.5\\textwidth}\n            This is a second column. This is a second column. This is a second column. This is a second column. This is a second column. This is a second column.\n    \\end{columns}\n\\end{frame}\n\n\n\\section{efgh}\n\n\\begin{frame}\n    \\begin{theorem}\n        $$ a^2 + b^2 = c^2 $$\n    \\end{theorem}\n\n    \\begin{proof}&lt;2&gt;\n        asdf asdf asdf.\n    \\end{proof}\n\n\\end{frame}\n\n\n\\begin{frame}\n    \\begin{warning}\n        asdf asdf asdf.\n    \\end{warning}\n\n    \\begin{example}\n        asdf asdf asdf.\n    \\end{example}\n\n    \\begin{important}\n        asdf asdf asdf.\n    \\end{important}\n\n    \\begin{remark}\n        asdf asdf asdf.\n    \\end{remark}\n\\end{frame}\n\n\n\\begin{frame}{Reference}\n    \\scriptsize\n    \\beamertemplatetextbibitems\n    \\bibliographystyle{abbrv}\n    \\bibliography{ref}\n\\end{frame}\n\n\\end{document}\n</code></pre>"},{"location":"pages/latex/newcommands/","title":"newcommands","text":"<p>The following is a list of my favorite <code>\\newcommands</code>. You can use them regardless of the document class (maybe?). Add them to your preamble if you find them useful.</p>"},{"location":"pages/latex/newcommands/#preambletex","title":"<code>preamble.tex</code>","text":"<pre><code>%% Latin abbreviations\n% ---------------------------------------------------------------------------- %\n\\newcommand{\\etal}{\\textit{et al. }}\n\\newcommand{\\eg}{\\textit{e.g. }}\n\\newcommand{\\cf}{\\textit{c.f. }}\n\\newcommand{\\ie}{\\textit{i.e. }}\n\\newcommand{\\etc}{\\textit{etc. }}\n% ---------------------------------------------------------------------------- %\n\n%% math\n% ---------------------------------------------------------------------------- %\n% mathbb\n\\newcommand{\\bbA}{\\mathbb{A}}\n\\newcommand{\\bbB}{\\mathbb{B}}\n\\newcommand{\\bbC}{\\mathbb{C}}\n\\newcommand{\\bbD}{\\mathbb{D}}\n\\newcommand{\\bbE}{\\mathbb{E}}\n\\newcommand{\\bbF}{\\mathbb{F}}\n\\newcommand{\\bbG}{\\mathbb{G}}\n\\newcommand{\\bbH}{\\mathbb{H}}\n\\newcommand{\\bbI}{\\mathbb{I}}\n\\newcommand{\\bbJ}{\\mathbb{J}}\n\\newcommand{\\bbK}{\\mathbb{K}}\n\\newcommand{\\bbL}{\\mathbb{L}}\n\\newcommand{\\bbM}{\\mathbb{M}}\n\\newcommand{\\bbN}{\\mathbb{N}}\n\\newcommand{\\bbO}{\\mathbb{O}}\n\\newcommand{\\bbP}{\\mathbb{P}}\n\\newcommand{\\bbQ}{\\mathbb{Q}}\n\\newcommand{\\bbR}{\\mathbb{R}}\n\\newcommand{\\bbS}{\\mathbb{S}}\n\\newcommand{\\bbT}{\\mathbb{T}}\n\\newcommand{\\bbU}{\\mathbb{U}}\n\\newcommand{\\bbV}{\\mathbb{V}}\n\\newcommand{\\bbW}{\\mathbb{W}}\n\\newcommand{\\bbX}{\\mathbb{X}}\n\\newcommand{\\bbY}{\\mathbb{Y}}\n\\newcommand{\\bbZ}{\\mathbb{Z}}\n\n% \\mathrm capital letters\n\\newcommand{\\rmA}{\\mathrm{A}}\n\\newcommand{\\rmB}{\\mathrm{B}}\n\\newcommand{\\rmC}{\\mathrm{C}}\n\\newcommand{\\rmD}{\\mathrm{D}}\n\\newcommand{\\rmE}{\\mathrm{E}}\n\\newcommand{\\rmF}{\\mathrm{F}}\n\\newcommand{\\rmG}{\\mathrm{G}}\n\\newcommand{\\rmH}{\\mathrm{H}}\n\\newcommand{\\rmI}{\\mathrm{I}}\n\\newcommand{\\rmJ}{\\mathrm{J}}\n\\newcommand{\\rmK}{\\mathrm{K}}\n\\newcommand{\\rmL}{\\mathrm{L}}\n\\newcommand{\\rmM}{\\mathrm{M}}\n\\newcommand{\\rmN}{\\mathrm{N}}\n\\newcommand{\\rmO}{\\mathrm{O}}\n\\newcommand{\\rmP}{\\mathrm{P}}\n\\newcommand{\\rmQ}{\\mathrm{Q}}\n\\newcommand{\\rmR}{\\mathrm{R}}\n\\newcommand{\\rmS}{\\mathrm{S}}\n\\newcommand{\\rmT}{\\mathrm{T}}\n\\newcommand{\\rmU}{\\mathrm{U}}\n\\newcommand{\\rmV}{\\mathrm{V}}\n\\newcommand{\\rmW}{\\mathrm{W}}\n\\newcommand{\\rmX}{\\mathrm{X}}\n\\newcommand{\\rmY}{\\mathrm{Y}}\n\\newcommand{\\rmZ}{\\mathrm{Z}}\n\n% \\mathcal capital letters\n\\newcommand{\\calA}{\\mathcal{A}}\n\\newcommand{\\calB}{\\mathcal{B}}\n\\newcommand{\\calC}{\\mathcal{C}}\n\\newcommand{\\calD}{\\mathcal{D}}\n\\newcommand{\\calE}{\\mathcal{E}}\n\\newcommand{\\calF}{\\mathcal{F}}\n\\newcommand{\\calG}{\\mathcal{G}}\n\\newcommand{\\calH}{\\mathcal{H}}\n\\newcommand{\\calI}{\\mathcal{I}}\n\\newcommand{\\calJ}{\\mathcal{J}}\n\\newcommand{\\calK}{\\mathcal{K}}\n\\newcommand{\\calL}{\\mathcal{L}}\n\\newcommand{\\calM}{\\mathcal{M}}\n\\newcommand{\\calN}{\\mathcal{N}}\n\\newcommand{\\calO}{\\mathcal{O}}\n\\newcommand{\\calP}{\\mathcal{P}}\n\\newcommand{\\calQ}{\\mathcal{Q}}\n\\newcommand{\\calR}{\\mathcal{R}}\n\\newcommand{\\calS}{\\mathcal{S}}\n\\newcommand{\\calT}{\\mathcal{T}}\n\\newcommand{\\calU}{\\mathcal{U}}\n\\newcommand{\\calV}{\\mathcal{V}}\n\\newcommand{\\calW}{\\mathcal{W}}\n\\newcommand{\\calX}{\\mathcal{X}}\n\\newcommand{\\calY}{\\mathcal{Y}}\n\\newcommand{\\calZ}{\\mathcal{Z}}\n\n% multiplicative group\n\\newcommand{\\Zx}{\\Z^\\times}\n\\newcommand{\\Qx}{\\Q^\\times}\n\\newcommand{\\Rx}{\\R^\\times}\n\\newcommand{\\Cx}{\\C^\\times}\n\n% non-negative\n\\newcommand{\\Znn}{\\Z_{\\ge0}}\n\\newcommand{\\Qnn}{\\Q_{\\ge0}}\n\\newcommand{\\Rnn}{\\R_{\\ge0}}\n\n% positive\n\\newcommand{\\Zpo}{\\Z_{&gt;0}}\n\\newcommand{\\Qpo}{\\Q_{&gt;0}}\n\\newcommand{\\Rpo}{\\R_{&gt;0}}\n\n% mathrm\n\\newcommand{\\const}{\\mathrm{const}}\n\\newcommand{\\hc}{\\mathrm{h.c.}}\n\\newcommand{\\lhs}{\\mathrm{(LHS)}}\n\\newcommand{\\rhs}{\\mathrm{(RHS)}}\n\n% MathOperator\n\\DeclareMathOperator*{\\argmin}{arg~min}\n\\DeclareMathOperator*{\\argmax}{arg~max}\n\\DeclareMathOperator{\\sgn}{sgn}\n\\DeclareMathOperator{\\sign}{sign}\n\\DeclareMathOperator{\\Supp}{Supp}\n\\DeclareMathOperator{\\diag}{diag}\n\\DeclareMathOperator{\\E}{E}\n\\DeclareMathOperator{\\Var}{Var}\n\\DeclareMathOperator{\\Cov}{Cov}\n\\DeclareMathOperator{\\Hom}{Hom}\n\\DeclareMathOperator{\\Aut}{Aut}\n\\DeclareMathOperator{\\End}{End}\n\n% others\n\\newcommand{\\combi}[2]{{}_{#1}\\text{C}_{#2}}\n\\newcommand{\\dg}{^\\dagger}\n\\newcommand{\\T}{^\\mathsf{T}}\n\\newcommand{\\fa}{{}^\\forall}\n\\newcommand{\\ex}{{}^\\exists}\n\\newcommand{\\pd}{\\partial}\n% ---------------------------------------------------------------------------- %\n</code></pre>"},{"location":"pages/latex/revtex4-2/","title":"revtex4-2","text":""},{"location":"pages/latex/revtex4-2/#preambletex","title":"<code>preamble.tex</code>","text":"<pre><code>% set margins\n\\usepackage[top=15truemm,bottom=15truemm,left=15truemm,right=15truemm]{geometry}\n\\usepackage[dvipdfmx]{graphicx,hyperref,xcolor}\n% math\n\\usepackage{amsmath,amsthm,amssymb,mathtools,mathrsfs}\n% physics\n\\usepackage{physics}\n% itembox\n\\usepackage{ascmac}\n% algorithm\n\\usepackage{algorithm,algorithmic}\n% vector graphics\n\\usepackage{tikz}\n% comment\n\\usepackage{comment}\n% image position\n\\usepackage{here}\n% Align table columns on decimal point\n\\usepackage{dcolumn}\n\n\n% style setting\n% ---------------------------------------------------------------------------- %\n\\allowdisplaybreaks[1]\n\\renewcommand{\\baselinestretch}{1}\n\\renewcommand{\\abstractname}{\\vspace{-\\baselineskip}}\n% ---------------------------------------------------------------------------- %\n\n\n% number figures, tables and equations within the sections\n% ---------------------------------------------------------------------------- %\n\\numberwithin{equation}{section}\n\\numberwithin{figure}{section}\n\\numberwithin{table}{section}\n% ---------------------------------------------------------------------------- %\n\n\n% Logic and proofs\n% ---------------------------------------------------------------------------- %\n\\newtheorem{theorem}{Theorem}[section]\n\\newtheorem{corollary}{Corollary}[theorem]\n\\newtheorem{lemma}[theorem]{Lemma}\n\\newtheorem{proposition}[theorem]{Proposition}\n\n\\theoremstyle{definition}\n\\newtheorem{definition}{Definition}[section]\n\\newtheorem{example}{Example}[section]\n\\newtheorem{exercise}{Exercise}[section]\n\n\\theoremstyle{remark}\n\\newtheorem{remark}{Remark}[section]\n% ---------------------------------------------------------------------------- %\n</code></pre>"},{"location":"pages/latex/revtex4-2/#maintex","title":"<code>main.tex</code>","text":"<pre><code>\\documentclass[dvipdfmx,twocolumn,preprintnumbers,superscriptaddress,nofootinbib]{revtex4-2}\n% landscape\n% footinbib for PRL\n\n\\input{preamble}\n\\allowdisplaybreaks[1]\n\n\\begin{document}\n\n\n\\title{Asdf of asdf for asdf}\n\n\\author{Qwerty Qwerty}\n    \\email[]{qwerty(at)asdf.asdf.ac.jp}\n    \\affiliation{\n    Dept.\\ of Physics, The University of Qwerty, address\n    }\n\n    \\author{Asdf Asdf}\n    \\email[]{asdf(at)asdf.asdf.ac.jp}\n    \\affiliation{\n    Dept.\\ of Physics, The University of Asdf, address\n    }\n\n\\date{\\today}\n\n\\begin{abstract}\n    abstract.\n\\end{abstract}\n\n\\maketitle\n\n\n\\section{Introduction}\nasdf asdf asdf asdf asdf asdf\n\n\\end{document}\n</code></pre>"},{"location":"pages/latex/settings/","title":"Latex settings in VScode","text":""},{"location":"pages/latex/settings/#install-texlive-on-macos","title":"Install TexLive on macOS","text":"<p>Download <code>install-tl-unx.tar.gz</code> <pre><code>$ curl -OL http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz\n</code></pre></p> <p>Open <code>install-tl-unx.tar.gz</code> <pre><code>$ tar xvf install-tl-unx.tar.gz\n</code></pre></p> <p>Change directory to the installer: <pre><code>$ cd install-tl-2*\n</code></pre></p> <p>Install TexLive <pre><code>$ sudo ./install-tl -no-gui -repository http://mirror.ctan.org/systems/texlive/tlnet/\n</code></pre></p> <p>To start installation, type <code>I</code> and enter. <pre><code>Actions:\n &lt;I&gt; start installation to hard disk\n &lt;H&gt; help\n &lt;Q&gt; quit\nEnter command: I\n</code></pre></p> <p>Add a symbolic link to <code>/usr/local/bin</code> <pre><code>$ sudo /usr/local/texlive/????/bin/*/tlmgr path add\n</code></pre></p>"},{"location":"pages/latex/settings/#setting-in-vscode","title":"Setting in VScode","text":"<ol> <li> <p>Install <code>LaTeX Workshop</code> extension.</p> </li> <li> <p>Open <code>settings.json</code> in VScode.     In macOS, you can open it by typing the following command in the terminal.     <pre><code>code ~/Library/Application\\ Support/Code/User/settings.json\n</code></pre></p> </li> <li>Add the following code to <code>settings.json</code>. You have two recipes, <code>ptex2pdf*3</code> and <code>ptex2pdf -&gt; pbibtex -&gt; ptex2pdf*2</code>. The former is to compile <code>.tex</code> files without <code>.bib</code>, and the latter is for <code>.tex</code> files with <code>.bib</code>. Please refer to this page for more details.     <pre><code>{\n    // latex\n    \"latex-workshop.latex.tools\": [\n        {\n            \"name\":\"ptex2pdf\",\n            \"command\": \"ptex2pdf\",\n            \"args\": [\n                \"-l\",\n                \"-ot\",\n                \"-interaction=nonstopmode\",\n                // kanji for Japanese\n                \"-kanji=utf8 -synctex=1\",\n                \"%DOC%\"\n            ]\n        },\n        {\n            \"name\": \"pbibtex\",\n            \"command\": \"pbibtex\",\n            \"args\": [\n                \"-kanji=utf8\",\n                \"%DOCFILE%\"\n            ]\n        }\n    ],\n    \"latex-workshop.latex.recipes\": [\n        {\n            \"name\": \"ptex2pdf*3\",\n            \"tools\":[\n                \"ptex2pdf\",\n                \"ptex2pdf\",\n                \"ptex2pdf\",\n            ]\n        },\n        {\n            \"name\": \"ptex2pdf -&gt; pbibtex -&gt; ptex2pdf*3\",\n            \"tools\":[\n                \"ptex2pdf\",\n                \"pbibtex\",\n                \"ptex2pdf\",\n                \"ptex2pdf\",\n            ]\n        },\n    ],\n    \"latex-workshop.latex.clean.fileTypes\":\n    [\n        \"*.bbl\", \"*.blg\", \"*.idx\", \"*.ind\", \"*.lof\", \"*.lot\", \"*.out\", \"*.toc\", \"*.acn\", \"*.acr\", \"*.alg\",\n        \"*.glg\", \"*.glo\", \"*.gls\", \"*.ist\", \"*.fls\", \"*.log\", \"*.fdb_latexmk\", \"*.synctex.gz\",\n        \"_minted*\", \"*.nav\", \"*.snm\", \"*.vrb\",\n    ],\n    \"latex-workshop.latex.autoClean.run\": \"onBuilt\",\n    \"latex-workshop.latex.autoBuild.run\": \"onFileChange\",\n    \"latex-workshop.synctex.afterBuild.enabled\": true,\n    \"latex-workshop.view.pdf.viewer\": \"tab\",\n}\n</code></pre></li> </ol>"},{"location":"pages/latex/settings/#lets-compile-your-latex-file","title":"Let's compile your \\(\\LaTeX\\) file!","text":"<p>Let's make a test latex directory. Please download <code>article-template</code> from here. Then, open the directory in VScode. You can edit <code>intro.tex</code> and compile it by <code>cmd + S</code> (Mac). Finally, you will get the modified <code>main.pdf</code> in the same directory.</p> <p>The directory structure is as follows: <pre><code>article-template\n|-- img/\n|-- preamble.tex\n|-- main.tex\n|-- main.pdf\n|-- ref.bib\n`-- sections/\n    |-- intro.tex\n    |-- method.tex\n    ...\n    `-- appendix.tex\n</code></pre></p> <p>You can divide your <code>main.tex</code> into several files as above and include them in <code>main.tex</code> as follows: <pre><code>\\begin{document}\n\\maketitle\n...\n\n\\input{sections/intro.tex}\n\\input{sections/method.tex}\n...\n\\newpage\n\\bibliographystyle{abbrv}\n\\bibliography{ref}\n\\newpage\n\\input{sections/appendix.tex}\n\n\\end{document}\n</code></pre></p>"},{"location":"pages/mkdocs/","title":"Material for MkDocs","text":""},{"location":"pages/mkdocs/admonitions/","title":"Admonitions","text":""},{"location":"pages/mkdocs/admonitions/#default-admonitions","title":"Default Admonitions","text":"<p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Abstract</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Info</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Tip</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Success</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Question</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Warning</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Failure</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Danger</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Bug</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Example</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Quote</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"pages/mkdocs/admonitions/#admonitions-extended","title":"Admonitions extended","text":"<p>Custom Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Custom Note <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> Custom Note <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"pages/mkdocs/admonitions/#custom-admonitions","title":"Custom Admonitions","text":"<p>Comment</p> <p>This is a custom admonition. It is not rendered by default. You can use it to add notes to yourself or other authors.</p> <pre><code>:root {\n  --md-admonition-icon--comment: url('data:image/svg+xml;charset=utf-8,&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"&gt;&lt;!--! Font Awesome Free 6.4.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2023 Fonticons, Inc.--&gt;&lt;path d=\"M512 240c0 114.9-114.6 208-256 208-37.1 0-72.3-6.4-104.1-17.9-11.9 8.7-31.3 20.6-54.3 30.6C73.6 471.1 44.7 480 16 480c-6.5 0-12.3-3.9-14.8-9.9s-1.1-12.8 3.4-17.4l.3-.3c.3-.3.7-.7 1.3-1.4 1.1-1.2 2.8-3.1 4.9-5.7 4.1-5 9.6-12.4 15.2-21.6 10-16.6 19.5-38.4 21.4-62.9C17.7 326.8 0 285.1 0 240 0 125.1 114.6 32 256 32s256 93.1 256 208z\"/&gt;&lt;/svg&gt;')\n}\n/* comment */\n.md-typeset .admonition.comment,\n.md-typeset details.comment {\n  border-color: rgb(43, 155, 70);\n}\n.md-typeset .comment &gt; .admonition-title,\n.md-typeset .comment &gt; summary {\n  background-color: rgba(43, 155, 70, 0.1);\n}\n.md-typeset .comment &gt; .admonition-title::before,\n.md-typeset .comment &gt; summary::before {\n  background-color: rgb(43, 155, 70);\n  -webkit-mask-image: var(--md-admonition-icon--comment);\n          mask-image: var(--md-admonition-icon--comment);\n}\n</code></pre> <p>Note</p> <p>You can choose an icon from here</p>"},{"location":"pages/mkdocs/mathjax/","title":"MathJax settings in MkDocs","text":"<p>To use  <code>physics</code> package in MkDocs, add the following in <code>docs/javascripts/mathajx.js</code>.</p> <ul> <li><code>loader: { load: ['[tex]/physics'] },</code></li> <li><code>packages: { '[+]': ['physics'] },</code></li> </ul> <p>You can see the physics package examples here.</p> <p>Example</p> <pre><code>window.MathJax = {\n  loader: { load: ['[tex]/physics'] },\n  svg: {\n    fontCache: 'global'\n  },\n  options: {\n    ignoreHtmlClass: \".*|\",\n    processHtmlClass: \"arithmatex\"\n  },\n  tex: {\n    inlineMath: [['$', '$'], ['\\\\(', '\\\\)']],\n    displayMath: [['$$', '$$'], ['\\\\[', '\\\\]']],\n    processEscapes: true,\n    processEnvironments: true,\n    tags: 'ams',\n    packages: { '[+]': ['physics'] },\n    macros: {\n      bbA: \"\\\\mathbb{A}\",\n      bbB: \"\\\\mathbb{B}\",\n    }\n  }\n};\n\ndocument$.subscribe(() =&gt; {\n  MathJax.typesetPromise()\n})\n</code></pre>"},{"location":"pages/mkdocs/proof/","title":"Math Admonitions","text":""},{"location":"pages/mkdocs/proof/#examples","title":"Examples","text":"<p>Definition</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Axiom</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Assumption</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Criterion</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Theorem</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Proposition</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Corollary</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lemma</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Conjecture</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Proof</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Remark</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Property</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"pages/mkdocs/proof/#css","title":"CSS","text":"<p>Add the following CSS to your <code>docs/stylesheets/extra.css</code>.</p> <pre><code>/* admonitions like sphinx-proof */\n:root {\n  --note-title-color: rgba(68,138,255,.1);\n  --note-border-color: #007bff;\n  --warning-title-color: rgba(220,53,69,.1);\n  --warning-border-color: #dc3545;\n  --hint-title-color: rgba(255,193,7,.2);\n  --hint-border-color: #ffc107;\n  --caution-title-color: rgba(253,126,20,.12);\n  --caution-border-color: #fd7e14;\n  --success-title-color: rgba(40,167,69,.1);\n  --success-border-color: #28a745;\n  --grey-title-color: rgba(204,204,204,.2);\n  --grey-border-color: #ccc;\n}\n\n.md-typeset .admonition.definition,\n.md-typeset details.definition {\n  border-color: var(--grey-border-color);\n  background-color: var(--grey-title-color);\n}\n.md-typeset .definition &gt; .admonition-title,\n.md-typeset .definition &gt; summary {\n  padding-left: .6rem;\n  background-color: var(--grey-title-color);\n}\n.md-typeset .definition &gt; .admonition-title::before,\n.md-typeset .definition &gt; summary::before {\n  background-color:  rgba(0, 0, 0, 0);\n  -webkit-mask-image: none;\n          mask-image: none;\n}\n\n.md-typeset .admonition.axiom,\n.md-typeset details.axiom {\n  border-color: var(--warning-border-color);\n  background-color: var(--warning-title-color);\n}\n.md-typeset .axiom &gt; .admonition-title,\n.md-typeset .axiom &gt; summary {\n  padding-left: .6rem;\n  background-color: var(--warning-title-color);\n}\n.md-typeset .axiom &gt; .admonition-title::before,\n.md-typeset .axiom &gt; summary::before {\n  background-color:  rgba(0, 0, 0, 0);\n  -webkit-mask-image: none;\n          mask-image: none;\n}\n\n.md-typeset .admonition.assumption,\n.md-typeset details.assumption {\n  border-color: var(--hint-border-color);\n  background-color: var(--hint-title-color);\n}\n.md-typeset .assumption &gt; .admonition-title,\n.md-typeset .assumption &gt; summary {\n  padding-left: .6rem;\n  background-color: var(--hint-title-color);\n}\n.md-typeset .assumption &gt; .admonition-title::before,\n.md-typeset .assumption &gt; summary::before {\n  background-color:  rgba(0, 0, 0, 0);\n  -webkit-mask-image: none;\n          mask-image: none;\n}\n\n.md-typeset .admonition.criterion,\n.md-typeset details.criterion {\n  border-color: var(--caution-border-color);\n  background-color: var(--caution-title-color);\n}\n.md-typeset .criterion &gt; .admonition-title,\n.md-typeset .criterion &gt; summary {\n  padding-left: .6rem;\n  background-color: var(--caution-title-color);\n}\n.md-typeset .criterion &gt; .admonition-title::before,\n.md-typeset .criterion &gt; summary::before {\n  background-color:  rgba(0, 0, 0, 0);\n  -webkit-mask-image: none;\n          mask-image: none;\n}\n\n.md-typeset .admonition.theorem,\n.md-typeset details.theorem {\n  border-color: var(--note-border-color);\n  background-color: var(--note-title-color);\n}\n.md-typeset .theorem &gt; .admonition-title,\n.md-typeset .theorem &gt; summary {\n  padding-left: .6rem;\n  background-color: var(--note-title-color);\n}\n.md-typeset .theorem &gt; .admonition-title::before,\n.md-typeset .theorem &gt; summary::before {\n  background-color:  rgba(0, 0, 0, 0);\n  -webkit-mask-image: none;\n          mask-image: none;\n}\n\n.md-typeset .admonition.proposition,\n.md-typeset details.proposition {\n  border-color: var(--note-border-color);\n  background-color: var(--note-title-color);\n}\n.md-typeset .proposition &gt; .admonition-title,\n.md-typeset .proposition &gt; summary {\n  padding-left: .6rem;\n  background-color: var(--note-title-color);\n}\n.md-typeset .proposition &gt; .admonition-title::before,\n.md-typeset .proposition &gt; summary::before {\n  background-color:  rgba(0, 0, 0, 0);\n  -webkit-mask-image: none;\n          mask-image: none;\n}\n\n.md-typeset .admonition.conjecture,\n.md-typeset details.conjecture {\n  border-color: var(--hint-border-color);\n  background-color: var(--hint-title-color);\n}\n.md-typeset .conjecture &gt; .admonition-title,\n.md-typeset .conjecture &gt; summary {\n  padding-left: .6rem;\n  background-color: var(--hint-title-color);\n}\n.md-typeset .conjecture &gt; .admonition-title::before,\n.md-typeset .conjecture &gt; summary::before {\n  background-color:  rgba(0, 0, 0, 0);\n  -webkit-mask-image: none;\n          mask-image: none;\n}\n\n.md-typeset .admonition.proof,\n.md-typeset details.proof {\n  border-color: var(--grey-border-color);\n  background-color: var(--grey-title-color);\n}\n.md-typeset .proof &gt; .admonition-title,\n.md-typeset .proof &gt; summary {\n  padding-left: .6rem;\n  background-color: var(--grey-title-color);\n}\n.md-typeset .proof &gt; .admonition-title::before,\n.md-typeset .proof &gt; summary::before {\n  background-color:  rgba(0, 0, 0, 0);\n  -webkit-mask-image: none;\n          mask-image: none;\n}\n\n.md-typeset .admonition.remark,\n.md-typeset details.remark {\n  border-color: var(--success-border-color);\n  background-color: var(--success-title-color);\n}\n.md-typeset .remark &gt; .admonition-title,\n.md-typeset .remark &gt; summary {\n  padding-left: .6rem;\n  background-color: var(--success-title-color);\n}\n.md-typeset .remark &gt; .admonition-title::before,\n.md-typeset .remark &gt; summary::before {\n  background-color:  rgba(0, 0, 0, 0);\n  -webkit-mask-image: none;\n          mask-image: none;\n}\n\n.md-typeset .admonition.corollary,\n.md-typeset details.corollary {\n  border-color: var(--caution-border-color);\n  background-color: var(--caution-title-color);\n}\n.md-typeset .corollary &gt; .admonition-title,\n.md-typeset .corollary &gt; summary {\n  padding-left: .6rem;\n  background-color: var(--caution-title-color);\n}\n.md-typeset .corollary &gt; .admonition-title::before,\n.md-typeset .corollary &gt; summary::before {\n  background-color:  rgba(0, 0, 0, 0);\n  -webkit-mask-image: none;\n          mask-image: none;\n}\n\n.md-typeset .admonition.lemma,\n.md-typeset details.lemma {\n  border-color: var(--hint-border-color);\n  background-color: var(--hint-title-color);\n}\n.md-typeset .lemma &gt; .admonition-title,\n.md-typeset .lemma &gt; summary {\n  padding-left: .6rem;\n  background-color: var(--hint-title-color);\n}\n.md-typeset .lemma &gt; .admonition-title::before,\n.md-typeset .lemma &gt; summary::before {\n  background-color:  rgba(0, 0, 0, 0);\n  -webkit-mask-image: none;\n          mask-image: none;\n}\n\n.md-typeset .admonition.property,\n.md-typeset details.property {\n  border-color: var(--caution-border-color);\n  background-color: var(--caution-title-color);\n}\n.md-typeset .property &gt; .admonition-title,\n.md-typeset .property &gt; summary {\n  padding-left: .6rem;\n  background-color: var(--caution-title-color);\n}\n.md-typeset .property &gt; .admonition-title::before,\n.md-typeset .property &gt; summary::before {\n  background-color:  rgba(0, 0, 0, 0);\n  -webkit-mask-image: none;\n          mask-image: none;\n}\n</code></pre>"},{"location":"pages/others/asdf/","title":"Badges, Buttons &amp; Icons<code>rocket</code>","text":"<pre><code>:avatar: ../../mylogo.png\n:avatar-link: https://executablebooks.org/\n:avatar-outline: muted\n:author: Executable Books\n:date: \"{sub-ref}`today`\"\n:read-time: 5 min read\n:class-container: sd-p-2 sd-outline-muted sd-rounded-1\n</code></pre> <p>(badges)=</p>"},{"location":"pages/others/asdf/#badges","title":"Badges","text":"<p>Inline badges can be used as a labelling component. Badges are available in each semantic color, with filled and outline variants:</p> <ul> <li>{bdg}<code>plain badge</code></li> <li>{bdg-primary}<code>primary</code>, {bdg-primary-line}<code>primary-line</code></li> <li>{bdg-secondary}<code>secondary</code>, {bdg-secondary-line}<code>secondary-line</code></li> <li>{bdg-success}<code>success</code>, {bdg-success-line}<code>success-line</code></li> <li>{bdg-info}<code>info</code>, {bdg-info-line}<code>info-line</code></li> <li>{bdg-warning}<code>warning</code>, {bdg-warning-line}<code>warning-line</code></li> <li>{bdg-danger}<code>danger</code>, {bdg-danger-line}<code>danger-line</code></li> <li>{bdg-light}<code>light</code>, {bdg-light-line}<code>light-line</code></li> <li>{bdg-dark}<code>dark</code>, {bdg-dark-line}<code>dark-line</code></li> </ul> <p>````{dropdown} Syntax :icon: code :color: light</p> <p><pre><code>- {bdg}`plain badge`\n- {bdg-primary}`primary`, {bdg-primary-line}`primary-line`\n- {bdg-secondary}`secondary`, {bdg-secondary-line}`secondary-line`\n- {bdg-success}`success`, {bdg-success-line}`success-line`\n- {bdg-info}`info`, {bdg-info-line}`info-line`\n- {bdg-warning}`warning`, {bdg-warning-line}`warning-line`\n- {bdg-danger}`danger`, {bdg-danger-line}`danger-line`\n- {bdg-light}`light`, {bdg-light-line}`light-line`\n- {bdg-dark}`dark`, {bdg-dark-line}`dark-line`\n</code></pre> <pre><code>`bdg-link-` and `bdg-ref-` variants are also available for use with links and references.\nThe syntax is the same as for the `ref` role.\n\n{bdg-link-primary}`https://example.com`\n\n{bdg-link-primary-line}`explicit title &lt;https://example.com&gt;`\n\n{bdg-ref-primary}`badges`\n\n`````{dropdown} Syntax\n:icon: code\n:color: light\n\n````{tab-set-code}\n```{literalinclude} ./snippets/myst/badge-link.txt\n:language: markdown\n```\n```{literalinclude} ./snippets/rst/badge-link.txt\n:language: rst\n```\n</code></pre> <pre><code>See [Bootstrap badges](https://getbootstrap.com/docs/5.0/components/badge/) for more information, and related [Material Design chips](https://material.io/components/chip).\n\n(buttons)=\n\n## Buttons\n\nButtons allow users to navigate to external (`button-link`) / internal (`button-ref`) links with a single tap.\n\n```{button-link} https://example.com\n```\n\n```{button-link} https://example.com\nButton text\n```\n\n```{button-link} https://example.com\n:color: primary\n:shadow:\n```\n\n```{button-link} https://example.com\n:color: primary\n:outline:\n```\n\n```{button-link} https://example.com\n:color: secondary\n:expand:\n```\n\n```{button-ref} buttons\n:color: info\n```\n\n```{button-ref} buttons\n:color: info\n\nReference Button text\n```\n\n`````{dropdown} Syntax\n:icon: code\n:color: light\n\n````{tab-set-code}\n```{literalinclude} ./snippets/myst/button-link.txt\n:language: markdown\n```\n```{literalinclude} ./snippets/rst/button-link.txt\n:language: rst\n```\n````\n</code></pre></p> <p>Note that by default sphinx converts the content of references to raw text. For example <code>**Bold text**</code> with <code>ref-type</code> set to <code>ref</code> will be rendered without bold:</p> <p>```{button-ref} buttons :ref-type: ref :color: primary</p> <p>Bold text <pre><code>However, if using [myst-parser](https://myst-parser.readthedocs.io/), you can set the `ref-type` to `myst`, and the content will be properly rendered:\n\n```{button-ref} buttons\n:ref-type: myst\n:color: primary\n\n**Bold text**\n</code></pre></p> <p>Use the <code>click-parent</code> option to make the button's parent container also clickable.</p> <p>:::{card} Card with an expanded button</p> <p><code>{button-link} https://example.com :color: info :expand: :click-parent: <pre><code>:::\n\nSee the [Material Design](https://material.io/components/buttons) and [Bootstrap](https://getbootstrap.com/docs/5.0/components/buttons/) descriptions for further details.\n\n### `button-link` and `button-ref` options\n\nref-type (`button-ref` only)\n: Type of reference to use; `any` (default), `ref`, `doc`, or `myst`\n\ncolor\n: Set the color of the button (background and font).\n  One of the semantic color names: `primary`, `secondary`, `success`, `danger`, `warning`, `info`, `light`, `dark`, `muted`.\n\noutline\n: Outline color variant\n\nalign\n: Align the button on the page; `left`, `right`, `center` or `justify`\n\nexpand\n: Expand to fit parent width\n\nclick-parent\n: Make parent container also clickable\n\ntooltip\n: Add tooltip on hover\n\nshadow\n: Add shadow CSS\n\nclass\n: Additional CSS classes\n\n(icons)=\n\n## Inline Icons\n\nInline icon roles are available for the [GitHub octicon](https://primer.style/octicons/), [Google Material Design Icons](https://github.com/google/material-design-icons), or [FontAwesome](https://fontawesome.com/icons?d=gallery&amp;m=free) libraries.\n\nOcticon icons and Material icons are added as SVG's directly into the page with the `octicon` and `material-&lt;flavor&gt;` roles. See below for the different flavors of Material Design Icons.\n\nBy default the icon will be of height `1em` (i.e. the height of the font).\nA specific height can be set after a semi-colon (`;`) with units of either `px`, `em` or `rem`.\nAdditional CSS classes can also be added to the SVG after a second semi-colon (`;`) delimiter.\n\n### Octicon Icons\n\nA coloured icon: {octicon}`report;1em;sd-text-info`, some more text.\n\n````{tab-set-code}\n```{literalinclude} ./snippets/myst/icon-octicon.txt\n:language: markdown\n</code></pre></code> ./snippets/rst/icon-octicon.txt :language: rst <pre><code>````\n\n````{dropdown} All Octicons\n:open:\n\n```{_all-octicon}\n</code></pre> <pre><code>### Material Design Icons\n\nMaterial Design icons come as several flavors. Each flavor represents a different role used in sphinx-design. These flavors are:\n\n- `material-regular`\n- `material-outlined`\n- `material-round`\n- `material-sharp`\n- `material-twotone`\n\nNot all icons are available for each flavor, but most are. Instead of displaying the 10660+ icons here, you are encouraged to browse the available icons from the [Material Design Icons' showcase](https://fonts.google.com/icons) hosted by Google.\n\n- A regular icon: {material-regular}`data_exploration;2em`, some more text\n- A coloured regular icon: {material-regular}`settings;3em;sd-text-success`, some more text.\n- A coloured outline icon: {material-outlined}`settings;3em;sd-text-success`, some more text.\n- A coloured sharp icon: {material-sharp}`settings;3em;sd-text-success`, some more text.\n- A coloured round icon: {material-round}`settings;3em;sd-text-success`, some more text.\n- A coloured two-tone icon: {material-twotone}`settings;3em;sd-text-success`, some more text.\n\n````{tab-set-code}\n```{literalinclude} ./snippets/myst/icon-material-design.txt\n:language: markdown\n```\n```{literalinclude} ./snippets/rst/icon-material-design.txt\n:language: rst\n```\n</code></pre></p>"},{"location":"pages/others/asdf/#fontawesome-icons","title":"FontAwesome Icons","text":"<p>FontAwesome icons are added via the Fontawesome CSS classes. If the theme you are using does not already include the FontAwesome CSS, it should be loaded in your configuration from a font-awesome CDN, with the html_css_files option, e.g.:</p> <pre><code>html_css_files = [\n    \"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css\"\n]\n</code></pre> <p>Use either <code>fa</code> (deprecated in font-awesome v5), <code>fas</code>, <code>fab</code> or <code>far</code> for the role name. Note that not all regular style icons are free, <code>far</code> role only works with free ones.</p> <p>Warning</p> <p>Since the FontAwesome icons are fetched directly from their distributed CSS, specifying a height/size to the <code>fa*</code> roles is not supported. However, you can always add your custom CSS class that controls the <code>font-size</code> property.</p> <p>If a height/size is supplied to a <code>fa*</code> role, then it will be interpreted as a CSS class. There can only be a maximum of 1 <code>;</code> in the <code>fa*</code> roles' arguments</p> <pre><code>```markdown\n- An icon {fas}`spinner;sd-text-primary`, some more text.\n- An icon {fab}`github`, some more text.\n- An icon {fab}`gitkraken;sd-text-success fa-xl`, some more text.\n- An icon {fas}`skull;sd-text-danger`, some more text.\n```\n```rst\n- An icon :fas:`spinner;sd-text-primary`, some more text.\n- An icon :fab:`github`, some more text.\n- An icon :fab:`gitkraken;sd-text-success fa-xl`, some more text.\n- An icon :fas:`skull;sd-text-danger`, some more text.\n```\n</code></pre> <ul> <li>An icon {fas}<code>spinner;sd-text-primary</code>, some more text.</li> <li>An icon {fab}<code>github</code>, some more text.</li> <li>An icon {fab}<code>gitkraken;sd-text-success fa-xl</code>, some more text.</li> <li>An icon {fas}<code>skull;sd-text-danger</code>, some more text.</li> </ul> <p>By default, icons will only be output in HTML formats. But if you want FontAwesome icons to be output on LaTeX, using the fontawesome package, you can add to your configuration:</p> <pre><code>sd_fontawesome_latex = True\n</code></pre>"},{"location":"pages/others/others/","title":"Others","text":"<ul> <li>Firefox Security Settings</li> </ul>"},{"location":"pages/others/firefox/firefox-security-settings/","title":"Firefox Security Settings","text":""},{"location":"pages/others/firefox/firefox-security-settings/#security-add-ons","title":"Security Add-ons","text":"<ul> <li>AdBlocker Ultimate</li> <li>ClearURLs</li> <li>Decentraleyes</li> <li>CanvasBlocker</li> <li>Firefox Relay</li> <li>Privacy Badger</li> <li>uBlock Origin</li> <li>WebRTC Leak Shield</li> <li>More</li> </ul>"},{"location":"pages/others/firefox/firefox-security-settings/#secure-internet-connection","title":"Secure Internet Connection","text":"<ul> <li>Use VPN</li> <li>Enable Cloudfare</li> <li>Enable ECH</li> <li>Disable WebRTC</li> </ul>"},{"location":"pages/others/firefox/firefox-security-settings/#vpn","title":"VPN","text":"<p>Virtual private network (VPN) can provide several benefits, such as hiding your IP address, encrypting your internet traffic, and allowing you to access content that may be restricted in your region.</p>"},{"location":"pages/others/firefox/firefox-security-settings/#enable-doh-dns-over-https-with-cloudflare","title":"Enable DoH (DNS-over-HTTPS) with Cloudflare","text":"<ol> <li>Open Firefox and go to <code>about:preferences#general</code>.</li> <li>Scroll down to <code>Network Settings</code> and click on <code>Settings...</code>.</li> <li>Select <code>Enable DNS over HTTPS</code> and select <code>Cloudflare</code> as provider.</li> <li>Click <code>OK</code> and close the tab.</li> </ol> <p>Or 1. Open Firefox and go to <code>about:config</code>. 2. Search for <code>network.trr</code>. 3. Set <code>network.trr.mode</code> to <code>2</code> or <code>3</code> (<code>2</code>: TRR first, fallback to DNS, <code>3</code>: TRR only) 4. Set <code>network.trr.uri</code> to <code>https://mozilla.cloudflare-dns.com/dns-query</code>.</p>"},{"location":"pages/others/firefox/firefox-security-settings/#enable-ech-encrypted-client-hello","title":"Enable ECH (Encrypted Client Hello)","text":"<ol> <li>Open Firefox and go to <code>about:config</code>.</li> <li>Search for <code>network.dns</code>.</li> <li>Set <code>network.dns.echconfig.enabled</code> to <code>true</code>.</li> <li>Set <code>network.dns.http3_echconfig.enabled</code> to <code>true</code>.</li> </ol>"},{"location":"pages/others/firefox/firefox-security-settings/#disable-webrtc","title":"Disable WebRTC","text":"<p>``` tip \"WebRTC\"     \ud83d\udc49 WebRTC stands for Web Real-Time Communication. It is a technology that allows audio and video communication over the internet directly between browsers, without the need for plugins or external software. While it can be useful for video conferencing and other real-time communication, it can also potentially leak your IP address, which is a privacy concern. Disabling WebRTC in your browser can help prevent IP leaks.</p> <p>Disable WebRTC: 1. Open Firefox and go to <code>about:config</code>. 2. Search for <code>media.peerconnection.enabled</code> and set it to <code>false</code>.</p> <p>WebRTC Leak Shield: This extension can switch the setting above easily.</p>"},{"location":"pages/others/firefox/firefox-security-settings/#test","title":"Test","text":"<ul> <li>Cloudflare Browser Check</li> <li>WebRTC Test</li> <li>DNS Leak Test</li> </ul> <p>If you pass Cloudflare Browser Check, you can see: <code>{image} img/cloudflare-test.png :width: 600px :alt: Cloudflare Browser Check</code></p>"},{"location":"pages/python/","title":"Python","text":"<ul> <li>Python and JupyterLab</li> <li>NumPy</li> <li>Matplotlib</li> <li>SciPY</li> <li>SymPY</li> </ul>"},{"location":"pages/python/basics/","title":"Python and Jupyterlab","text":"<p>Python is a simple and most popular programming language and used in many fields like AI and machine learning, Data analytics, Data visualization, Web, Game, and so on.</p> <p>JupyterLab is a next-generation web-based user interface for python programming.</p> <p>Here, you can learn basics of python and usage of JupyterLab. If you have not installed jupyter-lab, refer to venv.</p>"},{"location":"pages/python/basics/#print-function","title":"print() function","text":"<p><code>print()</code> function is the most basic function in python. It is used to print the value of any variable or expression. Here, we will see how to use <code>print()</code> function with the usage of jupyter lab(notebook).</p> <p>To begin with, let us print the string \"Hello World\" using <code>print()</code> function.  In jupyter lab(notebook), a code block is called a <code>cell</code>. A cell can contain multiple lines of code. To execute the code, click on the cell(colored in blue(jupyter notebook:green)) and press <code>Shift+Enter</code>.</p> <pre><code>print(\"Hello, world!\")\n</code></pre>"},{"location":"pages/python/basics/#comment","title":"comment","text":"<p>When programming, we often put some comments to explain the code. In python, we can use <code>#</code> to write  comments.</p> <p>If you want to comment out multiple lines, you can use <code>\"\"\" comment \"\"\"</code> to write comments (actually, this is called docstrings).</p> <pre><code># This is a comment. No output.\n\n\"\"\"\n    This\n    is\n    a \n    multiline\n    comment.\n\"\"\"\n</code></pre>"},{"location":"pages/python/basics/#arithmetic-operations","title":"Arithmetic operations","text":"<pre><code>print(1+1)\n</code></pre> <p>In programming, every object has a data type. For example, the number <code>1</code> has the data type <code>int</code>. The \"Hello World\" string has the data type <code>str</code>. The operations will be performed differently depending on the data types of targets.</p> <p>For example, <code>+</code> operator is used to add two numbers, and <code>+</code> operator is used to concatenate two strings.</p> <pre><code># you cannot use strings to do math.\nprint(3+4)\nprint('3+4')\nprint('3'+'4')\n</code></pre> <pre><code># This will be an error. You can't add a number and a string. \n# You need to convert the string to a number or vice versa.\nprint(3+'4')\n</code></pre> <pre><code>a = 3 # This is a variable. \nb = '4'\nprint(a+b) # This will be the same as the above cell.\n</code></pre> <pre><code># print out several inputs with `,`\nprint(a, b)\n</code></pre> <pre><code>print(a + int(b)) # This will convert the string to a number.\nprint(str(a) + b) # This will convert the number to a string.\n</code></pre> <pre><code># Basic arithmetic operations\nprint('addition 1+1 = ', 1+1)\nprint('subtraction 5-1 = ', 5-1)\nprint('multiplication 2*2 = ', 2*2)\nprint('division 5/2 = ', 5/2)\nprint('modulus 5%2 = ', 5%2)\nprint('floor division 5//2 = ', 5//2)\nprint('exponentiation 5**2 = ', 5**2)\n</code></pre> <pre><code># Instead of using a new line, you can use a semicolon.\nprint('adsf'); print('asdf')\n</code></pre>"},{"location":"pages/python/basics/#jupyter-lab-usage","title":"jupyter lab usage","text":"<p>Basically, code cells are used to write code. However, we can also use code cells to write comments in markdown format. If you want to write in markdown format, right click around the cell and press <code>m</code>, then <code>Shift+Enter</code>. You go back to code format by pressing <code>y</code>. Moreover, you can add a new cell by pressing <code>a</code> or <code>b</code>(<code>a</code> is for above, <code>b</code> is for below). </p> <p>Others; <code>x</code>; cut a cell. <code>c</code> ; copy a cell. <code>v</code>; paste a cell (Shift + <code>c</code> to copy multi cells). <code>z</code>; undo. </p> <p>Markdown usage</p>"},{"location":"pages/python/basics/#collectionslist-tuple-set-dictionary","title":"Collections(list, tuple, set, dictionary)","text":"<p>List, tuple, set, dictionary are used to store data in different ways.</p> <pre><code>l = [3,4,5]\nindex = 0 # index starts with 0\nprint(l[index])\n\nl[1] = 7 # You can change the value of an element in a list.\nprint(l)\n</code></pre> <pre><code># You can use different types of data in a list.\nl = [3,4,5,'a','b','c', True, False, [1,2,3]]\n</code></pre> <pre><code>t = (3,4,5)\n\nt[2] = 7\n# You can't change the value of an element in a tuple.\n# However, a tuple uses less memory than a list.\n</code></pre> <pre><code>s = {3,4,5,5}\nprint(s)\n</code></pre> <pre><code>d = {'a':3,'b':4,'c':5}\nprint(d['a'])\n\nd['a'] = 6 # You can change the value of an element in a dictionary.\nd['d'] = 7 # You can add a new key-value pair to a dictionary.\nprint(d)\n\nprint(d.items()) # This will return a list of all the key-value pairs in the dictionary.\nprint(d.keys()) # This will return a list of all the keys in the dictionary.\nprint(d.values()) # This will return a list of all the values in the dictionary.\n</code></pre>"},{"location":"pages/python/basics/#open-a-file","title":"Open a file","text":"<pre><code>path = './sample.txt'\nwith open(path) as f:\n    l = f.readlines()\n    print(l)\n    for i in range(len(l)):\n        print(l[i])\n</code></pre>"},{"location":"pages/python/basics/#for-loops","title":"For loops","text":"<p><code>for loop</code> is used to iterate over a collection of items.</p> <pre><code>for i in range(5):\n    print(i)\n# Index starts at 0.\n</code></pre> <pre><code>for i in range(5,10):\n    print(i)\n# Index starts at 5.\n# cf. range(5,13,2)\n</code></pre> <pre><code>items = ['a','b','c','d','e']\nfor i in items:\n    print(i)\n# You can use a for loop to iterate over a list, tuple, dictionary, string, and so on.\n\nprint('-------------------------------')\nfor i in range(len(items)):\n    print(items[i])\n</code></pre> <pre><code>for i, item in enumerate(items):\n    print(i, item)\n</code></pre> <pre><code>for _ in range(5):\n    print('Hello')\n</code></pre>"},{"location":"pages/python/basics/#comprehension","title":"Comprehension","text":"<pre><code>[i for i in range(5)]\n</code></pre> <pre><code>data = [3,14,23,28,35,46,55,65,76,87,98,109,120,131,142]\n[x*10 for x in data]\n</code></pre> <pre><code>[x for x in data if x%2==0]\n</code></pre> <pre><code>[x if x&gt;50 else x*10 for x in data]\n</code></pre> <p>You can use list comprehension like below but it is not recommended because it is hard to read.</p> <pre><code>import numpy as np # This is a module. NumPy is a package that contains many useful functions for working with arrays.\na = np.arange(1,51)\nfizz_buzz = ['fizzbuzz' if x%3==0 and x%5==0 else 'fizz' if x%3==0 else 'buzz' if x%5==0 else x for x in a]\nprint(fizz_buzz)\n</code></pre>"},{"location":"pages/python/basics/#functions","title":"Functions","text":"<p><code>function</code> is a block of code which take inputs and returns outputs. It only runs when it is called.  Actually, most code we write consists of functions.</p> <pre><code>def print_hello():\n    print('Hello, world!')\n</code></pre> <pre><code>print_hello()\n</code></pre> <pre><code>def myfunc(arg1, arg2):\n    for i in range(arg1):\n        print(arg2)\n\nmyfunc(3, 'Hello')\n# = myfunc(arg1=3, arg2='Hello')\n</code></pre> <pre><code>import numpy as np # NumPy is a package that contains many useful functions for working with arrays.\nimport matplotlib.pyplot as plt # Matplotlib is a package that contains many useful functions for plotting.\n\nx = np.linspace(0,10, 100)\ny = np.sin(x)\n\nprint(x[:5])\nprint(y[:5])\n</code></pre> <pre><code>plt.plot(x,y)\nplt.title('sin')\nplt.show()\n</code></pre>"},{"location":"pages/python/basics/#lambda-functions","title":"lambda functions","text":"\\[ f(x) = x^2 \\] <pre><code>f = lambda x: x**2\n\nprint(f(3))\n</code></pre>"},{"location":"pages/python/basics/#reference","title":"Reference","text":"<p>Python Beginners Guide</p>"},{"location":"pages/python/matplotlib/","title":"Matplotlib","text":"<p>Matplotlib is a comprehensive library for creating static, animated, and interactive visualizations in Python. - Matplotlib</p> <pre><code>import matplotlib.pyplot as plt\nimport numpy as np\n</code></pre>"},{"location":"pages/python/matplotlib/#1-plot-a-line","title":"1. Plot a line","text":"<pre><code># make a square function\ndef square(x):\n    return x**2\n\n# Make x and y values.\n# np.linxpace() is a function that returns evenly spaced numbers over a specified interval.\n# We use it to make x values from -5 to 5 with 100 points in between.\nx = np.linspace(-5, 5, 100)\ny = square(x)\n</code></pre> <pre><code># plot the function. ` plt` is an alias for `matplotlib.pyplot`.\nplt.plot(x, y)\nplt.show()\n</code></pre> <pre><code># plot the function. ` plt` is an alias for `matplotlib.pyplot`.\nplt.plot(x, y)\n\n# Add labels to the axes\nplt.xlabel('x')\nplt.ylabel('y')\n\n# Add a title\nplt.title('Square function')\n\nplt.show()\n</code></pre>"},{"location":"pages/python/matplotlib/#change-color-marker-style-and-line-style","title":"Change color, marker style and line style","text":"<pre><code>x = np.linspace(-5, 5, 10)\ny = square(x)\n\n# You can specify the color, marker, and line style in the plot function as below.\nplt.plot(x, y, color='red', marker='o', linestyle='--', label='label')\n\n# Show the legend. It uses the `label` defined in the `plot()` function.\nplt.legend()\n\n# Add labels to the axes\nplt.xlabel('x')\nplt.ylabel('y')\n\n# Add a title\nplt.title('Square function')\n\nplt.show()\n</code></pre> <p>Add cube function plot.</p> <pre><code>def cube(x):\n    return x**3\n</code></pre> <pre><code>x = np.linspace(-3, 3, 10)\ny = square(x)\nz = cube(x)\n\n# You can specify the color, marker, and line style in the plot function as below.\nplt.plot(x, y, color='red', marker='o', linestyle='--', label='Square')\nplt.plot(x, z, color='blue', marker='x', linestyle='-', label='Cube')\n\n# Show the legend. It uses the `label` defined in the `plot()` function\nplt.legend() \n\n# Add labels to the axes\nplt.xlabel('x')\nplt.ylabel('y')\n\n# Add a title\nplt.title('Square function and cube function')\n\nplt.show()\n</code></pre>"},{"location":"pages/python/matplotlib/#pltsemilogy-plots-the-y-axis-in-log-scale","title":"<code>plt.semilogy</code> plots the y-axis in log scale.","text":"<pre><code>x = np.linspace(0.1, 10, 10)\ny = square(x)\nz = cube(x)\n\n# You can specify the color, marker, and line style in the plot function as below.\nplt.semilogy(x, y, color='red', marker='o', linestyle='--', label='Square')\nplt.semilogy(x, z, color='blue', marker='x', linestyle='-', label='Cube')\n\n# Show the legend. It uses the `label` defined in the `plot()` function\nplt.legend() \n\n# Add labels to the axes\nplt.xlabel('x')\nplt.ylabel('y')\n\n# Add a title\nplt.title('Square function and cube function')\n\nplt.show()\n</code></pre> <pre><code>x = np.linspace(-5, 5, 10)\ny = np.exp(x)\n\n# You can specify the color, marker, and line style in the plot function as below.\nplt.semilogy(x, y, label='Exponential')\n\n# Show the legend. It uses the `label` defined in the `plot()` function\nplt.legend() \n\n# Add labels to the axes\nplt.xlabel('x')\nplt.ylabel('exp(x)')\n\n# Add a title\nplt.title('Exponential function')\n\nplt.show()\n</code></pre>"},{"location":"pages/python/matplotlib/#2-scatter-plot","title":"2. Scatter plot","text":"<pre><code># Scatter plot\nx = np.linspace(-5, 5, 20)\ny = square(x)\n\nplt.scatter(x, y)\nplt.show()\n</code></pre> <pre><code>np.random.seed(0)\n\n# Scatter plot: gaussian distribution with mean 0 and standard deviation 1\nx = np.random.normal(size=1000)\ny = np.random.normal(size=1000)\n\nplt.scatter(x, y)\nplt.show()\n</code></pre>"},{"location":"pages/python/matplotlib/#3-histogram","title":"3. Histogram","text":"<pre><code>np.random.seed(0)\n\n# Generate 10000 random numbers from a normal distribution with mean 0 and standard deviation 1.\n\nx = np.random.normal(0, 1, 10000)\n\n# Plot a histogram with 50 bins.\nplt.hist(x, bins=50)\nplt.show()\n</code></pre>"},{"location":"pages/python/matplotlib/#add-another-histogram","title":"Add another histogram","text":"<pre><code>np.random.seed(0)\n\n# Generate 10000 random numbers from a normal distribution with mean 0 and standard deviation 1.\nx = np.random.normal(0, 1, 10000)\n# Generate 10000 random numbers from a normal distribution with mean 2 and standard deviation 0.5.\ny = np.random.normal(2, 0.5, 10000)\n\n# Plot a histogram with 50 bins.\n# `alpha` is the transparency of the bars. used to compare several histograms.\nplt.hist(x, bins=50, color='blue', alpha=0.5, label='x')\nplt.hist(y, bins=50, color='green', alpha=0.5, label='y')\n\n# Show the legend. It uses the `label` defined in the `hist()` function.\nplt.legend()\n\n# Add labels to the axes\nplt.xlabel('value')\nplt.ylabel('count')\n\n# Add a title\nplt.title('Histogram')\n\nplt.show()\n</code></pre> <pre><code>import matplotlib.pyplot as plt\nimport numpy as np\n\nyear = (\"2003\", \"2013\", \"2023\")\ngdps = {\n    'Japan': (4519.56, 5212.33, 4409.74),\n    'China': (1656.96, 9624.93, 19373.59),\n    'America': (11456.45, 16843.23, 26854.60),\n}\n\nx = np.arange(len(year)) * 1  # the label locations\nwidth = 0.3  # the width of the bars\nmultiplier = 0\n\nfig, ax = plt.subplots(layout='constrained')\n\nfor country, gdp in gdps.items():\n    offset = width * multiplier\n    rects = ax.bar(x + offset, gdp, width, label=country)\n    ax.bar_label(rects, padding=3)\n    multiplier += 1\n\n\nax.set_ylabel('GDP (billion USD)')\nax.set_title('GDP')\nax.set_xticks(x + width, year)\nax.legend(loc='upper left', ncols=3)\n\nplt.show()\n</code></pre>"},{"location":"pages/python/matplotlib/#5-2d-plots","title":"5. 2D plots","text":"<pre><code>import matplotlib.pyplot as plt\nimport numpy as np\n\nt = np.linspace(0, 2 * np.pi, 1024)\ndata2d = np.sin(t)[:, np.newaxis] * np.sin(t)[np.newaxis, :]\n\nfig, ax = plt.subplots()\nim = ax.imshow(data2d)\n\nfig.colorbar(im, ax=ax, label='Colorbar')\n\nax.set_title('sin(x)sin(y)')\nplt.show()\n</code></pre>"},{"location":"pages/python/matplotlib/#6-3d-line-plots","title":"6. 3D line plots","text":"<pre><code>def pos(t):\n\n    x = np.exp(-t) * np.cos(10 * np.pi * t)\n    y = np.exp(-t) * np.sin(10 * np.pi * t)\n    z = t\n\n    return x, y, z\n\nt = np.linspace(0, 2, 1000)\n\nx, y, z = pos(t)\n\nfig = plt.figure(figsize=(6, 6))\nax = fig.add_subplot(projection='3d')\n\nax.plot(x, y, z, label='parametric curve')\n\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\n\nax.set_title(\"3D Parametric Curve\")\nplt.show()\n</code></pre>"},{"location":"pages/python/matplotlib/#7-3d-surface-plot","title":"7. 3D surface plot","text":"<pre><code>import matplotlib.pyplot as plt\nfrom matplotlib import cm\nfrom matplotlib.ticker import LinearLocator\nimport numpy as np\n\nfig, ax = plt.subplots(subplot_kw={\"projection\": \"3d\"})\n\n# Make data.\nX = np.arange(-5, 5, 0.05)\nY = np.arange(-5, 5, 0.05)\nX, Y = np.meshgrid(X, Y)\nZ = np.sin(X) * np.cos(Y)\n\n# Plot the surface.\nsurf = ax.plot_surface(X, Y, Z, cmap=cm.coolwarm, linewidth=0, antialiased=False)\n\n# Customize the z axis.\nax.set_zlim(-1.01, 1.01)\nax.zaxis.set_major_locator(LinearLocator(5))\nax.zaxis.set_major_formatter('{x:.02f}')\n\n# Add a color bar which maps values to colors.\nfig.colorbar(surf, shrink=0.5, aspect=9)\n\nplt.show()\n</code></pre>"},{"location":"pages/python/numpy/","title":"Numpy","text":"<p>Numpy is a Python library for scientific computing. It provides high-performance multidimensional arrays and matrices, and efficient tools for working with these objects.</p> <pre><code>import numpy as np\n</code></pre>"},{"location":"pages/python/numpy/#create-numpy-arrays","title":"Create numpy arrays","text":"<p>+++</p> <p>A basic way to create an array is to use the function <code>np.array()</code>. It takes a list as an argument and returns a numpy array.</p> <pre><code>a = np.array([1, 2, 3])\nprint(a)\n</code></pre> <p>In numpy, there are many methods to create arrays. For example, <code>np.arange()</code> creates an array of integers, <code>np.zeros()</code> creates an array of zeros, and <code>np.ones()</code> creates an array of ones.</p> <pre><code>np.arange(10)\n</code></pre> <pre><code>np.arange(1, 10, 2)\n</code></pre> <pre><code>np.zeros(10)\n</code></pre> <pre><code>np.zeros((3, 5))\n</code></pre> <pre><code>np.ones(10)\n</code></pre> <pre><code>np.ones((3, 5))\n</code></pre> <p><code>np.random.??</code> makes random arrays.</p> <p><code>np.random.rand()</code> makes an array of random numbers from the uniform distribution between 0 and 1.</p> <p><code>np.random.randn()</code> makes an array of random numbers from the standard normal distribution.</p> <p><code>np.random.randint(low, high, size)</code> makes an array of random integers between low and high.</p> <p><code>np.random.choice(a, size, replace=True, p=None)</code> makes an array of random numbers from the list a.</p> <pre><code>np.random.seed(0)\n\nprint(\"np.random.rand(5) = \", np.random.rand(5), sep=\"\\n\", end=\"\\n\\n\")\n\nprint(\"np.random.randn(5) = \", np.random.randn(5), sep=\"\\n\", end=\"\\n\\n\")\n\nprint(\"np.random.rand(3, 5) = \", np.random.rand(3, 5), sep=\"\\n\", end=\"\\n\\n\")\n\nprint(\"np.random.randint(low=1, high=10, size=5) = \", np.random.randint(low=1, high=10, size=5), end=\"\\n\\n\")\n\nprint(\"np.random.randint(10) = \", np.random.randint(10), end=\"\\n\\n\")\n\nprint(\"np.random.randint(1, 10, (3, 5)) = \", np.random.randint(1, 10, (3, 5)), sep=\"\\n\")\n\nprint(\"np.random.choice(['a', 'b', 'c'], 10) = \", np.random.choice([\"a\", \"b\", \"c\"], 10), sep=\"\\n\", end=\"\\n\\n\")\n</code></pre> <p><code>np.linspace(start, stop, num, endpoint=True)</code> creates an array of evenly spaced numbers over a specified interval. This can be useful for plotting functions.</p> <pre><code>np.linspace(0, 1, 6)\n</code></pre> <p><code>np.eye()</code> creates an matrix with ones on the diagonal and zeros elsewhere. You can also make non-square identity matrices by specifying the number of rows and columns.</p> <pre><code>np.eye(3, 5)\n</code></pre> <pre><code>np.eye(5)  # This is the same as np.identity(5)\n</code></pre> <pre><code>np.identity(5)\n</code></pre> <p><code>np.emtpy()</code> creates an array of uninitialized (arbitrary) data of the given shape and dtype. It is used when you want to create an array and then fill it with data later. It is faster than creating an array of zeros or ones using <code>np.zeros()</code> or <code>np.ones()</code>.</p> <pre><code>np.empty(10)\n</code></pre> <p><code>np.zeros_like(()</code>, <code>np.ones_like()</code>, <code>np.empty_like()</code> create arrays of zeros, ones, or uninitialized data with the same shape and dtype as the given array.</p> <pre><code>a = np.array([[1, 2, 3], [4, 5, 6]])\n\nnp.zeros_like(a)\n</code></pre> <pre><code>np.full((3, 5), 3)\n</code></pre> <pre><code>np.fromfunction(lambda i, j: i + j, (3, 5))\n</code></pre>"},{"location":"pages/python/numpy/#manipulating-arrays","title":"Manipulating arrays","text":"<pre><code># Append 4 to a\na = np.array([1, 2, 3])\nb = np.append(a, 4)\nprint(b)\n</code></pre> <pre><code># Delete a[1]\na = np.array([1, 2, 3])\nb = np.delete(a, 1)\nprint(b)\n</code></pre> <pre><code># Sort a\na = np.array([3, 2, 1])\nb = np.sort(a)\nprint(b)\n</code></pre> <pre><code># Concatenate two arrays\na = np.array([1, 2, 3])\nb = np.array([4, 5, 6])\nc = np.concatenate((a, b))\nprint(c)\n</code></pre> <pre><code># Reshape an array\na = np.array([1, 2, 3, 4, 5, 6])\nprint(\"a.shape \", a.shape)\nb = a.reshape(2, 3)\nprint(\"b = \", b)\nprint(\"b.shape \", b.shape)\n</code></pre> <pre><code># Conditional selection\na = np.array([1, 2, 3, 4, 5, 6])\nprint(a &gt; 3)\nprint(a[a &gt; 3])\n</code></pre> <pre><code># Slice an array\na = np.array([1, 2, 3, 4, 5, 6])\n# print from a[1] to a[3], not including a[4](=5)\nprint(a[1:4])\n</code></pre>"},{"location":"pages/python/numpy/#arithmetic-operations-on-arrays","title":"Arithmetic operations on arrays","text":"<pre><code>a = np.array([1, 2, 3, 4])\nb = np.array([5, 6, 7, 8])\n\n# Addition\nprint(a + b)\n\n# Subtraction\nprint(a - b)\n\n# Multiplication\nprint(a * b)\n\n# Division\nprint(a / b)\n</code></pre> <pre><code>a = np.array([1, 2, 3, 4])\n\n# Add a scalar to each element\nprint(\"a + 2 = \", a + 2)\n\n# Subtract a scalar from each element\nprint(\"a - 2 = \", a - 2)\n\n# Multiply a scalar to each element\nprint(\"a * 2 = \", a * 2)\n\n# Divide each element by a scalar\nprint(\"a / 2 = \", a / 2)\n\n# Take the square root of each element\nprint(\"a ** 0.5 = \", np.sqrt(a))\n\n# Take the square of each element\nprint(\"a ** 2 = \", a**2)\n\n# Take the log of each element\nprint(\"np.log(a) = \", np.log(a))\n\n# Take the exponential of each element\nprint(\"np.exp(a) = \", np.exp(a))\n\n# Take the sin of each element\nprint(\"np.sin(a) = \", np.sin(a))\n\n# Take the cos of each element\nprint(\"np.cos(a) = \", np.cos(a))\n</code></pre> <pre><code>a = np.array([1, 2, 3, 4, 5])\n\n# Maximum\nprint(\"max = \", a.max())\n\n# Minimum\nprint(\"min = \", a.min())\n\n# Argmax\nprint(\"argmax = \", a.argmax())\n\n# Argmin\nprint(\"argmin = \", a.argmin())\n\n# Sum\nprint(\"sum = \", a.sum())\n\n# Mean\nprint(\"mean = \", a.mean())\n\n# Standard deviation\nprint(\"std = \", a.std())\n\n# Variance\nprint(\"var = \", a.var())\n</code></pre> <pre><code># Dot product\na = np.array([1, 2, 3, 4])\nb = np.array([5, 6, 7, 8])\nprint(np.dot(a, b))\n</code></pre>"},{"location":"pages/python/numpy/#matrix-operations","title":"Matrix operations","text":"<pre><code>a = np.array([[1, 2, 3], [4, 5, 6]])\nb = np.array([[7, 8], [9, 10], [11, 12]])\n\n# Matrix multiplication\nprint(np.dot(a, b), end=\"\\n\\n\")\n\nprint(a.dot(b), end=\"\\n\\n\")\n\nprint(a @ b, end=\"\\n\\n\")\n</code></pre> <pre><code>a = np.array([[1, 2, 3], [4, 6, 8], [7, 11, 13]])\n\n# Transpose\nprint(\"a.T = \", a.T, sep=\"\\n\", end=\"\\n\\n\")\n\n# Trace\nprint(\"np.trace(a) = \", np.trace(a), end=\"\\n\\n\")\n\n# Determinant\nprint(\"np.linalg.det(a) = \", np.linalg.det(a), end=\"\\n\\n\")\n\n# Inverse\nprint(\"np.linalg.inv(a) = \", np.linalg.inv(a), sep=\"\\n\", end=\"\\n\\n\")\n</code></pre> <p><code>np.linalg.???</code> is a module for linear algebra. <code>linalg</code> can also be called from <code>scipy</code> as <code>scipy.linalg.???</code>.</p> <pre><code># Eigenvalues and eigenvectors\neigvals, eigvecs = np.linalg.eig(a)\nprint(\"eigvals = \", eigvals, sep=\"\\n\", end=\"\\n\\n\")\nprint(\"eigvecs = \", eigvecs, sep=\"\\n\", end=\"\\n\\n\")\n\nprint(\"a = \", eigvecs @ np.diag(eigvals) @ np.linalg.inv(eigvecs), sep=\"\\n\", end=\"\\n\\n\")\n</code></pre> <pre><code># Singular value decomposition\nU, S, V = np.linalg.svd(a)\nprint(\"U = \", U, sep=\"\\n\", end=\"\\n\\n\")\nprint(\"S = \", S, sep=\"\\n\", end=\"\\n\\n\")\nprint(\"V = \", V, sep=\"\\n\", end=\"\\n\\n\")\n\nprint(\"a = \", U @ np.diag(S) @ V, sep=\"\\n\", end=\"\\n\\n\")\n</code></pre>"},{"location":"pages/python/numpy/#learn-more-about-numpy","title":"Learn more about numpy","text":""},{"location":"pages/python/scipy/","title":"SciPY","text":"<p>SciPy is a collection of mathematical algorithms and convenience functions built on the NumPy extension of Python. - scippy doc</p> <p>In this page, you see examples of scipy functions (differentiation, integration, optimization) to solve problems.</p> <pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import integrate, diff, optimize\n\nfrom IPython.display import display, Latex\n</code></pre>"},{"location":"pages/python/scipy/#differentiation","title":"Differentiation","text":""},{"location":"pages/python/scipy/#scipyintegratesolve_ivp","title":"scipy.integrate.solve_ivp","text":"<p>Solve an initial value problem for a system of ODEs.</p> \\[ \\frac{dy}{dt} = f(t, y), \\quad y(t_0) = y_0 \\] <p>+++</p> <pre><code>scipy.integrate.solve_ivp(fun, t_span, y0, method='RK45', t_eval=None,\\\n    dense_output=False, events=None, vectorized=False, args=None, **options)\n</code></pre> <p>+++</p> <p>Solve the Lotka-Volterra equations. The Lotka-Volterra equations, also known as the predator-prey equations, are a pair of first-order, non-linear, differential equations frequently used to describe the dynamics of biological systems in which two species interact, one as a predator and the other as prey. They were proposed independently by Alfred J. Lotka in 1925 and Vito Volterra in 1926.</p> \\[ \\frac{dx}{dt} = ax - bxy ,\\quad \\frac{dy}{dt} = -cx + dxy  \\] <pre><code>from scipy.integrate import solve_ivp\n\n\ndef lotkavolterra(t, z, a, b, c, d):\n    x, y = z\n    return [a * x - b * x * y, -c * y + d * x * y]\n\n\nsol = solve_ivp(lotkavolterra, [0, 15], [10, 5], args=(1.5, 1, 3, 1), dense_output=True)\n\nt = np.linspace(0, 15, 300)\nz = sol.sol(t)\n\nplt.plot(t, z.T)\nplt.xlabel(\"t\")\nplt.legend([\"x; prey\", \"y; predator\"], shadow=True)\nplt.title(\"Lotka-Volterra System\")\nplt.show()\n</code></pre>"},{"location":"pages/python/scipy/#integration","title":"Integration","text":""},{"location":"pages/python/scipy/#scipyintegratequad","title":"scipy.integrate.quad","text":"<p>Compute a definite integral.</p> <pre><code>scipy.integrate.quad(func, a, b, args=(), full_output=0, epsabs=1.49e-08, epsrel=1.49e-08,\\\n    limit=50, points=None, weight=None, wvar=None, wopts=None, maxp1=50, limlst=50)\n</code></pre> <p>Return <code>y</code> and <code>abserr</code>. - y(float): The integral of func from a to b. - abserr(float): An estimate of the absolute error in the result.</p> <p>Let's compute the integral: $ \\int_0^4 x^2 dx$</p> <pre><code>x2 = lambda x: x**2\nans = integrate.quad(x2, 0, 4)  # numerical result\nprint(\"x, y = \", ans)\n\n\ndisplay(Latex(\"$$ \\int_0^4 x^2 dx = \\\\frac{x^3}{3} \\Big|_0^4 = \\\\frac{4^3}{3} = 23.3333 $$\"))\n</code></pre>"},{"location":"pages/python/scipy/#root-finding","title":"Root finding","text":""},{"location":"pages/python/scipy/#scipyoptimizeroot_scalar","title":"scipy.optimize.root_scalar","text":"<p>Find a root of a scalar function.</p> <pre><code>scipy.optimize.root_scalar(f, args=(), method=None, bracket=None, fprime=None, fprime2=None,\\\n    x0=None, x1=None, xtol=None, rtol=None, maxiter=None, options=None)\n</code></pre> <p>+++</p> <p>find a root of a scalar function</p> \\[f(x) = x^2 - x -1 \\] <pre><code>from scipy import optimize\n\n\ndef f(x):\n    return x**2 - x - 1\n\n\nsol = optimize.root_scalar(f, bracket=[0, 3])  # numerical result\nprint(\"numerical result: \", sol.root)\n\n\nprint(\"\\nanalytical result:\")\ndisplay(Latex(\"$$ f(x) = x^2 -x - 1 = 0 \\Longleftrightarrow x = \\\\frac{1 \\pm \\sqrt{5}}{2} = -0.618034, 1.618034 $$\"))\n</code></pre>"},{"location":"pages/python/scipy/#scipyoptimizeroot","title":"scipy.optimize.root","text":"<p>Find a root of a vector function.</p> <pre><code>scipy.optimize.root(func, x0, args=(), method='hybr', jac=None, tol=None,\n                    callback=None, options=None)\n</code></pre> <pre><code>def fun(x):\n    return [x[0] + 0.5 * (x[0] - x[1]) ** 3 - 1.0, 0.5 * (x[1] - x[0]) ** 3 + x[1]]\n\n\ndef jac(x):  # Jacbian\n    return np.array(\n        [\n            [1 + 1.5 * (x[0] - x[1]) ** 2, -1.5 * (x[0] - x[1]) ** 2],\n            [-1.5 * (x[1] - x[0]) ** 2, 1 + 1.5 * (x[1] - x[0]) ** 2],\n        ]\n    )\n\n\nsol = optimize.root(fun, [0, 0], jac=jac, method=\"hybr\")\nprint('numerical result: ', sol.x)\n</code></pre>"},{"location":"pages/python/scipy/#scipyoptimizeminimize","title":"scipy.optimize.minimize","text":"<p>Local (multivariate) optimization</p> <pre><code>scipy.optimize.minimize(fun, x0, args=(), method=None, jac=None, hess=None,\\\n    hessp=None, bounds=None, constraints=(), tol=None, callback=None, options=None)\n</code></pre> <p>+++</p> <p>find the minimum point of</p> \\[ f(x,y) = (1-x)^2 + 5(y-x^2)^2 \\] <pre><code>from scipy.optimize import minimize\n\nf = lambda x: (1 - x[0]) ** 2 + 5 * (x[1] - x[0] ** 2) ** 2\nx0 = [-1, -1]\nres = minimize(f, x0, method=\"CG\", options={\"disp\": True})\nprint(\"\\nnumerical result: \", res.x)\n</code></pre>"},{"location":"pages/python/scipy/#scipyoptimizeleast_squares","title":"scipy.optimize.least_squares","text":"<p>Least-squares</p> <pre><code>scipy.optimize.least_squares(fun, x0, jac='2-point', bounds=(- inf, inf), method='trf', ftol=1e-08,\\\n    xtol=1e-08, gtol=1e-08, x_scale=1.0, loss='linear', f_scale=1.0, diff_step=None, tr_solver=None,\\\n    tr_options={}, jac_sparsity=None, max_nfev=None, verbose=0, args=(), kwargs={})\n</code></pre> <p>+++</p> <p>Here, we solve fitting problem.</p> <pre><code># Solve a nonlinear least-squares problem with bounds on the variables.\nimport os\nimport scipy.optimize as opt\n\n# p: parameters, t: time, y: measured data\nfitFunc = lambda p, t: p[0] * np.exp(-p[1] * t) * np.cos(p[2] * t)\nerrFunc = lambda p, t, y: fitFunc(p, t) - y\n\nnp.random.seed(0)\nx = np.linspace(0, 5, 100)\ny = fitFunc([3, 0.5, 3], x) + np.random.randn(len(x)) / 3\n\np0 = [1, 1, 1]  # Initial guess for the parameters\n(p, success) = opt.leastsq(errFunc, p0, args=(x, y))\nprint(\"\\nnumerical result: \", p)\nprint(\"true value: \", [3, 0.5, 3])\nnfit = fitFunc(p, x)\n\nplt.plot(x, y, label=\"Measured data\", color=\"orange\")\nplt.plot(x, nfit, label=\"fitting curve\", color=\"red\")\nplt.legend()\nplt.show()\n</code></pre>"},{"location":"pages/python/sympy/","title":"SymPY","text":"<p>SymPy is a Python library for symbolic mathematics. - sympy doc</p> <p>In this page, you see examples of sympy usage.</p> <pre><code>from sympy import *\n</code></pre>"},{"location":"pages/python/sympy/#declare-symbols","title":"Declare symbols","text":"<pre><code>x = Symbol(\"x\")\ny = Symbol(\"y\")\n</code></pre> <pre><code>(x + y) ** 2\n</code></pre>"},{"location":"pages/python/sympy/#expansion","title":"Expansion","text":"<pre><code>f = expand((x + y) ** 2)\ndisplay(f)\n</code></pre>"},{"location":"pages/python/sympy/#substitution","title":"Substitution","text":"<pre><code>f.subs({x: 1, y: 2})\n</code></pre>"},{"location":"pages/python/sympy/#factorization","title":"Factorization","text":"<pre><code>factor(x**2 - 4 * x + 3)\n</code></pre>"},{"location":"pages/python/sympy/#solve-equations","title":"Solve equations","text":"<pre><code>solve(x**2 - x - 1)\n</code></pre>"},{"location":"pages/python/sympy/#partial-fraction-decomposition","title":"Partial fraction decomposition","text":"<pre><code>apart(1 / (x**5 - 1))\n</code></pre>"},{"location":"pages/python/sympy/#integrals-and-derivatives","title":"Integrals and derivatives","text":"<pre><code>a = Symbol(\"a\")  # Without real=True, a is treated as a complex number.\nb = Symbol(\"b\")\n\nu = exp(a * x) * sin(b * x)\ndisplay(u)\n</code></pre> <pre><code>int_u = integrate(u, x)\ndisplay(int_u)\n</code></pre> <pre><code>R = diff(u, x, 2) + u + x\ndisplay(R)\n</code></pre>"},{"location":"pages/python/sympy/#summation","title":"Summation","text":"<pre><code>k, N = symbols(\"k, N\", integer=True)\nfactor(summation(k, (k, 1, N)))\n</code></pre>"},{"location":"pages/python/sympy/#limits","title":"Limits","text":"\\[ \\lim_{x \\to 0} \\frac{\\sin x}{x} = 1 \\] <pre><code>limit(sin(x) / x, x, 0)\n</code></pre>"},{"location":"pages/python/sympy/#other-examples","title":"Other Examples","text":"<pre><code>s = Symbol(\"s\")\nt = Symbol(\"t\")\n\nl = (s**2 * x**3) + (t * x**2) + (3 * x) + 1\n\ndisplay(l)\n</code></pre> <pre><code>int_l = integrate(l, (x, 0, 1))\ndisplay(int_l)\n</code></pre>"},{"location":"pages/python-ipynb/","title":"Python","text":"<ul> <li>Python and JupyterLab</li> <li>NumPy</li> <li>Matplotlib</li> <li>SciPY</li> <li>SymPY</li> </ul>"},{"location":"pages/python-ipynb/basics/","title":"Python and Jupyterlab","text":"<p>To begin with, let us print string \"Hello World\" using <code>print()</code> function. In jupyter lab(notebook), a code block is called a <code>cell</code>. A cell can contain multiple lines of code. To execute the code, click on the cell(colored in blue(jupyter notebook:green)) and press <code>Shift+Enter</code> key.</p> In\u00a0[2]: Copied! <pre>print(\"Hello, world!\")\n</pre> print(\"Hello, world!\") <pre>Hello, world!\n</pre> <p>When programming, we often put some comments to explain the code. In python, we can use <code>#</code> to write  comments.</p> <p>If you want to comment out multiple lines, you can use <code>\"\"\" \"\"\"</code> to write comments (actually, this is called docstrings).</p> In\u00a0[1]: Copied! <pre># This is a comment. No output.\n\n\"\"\"\n    This\n    is\n    a \n    multiline\n    comment.\n\"\"\"\n</pre> # This is a comment. No output.  \"\"\"     This     is     a      multiline     comment. \"\"\" In\u00a0[1]: Copied! <pre>print(1+1)\n</pre> print(1+1) Out[1]: <pre>2</pre> <p>In programming, every object has a data type. For example, the number <code>1</code> has the data type <code>int</code>. The \"Hello World\" string has the data type <code>str</code>. If the data types are different, the operations will be performed differently.</p> <p>For example, <code>+</code> operator is used to add two numbers, and <code>+</code> operator is used to concatenate two strings.</p> In\u00a0[4]: Copied! <pre># you cannot use strings to do math.\nprint(3+4)\nprint('3+4')\nprint('3'+'4')\n</pre> # you cannot use strings to do math. print(3+4) print('3+4') print('3'+'4') <pre>7\n3+4\n34\n</pre> In\u00a0[5]: Copied! <pre># This will be an error. You can't add a number and a string. \n# You need to convert the string to a number or vice versa.\nprint(3+'4')\n</pre> # This will be an error. You can't add a number and a string.  # You need to convert the string to a number or vice versa. print(3+'4') <pre>\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nInput In [5], in &lt;cell line: 3&gt;()\n      1 # This will be an error. You can't add a number and a string. \n      2 # You need to convert the string to a number or vice versa.\n----&gt; 3 print(3+'4')\n\nTypeError: unsupported operand type(s) for +: 'int' and 'str'</pre> In\u00a0[3]: Copied! <pre>a = 3 # This is a variable. \nb = '4'\nprint(a+b) # This will be the same as the above cell.\n</pre> a = 3 # This is a variable.  b = '4' print(a+b) # This will be the same as the above cell. <pre>\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nInput In [3], in &lt;cell line: 3&gt;()\n      1 a = 3 # This is a variable. \n      2 b = '4'\n----&gt; 3 print(a+b)\n\nTypeError: unsupported operand type(s) for +: 'int' and 'str'</pre> In\u00a0[4]: Copied! <pre># print out several inputs with `,`\nprint(a, b)\n</pre> # print out several inputs with `,` print(a, b) <pre>3 4\n</pre> In\u00a0[7]: Copied! <pre>print(a + int(b)) # This will convert the string to a number.\nprint(str(a) + b) # This will convert the number to a string.\n</pre> print(a + int(b)) # This will convert the string to a number. print(str(a) + b) # This will convert the number to a string. <pre>7\n34\n</pre> In\u00a0[8]: Copied! <pre># Basic arithmetic operations\nprint('addition 1+1 = ', 1+1)\nprint('subtraction 5-1 = ', 5-1)\nprint('multiplication 2*2 = ', 2*2)\nprint('division 5/2 = ', 5/2)\nprint('modulus 5%2 = ', 5%2)\nprint('floor division 5//2 = ', 5//2)\nprint('exponentiation 5**2 = ', 5**2)\n</pre> # Basic arithmetic operations print('addition 1+1 = ', 1+1) print('subtraction 5-1 = ', 5-1) print('multiplication 2*2 = ', 2*2) print('division 5/2 = ', 5/2) print('modulus 5%2 = ', 5%2) print('floor division 5//2 = ', 5//2) print('exponentiation 5**2 = ', 5**2) <pre>addition 1+1 =  2\nsubtraction 5-1 =  4\nmultiplication 2*2 =  4\ndivision 5/2 =  2.5\nmodulus 5%2 =  1\nfloor division 5//2 =  2\nexponentiation 5**2 =  25\n</pre> In\u00a0[9]: Copied! <pre># Instead of using a new line, you can use a semicolon.\nprint('adsf'); print('asdf')\n</pre> # Instead of using a new line, you can use a semicolon. print('adsf'); print('asdf') <pre>adsf\nasdf\n</pre> <p>Basically, code cells are used to write code. However, we can also use code cells to write comments in markdown format. If you want to write in markdown format, right click around the cell and press <code>m</code>, then <code>Shift+Enter</code>. You go back to code format by pressing <code>y</code>. Moreover, you can add a new cell by pressing <code>a</code> or <code>b</code>(<code>a</code> is for above, <code>b</code> is for below). Others; <code>x</code>; cut a cell. <code>c</code> (Shift + <code>c</code> to copy multi cells); copy a cell. <code>v</code>; paste a cell. <code>z</code>; undo.</p> <p>Markdown usage</p> In\u00a0[10]: Copied! <pre>l = [3,4,5]\nindex = 0 # index starts with 0\nprint(l[index])\n\nl[1] = 7 # You can change the value of an element in a list.\nprint(l)\n</pre> l = [3,4,5] index = 0 # index starts with 0 print(l[index])  l[1] = 7 # You can change the value of an element in a list. print(l) <pre>3\n[3, 7, 5]\n</pre> In\u00a0[11]: Copied! <pre># You can use different types of data in a list.\nl = [3,4,5,'a','b','c', True, False, [1,2,3]]\n</pre> # You can use different types of data in a list. l = [3,4,5,'a','b','c', True, False, [1,2,3]] In\u00a0[1]: Copied! <pre>t = (3,4,5)\n\nt[2] = 7\n# You can't change the value of an element in a tuple.\n# However, a tuple uses less memory than a list.\n</pre> t = (3,4,5)  t[2] = 7 # You can't change the value of an element in a tuple. # However, a tuple uses less memory than a list. <pre>\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nInput In [1], in &lt;cell line: 3&gt;()\n      1 t = (3,4,5)\n----&gt; 3 t[2] = 7\n\nTypeError: 'tuple' object does not support item assignment</pre> In\u00a0[13]: Copied! <pre>s = {3,4,5,5}\nprint(s)\n</pre> s = {3,4,5,5} print(s) <pre>{3, 4, 5}\n</pre> In\u00a0[14]: Copied! <pre>d = {'a':3,'b':4,'c':5}\nprint(d['a'])\n\nd['a'] = 6 # You can change the value of an element in a dictionary.\nd['d'] = 7 # You can add a new key-value pair to a dictionary.\nprint(d)\n\nprint(d.items()) # This will return a list of all the key-value pairs in the dictionary.\nprint(d.keys()) # This will return a list of all the keys in the dictionary.\nprint(d.values()) # This will return a list of all the values in the dictionary.\n</pre> d = {'a':3,'b':4,'c':5} print(d['a'])  d['a'] = 6 # You can change the value of an element in a dictionary. d['d'] = 7 # You can add a new key-value pair to a dictionary. print(d)  print(d.items()) # This will return a list of all the key-value pairs in the dictionary. print(d.keys()) # This will return a list of all the keys in the dictionary. print(d.values()) # This will return a list of all the values in the dictionary. <pre>3\n{'a': 6, 'b': 4, 'c': 5, 'd': 7}\ndict_items([('a', 6), ('b', 4), ('c', 5), ('d', 7)])\ndict_keys(['a', 'b', 'c', 'd'])\ndict_values([6, 4, 5, 7])\n</pre> In\u00a0[15]: Copied! <pre>path = './sample.txt'\nwith open(path) as f:\n    l = f.readlines()\n    print(l)\n    for i in range(len(l)):\n        print(l[i])\n</pre> path = './sample.txt' with open(path) as f:     l = f.readlines()     print(l)     for i in range(len(l)):         print(l[i]) <pre>['One\\n', 'Two\\n', 'Three\\n']\nOne\n\nTwo\n\nThree\n\n</pre> In\u00a0[16]: Copied! <pre>for i in range(5):\n    print(i)\n# Index starts at 0.\n</pre> for i in range(5):     print(i) # Index starts at 0. <pre>0\n1\n2\n3\n4\n</pre> In\u00a0[17]: Copied! <pre>for i in range(5,10):\n    print(i)\n# Index starts at 5.\n# cf. range(5,13,2)\n</pre> for i in range(5,10):     print(i) # Index starts at 5. # cf. range(5,13,2) <pre>5\n6\n7\n8\n9\n</pre> In\u00a0[18]: Copied! <pre>items = ['a','b','c','d','e']\nfor i in items:\n    print(i)\n# You can use a for loop to iterate over a list, tuple, dictionary, string, and so on.\n\nprint('-------------------------------')\nfor i in range(len(items)):\n    print(items[i])\n</pre> items = ['a','b','c','d','e'] for i in items:     print(i) # You can use a for loop to iterate over a list, tuple, dictionary, string, and so on.  print('-------------------------------') for i in range(len(items)):     print(items[i]) <pre>a\nb\nc\nd\ne\n-------------------------------\na\nb\nc\nd\ne\n</pre> In\u00a0[19]: Copied! <pre>for i, item in enumerate(items):\n    print(i, item)\n</pre> for i, item in enumerate(items):     print(i, item) <pre>0 a\n1 b\n2 c\n3 d\n4 e\n</pre> In\u00a0[20]: Copied! <pre>for _ in range(5):\n    print('Hello')\n</pre> for _ in range(5):     print('Hello') <pre>Hello\nHello\nHello\nHello\nHello\n</pre> In\u00a0[21]: Copied! <pre>[i for i in range(5)]\n</pre> [i for i in range(5)] Out[21]: <pre>[0, 1, 2, 3, 4]</pre> In\u00a0[22]: Copied! <pre>data = [3,14,23,28,35,46,55,65,76,87,98,109,120,131,142]\n[x*10 for x in data]\n</pre> data = [3,14,23,28,35,46,55,65,76,87,98,109,120,131,142] [x*10 for x in data] Out[22]: <pre>[30, 140, 230, 280, 350, 460, 550, 650, 760, 870, 980, 1090, 1200, 1310, 1420]</pre> In\u00a0[23]: Copied! <pre>[x for x in data if x%2==0]\n</pre> [x for x in data if x%2==0] Out[23]: <pre>[14, 28, 46, 76, 98, 120, 142]</pre> In\u00a0[24]: Copied! <pre>[x if x&gt;50 else x*10 for x in data]\n</pre> [x if x&gt;50 else x*10 for x in data] Out[24]: <pre>[30, 140, 230, 280, 350, 460, 55, 65, 76, 87, 98, 109, 120, 131, 142]</pre> <p>You can use list comprehension like below but it is not recommended because it is hard to read.</p> In\u00a0[25]: Copied! <pre>import numpy as np # This is a module. NumPy is a package that contains many useful functions for working with arrays.\na = np.arange(1,51)\nfizz_buzz = ['fizzbuzz' if x%3==0 and x%5==0 else 'fizz' if x%3==0 else 'buzz' if x%5==0 else x for x in a]\nprint(fizz_buzz)\n</pre> import numpy as np # This is a module. NumPy is a package that contains many useful functions for working with arrays. a = np.arange(1,51) fizz_buzz = ['fizzbuzz' if x%3==0 and x%5==0 else 'fizz' if x%3==0 else 'buzz' if x%5==0 else x for x in a] print(fizz_buzz) <pre>[1, 2, 'fizz', 4, 'buzz', 'fizz', 7, 8, 'fizz', 'buzz', 11, 'fizz', 13, 14, 'fizzbuzz', 16, 17, 'fizz', 19, 'buzz', 'fizz', 22, 23, 'fizz', 'buzz', 26, 'fizz', 28, 29, 'fizzbuzz', 31, 32, 'fizz', 34, 'buzz', 'fizz', 37, 38, 'fizz', 'buzz', 41, 'fizz', 43, 44, 'fizzbuzz', 46, 47, 'fizz', 49, 'buzz']\n</pre> In\u00a0[26]: Copied! <pre>def print_hello():\n    print('Hello, world!')\n</pre> def print_hello():     print('Hello, world!') In\u00a0[27]: Copied! <pre>print_hello()\n</pre> print_hello() <pre>Hello, world!\n</pre> In\u00a0[28]: Copied! <pre>def myfunc(arg1, arg2):\n    for i in range(arg1):\n        print(arg2)\n\nmyfunc(3, 'Hello')\n# = myfunc(arg1=3, arg2='Hello')\n</pre> def myfunc(arg1, arg2):     for i in range(arg1):         print(arg2)  myfunc(3, 'Hello') # = myfunc(arg1=3, arg2='Hello') <pre>Hello\nHello\nHello\n</pre> In\u00a0[2]: Copied! <pre>import numpy as np # NumPy is a package that contains many useful functions for working with arrays.\nimport matplotlib.pyplot as plt # Matplotlib is a package that contains many useful functions for plotting.\n\nx = np.linspace(0,10, 100)\ny = np.sin(x)\n\nprint(x[:5])\nprint(y[:5])\n</pre> import numpy as np # NumPy is a package that contains many useful functions for working with arrays. import matplotlib.pyplot as plt # Matplotlib is a package that contains many useful functions for plotting.  x = np.linspace(0,10, 100) y = np.sin(x)  print(x[:5]) print(y[:5]) <pre>[0.        0.1010101 0.2020202 0.3030303 0.4040404]\n[0.         0.10083842 0.20064886 0.2984138  0.39313661]\n</pre> In\u00a0[3]: Copied! <pre>plt.plot(x,y)\nplt.title('sin')\nplt.show()\n</pre> plt.plot(x,y) plt.title('sin') plt.show() <p>$$ f(x) = x^2 $$</p> In\u00a0[32]: Copied! <pre>f = lambda x: x**2\n\nprint(f(3))\n</pre> f = lambda x: x**2  print(f(3)) <pre>9\n</pre>"},{"location":"pages/python-ipynb/basics/#python-and-jupyterlab","title":"Python and Jupyterlab\u00b6","text":"<p>Python is a clear and powerful object-oriented programming language. - python doc</p> <p>JupyterLab is a flexible, extensible interface for interactive computing. - jupyter doc</p> <p>Python is a simple and most popular programming language and used in many fields like AI and machine learning, Data analytics, Data visualization, Web, Game, and so on.</p> <p>JupyterLab is a next-generation web-based user interface for python programming.</p> <p>Here, you can learn basics of python and usage of JupyterLab. If you have not installed jupyter-lab, refer to venv.</p>"},{"location":"pages/python-ipynb/basics/#print-function","title":"print() function\u00b6","text":"<p><code>print()</code> function is the most basic function in python. It is used to print the value of any variable or expression. Here, we will see how to use <code>print()</code> function with the usage of jupyter lab(notebook).</p>"},{"location":"pages/python-ipynb/basics/#comment","title":"comment\u00b6","text":""},{"location":"pages/python-ipynb/basics/#arithmetic-operations","title":"Arithmetic operations\u00b6","text":""},{"location":"pages/python-ipynb/basics/#jupyter-lab-usage","title":"jupyter lab usage\u00b6","text":""},{"location":"pages/python-ipynb/basics/#collectionslist-tuple-set-dictionary","title":"Collections(list, tuple, set, dictionary)\u00b6","text":"<p>List, tuple, set, dictionary are used to store data in different ways.</p>"},{"location":"pages/python-ipynb/basics/#open-a-file","title":"Open a file\u00b6","text":""},{"location":"pages/python-ipynb/basics/#for-loops","title":"For loops\u00b6","text":"<p><code>for loop</code> is used to iterate over a collection of items.</p>"},{"location":"pages/python-ipynb/basics/#comprehension","title":"Comprehension\u00b6","text":""},{"location":"pages/python-ipynb/basics/#functions","title":"Functions\u00b6","text":"<p><code>function</code> is a block of code which take inputs and returns outputs. It only runs when it is called. Actually, most code we write consists of functions.</p>"},{"location":"pages/python-ipynb/basics/#lambda-functions","title":"lambda functions\u00b6","text":""},{"location":"pages/python-ipynb/basics/#reference","title":"Reference\u00b6","text":"<p>Python Beginners Guide</p>"},{"location":"pages/python-ipynb/matplotlib/","title":"Matplotlib","text":"In\u00a0[2]: Copied! <pre>import matplotlib.pyplot as plt\nimport numpy as np\n</pre> import matplotlib.pyplot as plt import numpy as np In\u00a0[16]: Copied! <pre># make a square function\ndef square(x):\n    return x**2\n\n# Make x and y values.\n# np.linxpace() is a function that returns evenly spaced numbers over a specified interval.\n# We use it to make x values from -5 to 5 with 100 points in between.\nx = np.linspace(-5, 5, 100)\ny = square(x)\n</pre> # make a square function def square(x):     return x**2  # Make x and y values. # np.linxpace() is a function that returns evenly spaced numbers over a specified interval. # We use it to make x values from -5 to 5 with 100 points in between. x = np.linspace(-5, 5, 100) y = square(x) In\u00a0[17]: Copied! <pre># plot the function. ` plt` is an alias for `matplotlib.pyplot`.\nplt.plot(x, y)\nplt.show()\n</pre> # plot the function. ` plt` is an alias for `matplotlib.pyplot`. plt.plot(x, y) plt.show() In\u00a0[18]: Copied! <pre># plot the function. ` plt` is an alias for `matplotlib.pyplot`.\nplt.plot(x, y)\n\n# Add labels to the axes\nplt.xlabel('x')\nplt.ylabel('y')\n\n# Add a title\nplt.title('Square function')\n\nplt.show()\n</pre> # plot the function. ` plt` is an alias for `matplotlib.pyplot`. plt.plot(x, y)  # Add labels to the axes plt.xlabel('x') plt.ylabel('y')  # Add a title plt.title('Square function')  plt.show() In\u00a0[19]: Copied! <pre>x = np.linspace(-5, 5, 10)\ny = square(x)\n\n# You can specify the color, marker, and line style in the plot function as below.\nplt.plot(x, y, color='red', marker='o', linestyle='--', label='label')\n\n# Show the legend. It uses the `label` defined in the `plot()` function.\nplt.legend()\n\n# Add labels to the axes\nplt.xlabel('x')\nplt.ylabel('y')\n\n# Add a title\nplt.title('Square function')\n\nplt.show()\n</pre> x = np.linspace(-5, 5, 10) y = square(x)  # You can specify the color, marker, and line style in the plot function as below. plt.plot(x, y, color='red', marker='o', linestyle='--', label='label')  # Show the legend. It uses the `label` defined in the `plot()` function. plt.legend()  # Add labels to the axes plt.xlabel('x') plt.ylabel('y')  # Add a title plt.title('Square function')  plt.show() <p>Add cube function plot.</p> In\u00a0[69]: Copied! <pre>def cube(x):\n    return x**3\n</pre> def cube(x):     return x**3 In\u00a0[70]: Copied! <pre>x = np.linspace(-3, 3, 10)\ny = square(x)\nz = cube(x)\n\n# You can specify the color, marker, and line style in the plot function as below.\nplt.plot(x, y, color='red', marker='o', linestyle='--', label='Square')\nplt.plot(x, z, color='blue', marker='x', linestyle='-', label='Cube')\n\n# Show the legend. It uses the `label` defined in the `plot()` function\nplt.legend() \n\n# Add labels to the axes\nplt.xlabel('x')\nplt.ylabel('y')\n\n# Add a title\nplt.title('Square and cube functions')\n\nplt.show()\n</pre> x = np.linspace(-3, 3, 10) y = square(x) z = cube(x)  # You can specify the color, marker, and line style in the plot function as below. plt.plot(x, y, color='red', marker='o', linestyle='--', label='Square') plt.plot(x, z, color='blue', marker='x', linestyle='-', label='Cube')  # Show the legend. It uses the `label` defined in the `plot()` function plt.legend()   # Add labels to the axes plt.xlabel('x') plt.ylabel('y')  # Add a title plt.title('Square and cube functions')  plt.show() In\u00a0[71]: Copied! <pre>x = np.linspace(0.1, 10, 10)\ny = square(x)\nz = cube(x)\n\n# You can specify the color, marker, and line style in the plot function as below.\nplt.semilogy(x, y, color='red', marker='o', linestyle='--', label='Square')\nplt.semilogy(x, z, color='blue', marker='x', linestyle='-', label='Cube')\n\n# Show the legend. It uses the `label` defined in the `plot()` function\nplt.legend() \n\n# Add labels to the axes\nplt.xlabel('x')\nplt.ylabel('y')\n\n# Add a title\nplt.title('Square and cube functions')\n\nplt.show()\n</pre> x = np.linspace(0.1, 10, 10) y = square(x) z = cube(x)  # You can specify the color, marker, and line style in the plot function as below. plt.semilogy(x, y, color='red', marker='o', linestyle='--', label='Square') plt.semilogy(x, z, color='blue', marker='x', linestyle='-', label='Cube')  # Show the legend. It uses the `label` defined in the `plot()` function plt.legend()   # Add labels to the axes plt.xlabel('x') plt.ylabel('y')  # Add a title plt.title('Square and cube functions')  plt.show() In\u00a0[6]: Copied! <pre>x = np.linspace(-5, 5, 10)\ny = np.exp(x)\n\n# You can specify the color, marker, and line style in the plot function as below.\nplt.semilogy(x, y, label='Exponential')\n\n# Show the legend. It uses the `label` defined in the `plot()` function\nplt.legend() \n\n# Add labels to the axes\nplt.xlabel('x')\nplt.ylabel('exp(x)')\n\n# Add a title\nplt.title('Exponential function')\n\nplt.show()\n</pre> x = np.linspace(-5, 5, 10) y = np.exp(x)  # You can specify the color, marker, and line style in the plot function as below. plt.semilogy(x, y, label='Exponential')  # Show the legend. It uses the `label` defined in the `plot()` function plt.legend()   # Add labels to the axes plt.xlabel('x') plt.ylabel('exp(x)')  # Add a title plt.title('Exponential function')  plt.show() In\u00a0[41]: Copied! <pre># Scatter plot\nx = np.linspace(-5, 5, 20)\ny = square(x)\n\nplt.scatter(x, y)\nplt.show()\n</pre> # Scatter plot x = np.linspace(-5, 5, 20) y = square(x)  plt.scatter(x, y) plt.show() In\u00a0[10]: Copied! <pre>np.random.seed(0)\n\n# Scatter plot: gaussian distribution with mean 0 and standard deviation 1\nx = np.random.normal(size=1000)\ny = np.random.normal(size=1000)\n\nplt.scatter(x, y)\nplt.show()\n</pre> np.random.seed(0)  # Scatter plot: gaussian distribution with mean 0 and standard deviation 1 x = np.random.normal(size=1000) y = np.random.normal(size=1000)  plt.scatter(x, y) plt.show() Out[10]: <pre>&lt;matplotlib.collections.PathCollection at 0x12243ab20&gt;</pre> In\u00a0[52]: Copied! <pre>np.random.seed(0)\n\n# Generate 10000 random numbers from a normal distribution with mean 0 and standard deviation 1.\n\nx = np.random.normal(0, 1, 10000)\n\n# Plot a histogram with 50 bins.\nplt.hist(x, bins=50)\nplt.show()\n</pre> np.random.seed(0)  # Generate 10000 random numbers from a normal distribution with mean 0 and standard deviation 1.  x = np.random.normal(0, 1, 10000)  # Plot a histogram with 50 bins. plt.hist(x, bins=50) plt.show() In\u00a0[65]: Copied! <pre>np.random.seed(0)\n\n# Generate 10000 random numbers from a normal distribution with mean 0 and standard deviation 1.\nx = np.random.normal(0, 1, 10000)\n# Generate 10000 random numbers from a normal distribution with mean 2 and standard deviation 0.5.\ny = np.random.normal(2, 0.5, 10000)\n\n# Plot a histogram with 50 bins.\n# `alpha` is the transparency of the bars. used to compare several histograms.\nplt.hist(x, bins=50, color='blue', alpha=0.5, label='x')\nplt.hist(y, bins=50, color='green', alpha=0.5, label='y')\n\n# Show the legend. It uses the `label` defined in the `hist()` function.\nplt.legend()\n\n# Add labels to the axes\nplt.xlabel('value')\nplt.ylabel('count')\n\n# Add a title\nplt.title('Histogram')\n\nplt.show()\n</pre> np.random.seed(0)  # Generate 10000 random numbers from a normal distribution with mean 0 and standard deviation 1. x = np.random.normal(0, 1, 10000) # Generate 10000 random numbers from a normal distribution with mean 2 and standard deviation 0.5. y = np.random.normal(2, 0.5, 10000)  # Plot a histogram with 50 bins. # `alpha` is the transparency of the bars. used to compare several histograms. plt.hist(x, bins=50, color='blue', alpha=0.5, label='x') plt.hist(y, bins=50, color='green', alpha=0.5, label='y')  # Show the legend. It uses the `label` defined in the `hist()` function. plt.legend()  # Add labels to the axes plt.xlabel('value') plt.ylabel('count')  # Add a title plt.title('Histogram')  plt.show() In\u00a0[39]: Copied! <pre>import matplotlib.pyplot as plt\nimport numpy as np\n\nyear = (\"2003\", \"2013\", \"2023\")\ngdps = {\n    'Japan': (4519.56, 5212.33, 4409.74),\n    'China': (1656.96, 9624.93, 19373.59),\n    'America': (11456.45, 16843.23, 26854.60),\n}\n\nx = np.arange(len(year)) * 1  # the label locations\nwidth = 0.3  # the width of the bars\nmultiplier = 0\n\nfig, ax = plt.subplots(layout='constrained')\n\nfor country, gdp in gdps.items():\n    offset = width * multiplier\n    rects = ax.bar(x + offset, gdp, width, label=country)\n    ax.bar_label(rects, padding=3)\n    multiplier += 1\n\n\nax.set_ylabel('GDP (billion USD)')\nax.set_title('GDP')\nax.set_xticks(x + width, year)\nax.legend(loc='upper left', ncols=3)\n\nplt.show()\n</pre> import matplotlib.pyplot as plt import numpy as np  year = (\"2003\", \"2013\", \"2023\") gdps = {     'Japan': (4519.56, 5212.33, 4409.74),     'China': (1656.96, 9624.93, 19373.59),     'America': (11456.45, 16843.23, 26854.60), }  x = np.arange(len(year)) * 1  # the label locations width = 0.3  # the width of the bars multiplier = 0  fig, ax = plt.subplots(layout='constrained')  for country, gdp in gdps.items():     offset = width * multiplier     rects = ax.bar(x + offset, gdp, width, label=country)     ax.bar_label(rects, padding=3)     multiplier += 1   ax.set_ylabel('GDP (billion USD)') ax.set_title('GDP') ax.set_xticks(x + width, year) ax.legend(loc='upper left', ncols=3)  plt.show() In\u00a0[19]: Copied! <pre>import matplotlib.pyplot as plt\nimport numpy as np\n\nt = np.linspace(0, 2 * np.pi, 1024)\ndata2d = np.sin(t)[:, np.newaxis] * np.sin(t)[np.newaxis, :]\n\nfig, ax = plt.subplots()\nim = ax.imshow(data2d)\n\nfig.colorbar(im, ax=ax, label='Colorbar')\n\nax.set_title('sin(x)sin(y)')\nplt.show()\n</pre> import matplotlib.pyplot as plt import numpy as np  t = np.linspace(0, 2 * np.pi, 1024) data2d = np.sin(t)[:, np.newaxis] * np.sin(t)[np.newaxis, :]  fig, ax = plt.subplots() im = ax.imshow(data2d)  fig.colorbar(im, ax=ax, label='Colorbar')  ax.set_title('sin(x)sin(y)') plt.show() In\u00a0[53]: Copied! <pre>def pos(t):\n    \n    x = np.exp(-t) * np.cos(10 * np.pi * t)\n    y = np.exp(-t) * np.sin(10 * np.pi * t)\n    z = t\n    \n    return x, y, z\n\nt = np.linspace(0, 2, 1000)\n\nx, y, z = pos(t)\n\nfig = plt.figure(figsize=(6, 6))\nax = fig.add_subplot(projection='3d')\n\nax.plot(x, y, z, label='parametric curve')\n\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('z')\n\nax.set_title(\"3D Parametric Curve\")\nplt.show()\n</pre> def pos(t):          x = np.exp(-t) * np.cos(10 * np.pi * t)     y = np.exp(-t) * np.sin(10 * np.pi * t)     z = t          return x, y, z  t = np.linspace(0, 2, 1000)  x, y, z = pos(t)  fig = plt.figure(figsize=(6, 6)) ax = fig.add_subplot(projection='3d')  ax.plot(x, y, z, label='parametric curve')  ax.set_xlabel('x') ax.set_ylabel('y') ax.set_zlabel('z')  ax.set_title(\"3D Parametric Curve\") plt.show() In\u00a0[47]: Copied! <pre>import matplotlib.pyplot as plt\nfrom matplotlib import cm\nfrom matplotlib.ticker import LinearLocator\nimport numpy as np\n\nfig, ax = plt.subplots(subplot_kw={\"projection\": \"3d\"})\n\n# Make data.\nX = np.arange(-5, 5, 0.05)\nY = np.arange(-5, 5, 0.05)\nX, Y = np.meshgrid(X, Y)\nZ = np.sin(X) * np.cos(Y)\n\n# Plot the surface.\nsurf = ax.plot_surface(X, Y, Z, cmap=cm.coolwarm, linewidth=0, antialiased=False)\n\n# Customize the z axis.\nax.set_zlim(-1.01, 1.01)\nax.zaxis.set_major_locator(LinearLocator(5))\nax.zaxis.set_major_formatter('{x:.02f}')\n\n# Add a color bar which maps values to colors.\nfig.colorbar(surf, shrink=0.5, aspect=9)\n\nplt.show()\n</pre> import matplotlib.pyplot as plt from matplotlib import cm from matplotlib.ticker import LinearLocator import numpy as np  fig, ax = plt.subplots(subplot_kw={\"projection\": \"3d\"})  # Make data. X = np.arange(-5, 5, 0.05) Y = np.arange(-5, 5, 0.05) X, Y = np.meshgrid(X, Y) Z = np.sin(X) * np.cos(Y)  # Plot the surface. surf = ax.plot_surface(X, Y, Z, cmap=cm.coolwarm, linewidth=0, antialiased=False)  # Customize the z axis. ax.set_zlim(-1.01, 1.01) ax.zaxis.set_major_locator(LinearLocator(5)) ax.zaxis.set_major_formatter('{x:.02f}')  # Add a color bar which maps values to colors. fig.colorbar(surf, shrink=0.5, aspect=9)  plt.show()"},{"location":"pages/python-ipynb/matplotlib/#matplotlib","title":"Matplotlib\u00b6","text":"<p>Matplotlib is a comprehensive library for creating static, animated, and interactive visualizations in Python. - Matplotlib</p>"},{"location":"pages/python-ipynb/matplotlib/#1-plot-a-line","title":"1. Plot a line\u00b6","text":""},{"location":"pages/python-ipynb/matplotlib/#change-color-marker-style-and-line-style","title":"Change color, marker style and line style\u00b6","text":""},{"location":"pages/python-ipynb/matplotlib/#pltsemilogy-plots-the-y-axis-in-log-scale","title":"<code>plt.semilogy</code> plots the y-axis in log scale.\u00b6","text":""},{"location":"pages/python-ipynb/matplotlib/#2-scatter-plot","title":"2. Scatter plot\u00b6","text":""},{"location":"pages/python-ipynb/matplotlib/#3-histogram","title":"3. Histogram\u00b6","text":""},{"location":"pages/python-ipynb/matplotlib/#add-another-histogram","title":"Add another histogram\u00b6","text":""},{"location":"pages/python-ipynb/matplotlib/#5-2d-plots","title":"5. 2D plots\u00b6","text":""},{"location":"pages/python-ipynb/matplotlib/#6-3d-line-plots","title":"6. 3D line plots\u00b6","text":""},{"location":"pages/python-ipynb/matplotlib/#7-3d-surface-plot","title":"7. 3D surface plot\u00b6","text":""},{"location":"pages/python-ipynb/numpy/","title":"Numpy","text":"In\u00a0[1]: Copied! <pre>import numpy as np\n</pre> import numpy as np <p>A basic way to create an array is to use the function <code>np.array()</code>. It takes a list as an argument and returns a numpy array.</p> In\u00a0[2]: Copied! <pre>a = np.array([1, 2, 3])\nprint(a)\n</pre> a = np.array([1, 2, 3]) print(a) <pre>[1 2 3]\n</pre> <p>In numpy, there are many methods to create arrays. For example, <code>np.arange()</code> creates an array of integers, <code>np.zeros()</code> creates an array of zeros, and <code>np.ones()</code> creates an array of ones.</p> In\u00a0[3]: Copied! <pre>np.arange(10)\n</pre> np.arange(10) Out[3]: <pre>array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</pre> In\u00a0[4]: Copied! <pre>np.arange(1, 10, 2)\n</pre> np.arange(1, 10, 2) Out[4]: <pre>array([1, 3, 5, 7, 9])</pre> In\u00a0[5]: Copied! <pre>np.zeros(10)\n</pre> np.zeros(10) Out[5]: <pre>array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])</pre> In\u00a0[6]: Copied! <pre>np.zeros((3, 5))\n</pre> np.zeros((3, 5)) Out[6]: <pre>array([[0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0.],\n       [0., 0., 0., 0., 0.]])</pre> In\u00a0[7]: Copied! <pre>np.ones(10)\n</pre> np.ones(10) Out[7]: <pre>array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])</pre> In\u00a0[8]: Copied! <pre>np.ones((3, 5))\n</pre> np.ones((3, 5)) Out[8]: <pre>array([[1., 1., 1., 1., 1.],\n       [1., 1., 1., 1., 1.],\n       [1., 1., 1., 1., 1.]])</pre> <p><code>np.random.??</code> makes random arrays.</p> <p><code>np.random.rand()</code> makes an array of random numbers from the uniform distribution between 0 and 1.</p> <p><code>np.random.randn()</code> makes an array of random numbers from the standard normal distribution.</p> <p><code>np.random.randint(low, high, size)</code> makes an array of random integers between low and high.</p> <p><code>np.random.choice(a, size, replace=True, p=None)</code> makes an array of random numbers from the list a.</p> In\u00a0[9]: Copied! <pre>np.random.seed(0)\n\nprint(\"np.random.rand(5) = \", np.random.rand(5), sep=\"\\n\", end=\"\\n\\n\")\n\nprint(\"np.random.randn(5) = \", np.random.randn(5), sep=\"\\n\", end=\"\\n\\n\")\n\nprint(\"np.random.rand(3, 5) = \", np.random.rand(3, 5), sep=\"\\n\", end=\"\\n\\n\")\n\nprint(\"np.random.randint(low=1, high=10, size=5) = \", np.random.randint(low=1, high=10, size=5), end=\"\\n\\n\")\n\nprint(\"np.random.randint(10) = \", np.random.randint(10), end=\"\\n\\n\")\n\nprint(\"np.random.randint(1, 10, (3, 5)) = \", np.random.randint(1, 10, (3, 5)), sep=\"\\n\")\n\nprint(\"np.random.choice(['a', 'b', 'c'], 10) = \", np.random.choice([\"a\", \"b\", \"c\"], 10), sep=\"\\n\", end=\"\\n\\n\")\n</pre> np.random.seed(0)  print(\"np.random.rand(5) = \", np.random.rand(5), sep=\"\\n\", end=\"\\n\\n\")  print(\"np.random.randn(5) = \", np.random.randn(5), sep=\"\\n\", end=\"\\n\\n\")  print(\"np.random.rand(3, 5) = \", np.random.rand(3, 5), sep=\"\\n\", end=\"\\n\\n\")  print(\"np.random.randint(low=1, high=10, size=5) = \", np.random.randint(low=1, high=10, size=5), end=\"\\n\\n\")  print(\"np.random.randint(10) = \", np.random.randint(10), end=\"\\n\\n\")  print(\"np.random.randint(1, 10, (3, 5)) = \", np.random.randint(1, 10, (3, 5)), sep=\"\\n\")  print(\"np.random.choice(['a', 'b', 'c'], 10) = \", np.random.choice([\"a\", \"b\", \"c\"], 10), sep=\"\\n\", end=\"\\n\\n\") <pre>np.random.rand(5) = \n[0.0792551  0.98878842 0.06457767 0.14249155 0.73509849]\n\nnp.random.randn(5) = \n[-0.80824882 -0.87316691  0.66972569 -1.18611885 -0.50760132]\n\nnp.random.rand(3, 5) = \n[[0.59582475 0.7880336  0.61458653 0.37084648 0.30397991]\n [0.44289532 0.22911911 0.94453062 0.12846585 0.59025445]\n [0.46501396 0.45277633 0.83730405 0.32281594 0.4545275 ]]\n\nnp.random.randint(low=1, high=10, size=5) =  [2 4 4 3 7]\n\nnp.random.randint(10) =  3\n\nnp.random.randint(1, 10, (3, 5)) = \n[[5 6 6 6 2]\n [6 9 9 5 1]\n [1 7 8 7 5]]\nnp.random.choice(['a', 'b', 'c'], 10) = \n['c' 'a' 'a' 'b' 'b' 'c' 'a' 'b' 'c' 'b']\n\n</pre> <p><code>np.linspace(start, stop, num, endpoint=True)</code> creates an array of evenly spaced numbers over a specified interval. This can be useful for plotting functions.</p> In\u00a0[10]: Copied! <pre>np.linspace(0, 1, 6)\n</pre> np.linspace(0, 1, 6) Out[10]: <pre>array([0. , 0.2, 0.4, 0.6, 0.8, 1. ])</pre> <p><code>np.eye()</code> creates an matrix with ones on the diagonal and zeros elsewhere. You can also make non-square identity matrices by specifying the number of rows and columns.</p> In\u00a0[11]: Copied! <pre>np.eye(3, 5)\n</pre> np.eye(3, 5) Out[11]: <pre>array([[1., 0., 0., 0., 0.],\n       [0., 1., 0., 0., 0.],\n       [0., 0., 1., 0., 0.]])</pre> In\u00a0[12]: Copied! <pre>np.eye(5)  # This is the same as np.identity(5)\n</pre> np.eye(5)  # This is the same as np.identity(5) Out[12]: <pre>array([[1., 0., 0., 0., 0.],\n       [0., 1., 0., 0., 0.],\n       [0., 0., 1., 0., 0.],\n       [0., 0., 0., 1., 0.],\n       [0., 0., 0., 0., 1.]])</pre> In\u00a0[13]: Copied! <pre>np.identity(5)\n</pre> np.identity(5) Out[13]: <pre>array([[1., 0., 0., 0., 0.],\n       [0., 1., 0., 0., 0.],\n       [0., 0., 1., 0., 0.],\n       [0., 0., 0., 1., 0.],\n       [0., 0., 0., 0., 1.]])</pre> <p><code>np.emtpy()</code> creates an array of uninitialized (arbitrary) data of the given shape and dtype. It is used when you want to create an array and then fill it with data later. It is faster than creating an array of zeros or ones using <code>np.zeros()</code> or <code>np.ones()</code>.</p> In\u00a0[14]: Copied! <pre>np.empty(10)\n</pre> np.empty(10) Out[14]: <pre>array([1.e-323, 0.e+000, 0.e+000, 5.e-324, 5.e-324, 1.e-323, 0.e+000,\n       5.e-324, 1.e-323, 5.e-324])</pre> <p><code>np.zeros_like(()</code>, <code>np.ones_like()</code>, <code>np.empty_like()</code> create arrays of zeros, ones, or uninitialized data with the same shape and dtype as the given array.</p> In\u00a0[15]: Copied! <pre>a = np.array([[1, 2, 3], [4, 5, 6]])\n\nnp.zeros_like(a)\n</pre> a = np.array([[1, 2, 3], [4, 5, 6]])  np.zeros_like(a) Out[15]: <pre>array([[0, 0, 0],\n       [0, 0, 0]])</pre> In\u00a0[16]: Copied! <pre>np.full((3, 5), 3)\n</pre> np.full((3, 5), 3) Out[16]: <pre>array([[3, 3, 3, 3, 3],\n       [3, 3, 3, 3, 3],\n       [3, 3, 3, 3, 3]])</pre> In\u00a0[17]: Copied! <pre>np.fromfunction(lambda i, j: i + j, (3, 5))\n</pre> np.fromfunction(lambda i, j: i + j, (3, 5)) Out[17]: <pre>array([[0., 1., 2., 3., 4.],\n       [1., 2., 3., 4., 5.],\n       [2., 3., 4., 5., 6.]])</pre> In\u00a0[18]: Copied! <pre># Append 4 to a\na = np.array([1, 2, 3])\nb = np.append(a, 4)\nprint(b)\n</pre> # Append 4 to a a = np.array([1, 2, 3]) b = np.append(a, 4) print(b) <pre>[1 2 3 4]\n</pre> In\u00a0[19]: Copied! <pre># Delete a[1]\na = np.array([1, 2, 3])\nb = np.delete(a, 1)\nprint(b)\n</pre> # Delete a[1] a = np.array([1, 2, 3]) b = np.delete(a, 1) print(b) <pre>[1 3]\n</pre> In\u00a0[20]: Copied! <pre># Sort a\na = np.array([3, 2, 1])\nb = np.sort(a)\nprint(b)\n</pre> # Sort a a = np.array([3, 2, 1]) b = np.sort(a) print(b) <pre>[1 2 3]\n</pre> In\u00a0[21]: Copied! <pre># Concatenate two arrays\na = np.array([1, 2, 3])\nb = np.array([4, 5, 6])\nc = np.concatenate((a, b))\nprint(c)\n</pre> # Concatenate two arrays a = np.array([1, 2, 3]) b = np.array([4, 5, 6]) c = np.concatenate((a, b)) print(c) <pre>[1 2 3 4 5 6]\n</pre> In\u00a0[22]: Copied! <pre># Reshape an array\na = np.array([1, 2, 3, 4, 5, 6])\nprint(\"a.shape \", a.shape)\nb = a.reshape(2, 3)\nprint(\"b = \", b)\nprint(\"b.shape \", b.shape)\n</pre> # Reshape an array a = np.array([1, 2, 3, 4, 5, 6]) print(\"a.shape \", a.shape) b = a.reshape(2, 3) print(\"b = \", b) print(\"b.shape \", b.shape) <pre>a.shape  (6,)\nb =  [[1 2 3]\n [4 5 6]]\nb.shape  (2, 3)\n</pre> In\u00a0[23]: Copied! <pre># Conditional selection\na = np.array([1, 2, 3, 4, 5, 6])\nprint(a &gt; 3)\nprint(a[a &gt; 3])\n</pre> # Conditional selection a = np.array([1, 2, 3, 4, 5, 6]) print(a &gt; 3) print(a[a &gt; 3]) <pre>[False False False  True  True  True]\n[4 5 6]\n</pre> In\u00a0[24]: Copied! <pre># Slice an array\na = np.array([1, 2, 3, 4, 5, 6])\n# print from a[1] to a[3], not including a[4](=5)\nprint(a[1:4])\n</pre> # Slice an array a = np.array([1, 2, 3, 4, 5, 6]) # print from a[1] to a[3], not including a[4](=5) print(a[1:4]) <pre>[2 3 4]\n</pre> In\u00a0[25]: Copied! <pre>a = np.array([1, 2, 3, 4])\nb = np.array([5, 6, 7, 8])\n\n# Addition\nprint(a + b)\n\n# Subtraction\nprint(a - b)\n\n# Multiplication\nprint(a * b)\n\n# Division\nprint(a / b)\n</pre> a = np.array([1, 2, 3, 4]) b = np.array([5, 6, 7, 8])  # Addition print(a + b)  # Subtraction print(a - b)  # Multiplication print(a * b)  # Division print(a / b) <pre>[ 6  8 10 12]\n[-4 -4 -4 -4]\n[ 5 12 21 32]\n[0.2        0.33333333 0.42857143 0.5       ]\n</pre> In\u00a0[26]: Copied! <pre>a = np.array([1, 2, 3, 4])\n\n# Add a scalar to each element\nprint(\"a + 2 = \", a + 2)\n\n# Subtract a scalar from each element\nprint(\"a - 2 = \", a - 2)\n\n# Multiply a scalar to each element\nprint(\"a * 2 = \", a * 2)\n\n# Divide each element by a scalar\nprint(\"a / 2 = \", a / 2)\n\n# Take the square root of each element\nprint(\"a ** 0.5 = \", np.sqrt(a))\n\n# Take the square of each element\nprint(\"a ** 2 = \", a**2)\n\n# Take the log of each element\nprint(\"np.log(a) = \", np.log(a))\n\n# Take the exponential of each element\nprint(\"np.exp(a) = \", np.exp(a))\n\n# Take the sin of each element\nprint(\"np.sin(a) = \", np.sin(a))\n\n# Take the cos of each element\nprint(\"np.cos(a) = \", np.cos(a))\n</pre> a = np.array([1, 2, 3, 4])  # Add a scalar to each element print(\"a + 2 = \", a + 2)  # Subtract a scalar from each element print(\"a - 2 = \", a - 2)  # Multiply a scalar to each element print(\"a * 2 = \", a * 2)  # Divide each element by a scalar print(\"a / 2 = \", a / 2)  # Take the square root of each element print(\"a ** 0.5 = \", np.sqrt(a))  # Take the square of each element print(\"a ** 2 = \", a**2)  # Take the log of each element print(\"np.log(a) = \", np.log(a))  # Take the exponential of each element print(\"np.exp(a) = \", np.exp(a))  # Take the sin of each element print(\"np.sin(a) = \", np.sin(a))  # Take the cos of each element print(\"np.cos(a) = \", np.cos(a)) <pre>a + 2 =  [3 4 5 6]\na - 2 =  [-1  0  1  2]\na * 2 =  [2 4 6 8]\na / 2 =  [0.5 1.  1.5 2. ]\na ** 0.5 =  [1.         1.41421356 1.73205081 2.        ]\na ** 2 =  [ 1  4  9 16]\nnp.log(a) =  [0.         0.69314718 1.09861229 1.38629436]\nnp.exp(a) =  [ 2.71828183  7.3890561  20.08553692 54.59815003]\nnp.sin(a) =  [ 0.84147098  0.90929743  0.14112001 -0.7568025 ]\nnp.cos(a) =  [ 0.54030231 -0.41614684 -0.9899925  -0.65364362]\n</pre> In\u00a0[27]: Copied! <pre>a = np.array([1, 2, 3, 4, 5])\n\n# Maximum\nprint(\"max = \", a.max())\n\n# Minimum\nprint(\"min = \", a.min())\n\n# Argmax\nprint(\"argmax = \", a.argmax())\n\n# Argmin\nprint(\"argmin = \", a.argmin())\n\n# Sum\nprint(\"sum = \", a.sum())\n\n# Mean\nprint(\"mean = \", a.mean())\n\n# Standard deviation\nprint(\"std = \", a.std())\n\n# Variance\nprint(\"var = \", a.var())\n</pre> a = np.array([1, 2, 3, 4, 5])  # Maximum print(\"max = \", a.max())  # Minimum print(\"min = \", a.min())  # Argmax print(\"argmax = \", a.argmax())  # Argmin print(\"argmin = \", a.argmin())  # Sum print(\"sum = \", a.sum())  # Mean print(\"mean = \", a.mean())  # Standard deviation print(\"std = \", a.std())  # Variance print(\"var = \", a.var()) <pre>max =  5\nmin =  1\nargmax =  4\nargmin =  0\nsum =  15\nmean =  3.0\nstd =  1.4142135623730951\nvar =  2.0\n</pre> In\u00a0[28]: Copied! <pre># Dot product\na = np.array([1, 2, 3, 4])\nb = np.array([5, 6, 7, 8])\nprint(np.dot(a, b))\n</pre> # Dot product a = np.array([1, 2, 3, 4]) b = np.array([5, 6, 7, 8]) print(np.dot(a, b)) <pre>70\n</pre> In\u00a0[29]: Copied! <pre>a = np.array([[1, 2, 3], [4, 5, 6]])\nb = np.array([[7, 8], [9, 10], [11, 12]])\n\n# Matrix multiplication\nprint(np.dot(a, b), end=\"\\n\\n\")\n\nprint(a.dot(b), end=\"\\n\\n\")\n\nprint(a @ b, end=\"\\n\\n\")\n</pre> a = np.array([[1, 2, 3], [4, 5, 6]]) b = np.array([[7, 8], [9, 10], [11, 12]])  # Matrix multiplication print(np.dot(a, b), end=\"\\n\\n\")  print(a.dot(b), end=\"\\n\\n\")  print(a @ b, end=\"\\n\\n\") <pre>[[ 58  64]\n [139 154]]\n\n[[ 58  64]\n [139 154]]\n\n[[ 58  64]\n [139 154]]\n\n</pre> In\u00a0[30]: Copied! <pre>a = np.array([[1, 2, 3], [4, 6, 8], [7, 11, 13]])\n\n# Transpose\nprint(\"a.T = \", a.T, sep=\"\\n\", end=\"\\n\\n\")\n\n# Trace\nprint(\"np.trace(a) = \", np.trace(a), end=\"\\n\\n\")\n\n# Determinant\nprint(\"np.linalg.det(a) = \", np.linalg.det(a), end=\"\\n\\n\")\n\n# Inverse\nprint(\"np.linalg.inv(a) = \", np.linalg.inv(a), sep=\"\\n\", end=\"\\n\\n\")\n</pre> a = np.array([[1, 2, 3], [4, 6, 8], [7, 11, 13]])  # Transpose print(\"a.T = \", a.T, sep=\"\\n\", end=\"\\n\\n\")  # Trace print(\"np.trace(a) = \", np.trace(a), end=\"\\n\\n\")  # Determinant print(\"np.linalg.det(a) = \", np.linalg.det(a), end=\"\\n\\n\")  # Inverse print(\"np.linalg.inv(a) = \", np.linalg.inv(a), sep=\"\\n\", end=\"\\n\\n\") <pre>a.T = \n[[ 1  4  7]\n [ 2  6 11]\n [ 3  8 13]]\n\nnp.trace(a) =  20\n\nnp.linalg.det(a) =  3.999999999999999\n\nnp.linalg.inv(a) = \n[[-2.5   1.75 -0.5 ]\n [ 1.   -2.    1.  ]\n [ 0.5   0.75 -0.5 ]]\n\n</pre> <p><code>np.linalg.???</code> is a module for linear algebra. <code>linalg</code> can also be called from <code>scipy</code> as <code>scipy.linalg.???</code>.</p> In\u00a0[31]: Copied! <pre># Eigenvalues and eigenvectors\neigvals, eigvecs = np.linalg.eig(a)\nprint(\"eigvals = \", eigvals, sep=\"\\n\", end=\"\\n\\n\")\nprint(\"eigvecs = \", eigvecs, sep=\"\\n\", end=\"\\n\\n\")\n\nprint(\"a = \", eigvecs @ np.diag(eigvals) @ np.linalg.inv(eigvecs), sep=\"\\n\", end=\"\\n\\n\")\n</pre> # Eigenvalues and eigenvectors eigvals, eigvecs = np.linalg.eig(a) print(\"eigvals = \", eigvals, sep=\"\\n\", end=\"\\n\\n\") print(\"eigvecs = \", eigvecs, sep=\"\\n\", end=\"\\n\\n\")  print(\"a = \", eigvecs @ np.diag(eigvals) @ np.linalg.inv(eigvecs), sep=\"\\n\", end=\"\\n\\n\") <pre>eigvals = \n[20.96315698 -0.27883016 -0.68432682]\n\neigvecs = \n[[-0.17747914 -0.84842833 -0.74978668]\n [-0.50048229  0.52923643 -0.27279835]\n [-0.8473598   0.00884096  0.6028275 ]]\n\na = \n[[ 1.  2.  3.]\n [ 4.  6.  8.]\n [ 7. 11. 13.]]\n\n</pre> In\u00a0[32]: Copied! <pre># Singular value decomposition\nU, S, V = np.linalg.svd(a)\nprint(\"U = \", U, sep=\"\\n\", end=\"\\n\\n\")\nprint(\"S = \", S, sep=\"\\n\", end=\"\\n\\n\")\nprint(\"V = \", V, sep=\"\\n\", end=\"\\n\\n\")\n\nprint(\"a = \", U @ np.diag(S) @ V, sep=\"\\n\", end=\"\\n\\n\")\n</pre> # Singular value decomposition U, S, V = np.linalg.svd(a) print(\"U = \", U, sep=\"\\n\", end=\"\\n\\n\") print(\"S = \", S, sep=\"\\n\", end=\"\\n\\n\") print(\"V = \", V, sep=\"\\n\", end=\"\\n\\n\")  print(\"a = \", U @ np.diag(S) @ V, sep=\"\\n\", end=\"\\n\\n\") <pre>U = \n[[-0.17104729  0.72829433  0.6635738 ]\n [-0.49727069  0.51761162 -0.69627586]\n [-0.85056727 -0.4490719   0.27362335]]\n\nS = \n[21.64329507  0.70666899  0.26152943]\n\nV = \n[[-0.37490137 -0.58595323 -0.71840641]\n [-0.48786982 -0.53424233  0.69033917]\n [-0.78830959  0.6092979  -0.08558071]]\n\na = \n[[ 1.  2.  3.]\n [ 4.  6.  8.]\n [ 7. 11. 13.]]\n\n</pre>"},{"location":"pages/python-ipynb/numpy/#numpy","title":"Numpy\u00b6","text":"<p>Numpy is a Python library for scientific computing. It provides high-performance multidimensional arrays and matrices, and efficient tools for working with these objects.</p>"},{"location":"pages/python-ipynb/numpy/#create-numpy-arrays","title":"Create numpy arrays\u00b6","text":""},{"location":"pages/python-ipynb/numpy/#manipulating-arrays","title":"Manipulating arrays\u00b6","text":""},{"location":"pages/python-ipynb/numpy/#arithmetic-operations-on-arrays","title":"Arithmetic operations on arrays\u00b6","text":""},{"location":"pages/python-ipynb/numpy/#matrix-operations","title":"Matrix operations\u00b6","text":""},{"location":"pages/python-ipynb/numpy/#learn-more-about-numpy","title":"Learn more about numpy\u00b6","text":""},{"location":"pages/python-ipynb/scipy/","title":"SciPY","text":"In\u00a0[5]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import integrate, diff, optimize\n\nfrom IPython.display import display, Latex\n</pre> import numpy as np import matplotlib.pyplot as plt from scipy import integrate, diff, optimize  from IPython.display import display, Latex <pre>scipy.integrate.solve_ivp(fun, t_span, y0, method='RK45', t_eval=None,\\\n   dense_output=False, events=None, vectorized=False, args=None, **options)\n</pre> <p>Solve the Lotka-Volterra equations. The Lotka-Volterra equations, also known as the predator-prey equations, are a pair of first-order, non-linear, differential equations frequently used to describe the dynamics of biological systems in which two species interact, one as a predator and the other as prey. They were proposed independently by Alfred J. Lotka in 1925 and Vito Volterra in 1926.</p> <p>$$ \\frac{dx}{dt} = ax - bxy ,\\quad \\frac{dy}{dt} = -cx + dxy  $$</p> In\u00a0[6]: Copied! <pre>from scipy.integrate import solve_ivp\n\n\ndef lotkavolterra(t, z, a, b, c, d):\n    x, y = z\n    return [a * x - b * x * y, -c * y + d * x * y]\n\n\nsol = solve_ivp(lotkavolterra, [0, 15], [10, 5], args=(1.5, 1, 3, 1), dense_output=True)\n\nt = np.linspace(0, 15, 300)\nz = sol.sol(t)\n\nplt.plot(t, z.T)\nplt.xlabel(\"t\")\nplt.legend([\"x; prey\", \"y; predator\"], shadow=True)\nplt.title(\"Lotka-Volterra System\")\nplt.show()\n</pre> from scipy.integrate import solve_ivp   def lotkavolterra(t, z, a, b, c, d):     x, y = z     return [a * x - b * x * y, -c * y + d * x * y]   sol = solve_ivp(lotkavolterra, [0, 15], [10, 5], args=(1.5, 1, 3, 1), dense_output=True)  t = np.linspace(0, 15, 300) z = sol.sol(t)  plt.plot(t, z.T) plt.xlabel(\"t\") plt.legend([\"x; prey\", \"y; predator\"], shadow=True) plt.title(\"Lotka-Volterra System\") plt.show() In\u00a0[17]: Copied! <pre>x2 = lambda x: x**2\nans = integrate.quad(x2, 0, 4)  # numerical result\nprint(\"x, y = \", ans)\n\n\ndisplay(Latex(\"$$ \\int_0^4 x^2 dx = \\\\frac{x^3}{3} \\Big|_0^4 = \\\\frac{4^3}{3} = 23.3333 $$\"))\n</pre> x2 = lambda x: x**2 ans = integrate.quad(x2, 0, 4)  # numerical result print(\"x, y = \", ans)   display(Latex(\"$$ \\int_0^4 x^2 dx = \\\\frac{x^3}{3} \\Big|_0^4 = \\\\frac{4^3}{3} = 23.3333 $$\")) <pre>x, y =  (21.333333333333332, 2.3684757858670003e-13)\n</pre>  $$ \\int_0^4 x^2 dx = \\frac{x^3}{3} \\Big|_0^4 = \\frac{4^3}{3} = 23.3333 $$  <p>find a root of a scalar function</p> <p>$$f(x) = x^2 - x -1 $$</p> In\u00a0[36]: Copied! <pre>from scipy import optimize\n\n\ndef f(x):\n    return x**2 - x - 1\n\n\nsol = optimize.root_scalar(f, bracket=[0, 3])  # numerical result\nprint(\"numerical result: \", sol.root)\n\n\nprint(\"\\nanalytical result:\")\ndisplay(Latex(\"$$ f(x) = x^2 -x - 1 = 0 \\Longleftrightarrow x = \\\\frac{1 \\pm \\sqrt{5}}{2} = -0.618034, 1.618034 $$\"))\n</pre> from scipy import optimize   def f(x):     return x**2 - x - 1   sol = optimize.root_scalar(f, bracket=[0, 3])  # numerical result print(\"numerical result: \", sol.root)   print(\"\\nanalytical result:\") display(Latex(\"$$ f(x) = x^2 -x - 1 = 0 \\Longleftrightarrow x = \\\\frac{1 \\pm \\sqrt{5}}{2} = -0.618034, 1.618034 $$\")) <pre>numerical result:  1.618033988749895\n\nanalytical result:\n</pre>  $$ f(x) = x^2 -x - 1 = 0 \\Longleftrightarrow x = \\frac{1 \\pm \\sqrt{5}}{2} = -0.618034, 1.618034 $$  In\u00a0[41]: Copied! <pre>def fun(x):\n    return [x[0] + 0.5 * (x[0] - x[1]) ** 3 - 1.0, 0.5 * (x[1] - x[0]) ** 3 + x[1]]\n\n\ndef jac(x):  # Jacbian\n    return np.array(\n        [\n            [1 + 1.5 * (x[0] - x[1]) ** 2, -1.5 * (x[0] - x[1]) ** 2],\n            [-1.5 * (x[1] - x[0]) ** 2, 1 + 1.5 * (x[1] - x[0]) ** 2],\n        ]\n    )\n\n\nsol = optimize.root(fun, [0, 0], jac=jac, method=\"hybr\")\nprint('numerical result: ', sol.x)\n</pre> def fun(x):     return [x[0] + 0.5 * (x[0] - x[1]) ** 3 - 1.0, 0.5 * (x[1] - x[0]) ** 3 + x[1]]   def jac(x):  # Jacbian     return np.array(         [             [1 + 1.5 * (x[0] - x[1]) ** 2, -1.5 * (x[0] - x[1]) ** 2],             [-1.5 * (x[1] - x[0]) ** 2, 1 + 1.5 * (x[1] - x[0]) ** 2],         ]     )   sol = optimize.root(fun, [0, 0], jac=jac, method=\"hybr\") print('numerical result: ', sol.x) <pre>numerical result:  [0.8411639 0.1588361]\n</pre> <p>find the minimum point of</p> <p>$$ f(x,y) = (1-x)^2 + 5(y-x^2)^2 $$</p> In\u00a0[38]: Copied! <pre>from scipy.optimize import minimize\n\nf = lambda x: (1 - x[0]) ** 2 + 5 * (x[1] - x[0] ** 2) ** 2\nx0 = [-1, -1]\nres = minimize(f, x0, method=\"CG\", options={\"disp\": True})\nprint(\"\\nnumerical result: \", res.x)\n</pre> from scipy.optimize import minimize  f = lambda x: (1 - x[0]) ** 2 + 5 * (x[1] - x[0] ** 2) ** 2 x0 = [-1, -1] res = minimize(f, x0, method=\"CG\", options={\"disp\": True}) print(\"\\nnumerical result: \", res.x) <pre>Optimization terminated successfully.\n         Current function value: 0.000000\n         Iterations: 12\n         Function evaluations: 84\n         Gradient evaluations: 28\n\nnumerical result:  [0.9999993  0.99999854]\n</pre> <p>Here, we solve fitting problem.</p> In\u00a0[40]: Copied! <pre># Solve a nonlinear least-squares problem with bounds on the variables.\nimport os\nimport scipy.optimize as opt\n\n# p: parameters, t: time, y: measured data\nfitFunc = lambda p, t: p[0] * np.exp(-p[1] * t) * np.cos(p[2] * t)\nerrFunc = lambda p, t, y: fitFunc(p, t) - y\n\nnp.random.seed(0)\nx = np.linspace(0, 5, 100)\ny = fitFunc([3, 0.5, 3], x) + np.random.randn(len(x)) / 3\n\np0 = [1, 1, 1]  # Initial guess for the parameters\n(p, success) = opt.leastsq(errFunc, p0, args=(x, y))\nprint(\"\\nnumerical result: \", p)\nprint(\"true value: \", [3, 0.5, 3])\nnfit = fitFunc(p, x)\n\nplt.plot(x, y, label=\"Measured data\", color=\"orange\")\nplt.plot(x, nfit, label=\"fitting curve\", color=\"red\")\nplt.legend()\nplt.show()\n</pre> # Solve a nonlinear least-squares problem with bounds on the variables. import os import scipy.optimize as opt  # p: parameters, t: time, y: measured data fitFunc = lambda p, t: p[0] * np.exp(-p[1] * t) * np.cos(p[2] * t) errFunc = lambda p, t, y: fitFunc(p, t) - y  np.random.seed(0) x = np.linspace(0, 5, 100) y = fitFunc([3, 0.5, 3], x) + np.random.randn(len(x)) / 3  p0 = [1, 1, 1]  # Initial guess for the parameters (p, success) = opt.leastsq(errFunc, p0, args=(x, y)) print(\"\\nnumerical result: \", p) print(\"true value: \", [3, 0.5, 3]) nfit = fitFunc(p, x)  plt.plot(x, y, label=\"Measured data\", color=\"orange\") plt.plot(x, nfit, label=\"fitting curve\", color=\"red\") plt.legend() plt.show() <pre>\nnumerical result:  [3.06866623 0.54162788 2.99081795]\ntrue value:  [3, 0.5, 3]\n</pre>"},{"location":"pages/python-ipynb/scipy/#scipy","title":"SciPY\u00b6","text":"<p>SciPy is a collection of mathematical algorithms and convenience functions built on the NumPy extension of Python. - scippy doc</p> <p>In this page, you see examples of scipy functions (differentiation, integration, optimization) to solve problems.</p>"},{"location":"pages/python-ipynb/scipy/#differentiation","title":"Differentiation\u00b6","text":""},{"location":"pages/python-ipynb/scipy/#scipyintegratesolve_ivp","title":"scipy.integrate.solve_ivp\u00b6","text":"<p>Solve an initial value problem for a system of ODEs.</p> <p>$$ \\frac{dy}{dt} = f(t, y), \\quad y(t_0) = y_0 $$</p>"},{"location":"pages/python-ipynb/scipy/#integration","title":"Integration\u00b6","text":""},{"location":"pages/python-ipynb/scipy/#scipyintegratequad","title":"scipy.integrate.quad\u00b6","text":"<p>Compute a definite integral.</p> <pre>scipy.integrate.quad(func, a, b, args=(), full_output=0, epsabs=1.49e-08, epsrel=1.49e-08,\\\n   limit=50, points=None, weight=None, wvar=None, wopts=None, maxp1=50, limlst=50)\n</pre> <p>Return <code>y</code> and <code>abserr</code>.</p> <ul> <li>y(float): The integral of func from a to b.</li> <li>abserr(float): An estimate of the absolute error in the result.</li> </ul> <p>Let's compute the integral: $ \\int_0^4 x^2 dx$</p>"},{"location":"pages/python-ipynb/scipy/#root-finding","title":"Root finding\u00b6","text":""},{"location":"pages/python-ipynb/scipy/#scipyoptimizeroot_scalar","title":"scipy.optimize.root_scalar\u00b6","text":"<p>Find a root of a scalar function.</p> <pre>scipy.optimize.root_scalar(f, args=(), method=None, bracket=None, fprime=None, fprime2=None,\\\n   x0=None, x1=None, xtol=None, rtol=None, maxiter=None, options=None)\n</pre>"},{"location":"pages/python-ipynb/scipy/#scipyoptimizeroot","title":"scipy.optimize.root\u00b6","text":"<p>Find a root of a vector function.</p> <pre>scipy.optimize.root(func, x0, args=(), method='hybr', jac=None, tol=None,\n                   callback=None, options=None)\n</pre>"},{"location":"pages/python-ipynb/scipy/#scipyoptimizeminimize","title":"scipy.optimize.minimize\u00b6","text":"<p>Local (multivariate) optimization</p> <pre>scipy.optimize.minimize(fun, x0, args=(), method=None, jac=None, hess=None,\\\n   hessp=None, bounds=None, constraints=(), tol=None, callback=None, options=None)\n</pre>"},{"location":"pages/python-ipynb/scipy/#scipyoptimizeleast_squares","title":"scipy.optimize.least_squares\u00b6","text":"<p>Least-squares</p> <pre>scipy.optimize.least_squares(fun, x0, jac='2-point', bounds=(- inf, inf), method='trf', ftol=1e-08,\\\n   xtol=1e-08, gtol=1e-08, x_scale=1.0, loss='linear', f_scale=1.0, diff_step=None, tr_solver=None,\\\n   tr_options={}, jac_sparsity=None, max_nfev=None, verbose=0, args=(), kwargs={})\n</pre>"},{"location":"pages/python-ipynb/sympy/","title":"SymPY","text":"In\u00a0[4]: Copied! <pre>from sympy import *\n</pre> from sympy import *  In\u00a0[5]: Copied! <pre>x = Symbol(\"x\")\ny = Symbol(\"y\")\n</pre> x = Symbol(\"x\") y = Symbol(\"y\") In\u00a0[6]: Copied! <pre>(x + y) ** 2\n</pre> (x + y) ** 2 Out[6]:  $\\displaystyle \\left(x + y\\right)^{2}$  In\u00a0[7]: Copied! <pre>f = expand((x + y) ** 2)\ndisplay(f)\n</pre> f = expand((x + y) ** 2) display(f)  $\\displaystyle x^{2} + 2 x y + y^{2}$  In\u00a0[8]: Copied! <pre>f.subs({x: 1, y: 2})\n</pre> f.subs({x: 1, y: 2}) Out[8]:  $\\displaystyle 9$  In\u00a0[9]: Copied! <pre>factor(x**2 - 4 * x + 3)\n</pre> factor(x**2 - 4 * x + 3) Out[9]:  $\\displaystyle \\left(x - 3\\right) \\left(x - 1\\right)$  In\u00a0[10]: Copied! <pre>solve(x**2 - x - 1)\n</pre> solve(x**2 - x - 1)  Out[10]: <pre>[1/2 - sqrt(5)/2, 1/2 + sqrt(5)/2]</pre> In\u00a0[11]: Copied! <pre>apart(1 / (x**5 - 1))\n</pre> apart(1 / (x**5 - 1))  Out[11]:  $\\displaystyle - \\frac{x^{3} + 2 x^{2} + 3 x + 4}{5 \\left(x^{4} + x^{3} + x^{2} + x + 1\\right)} + \\frac{1}{5 \\left(x - 1\\right)}$  In\u00a0[12]: Copied! <pre>a = Symbol(\"a\")  # Without real=True, a is treated as a complex number.\nb = Symbol(\"b\")\n\nu = exp(a * x) * sin(b * x)\ndisplay(u)\n</pre> a = Symbol(\"a\")  # Without real=True, a is treated as a complex number. b = Symbol(\"b\")  u = exp(a * x) * sin(b * x) display(u)   $\\displaystyle e^{a x} \\sin{\\left(b x \\right)}$  In\u00a0[13]: Copied! <pre>int_u = integrate(u, x)\ndisplay(int_u)\n</pre> int_u = integrate(u, x) display(int_u)   $\\displaystyle \\begin{cases} 0 &amp; \\text{for}\\: a = 0 \\wedge b = 0 \\\\\\frac{x e^{- i b x} \\sin{\\left(b x \\right)}}{2} - \\frac{i x e^{- i b x} \\cos{\\left(b x \\right)}}{2} + \\frac{i e^{- i b x} \\sin{\\left(b x \\right)}}{2 b} &amp; \\text{for}\\: a = - i b \\\\\\frac{x e^{i b x} \\sin{\\left(b x \\right)}}{2} + \\frac{i x e^{i b x} \\cos{\\left(b x \\right)}}{2} - \\frac{i e^{i b x} \\sin{\\left(b x \\right)}}{2 b} &amp; \\text{for}\\: a = i b \\\\\\frac{a e^{a x} \\sin{\\left(b x \\right)}}{a^{2} + b^{2}} - \\frac{b e^{a x} \\cos{\\left(b x \\right)}}{a^{2} + b^{2}} &amp; \\text{otherwise} \\end{cases}$  In\u00a0[14]: Copied! <pre>R = diff(u, x, 2) + u + x\ndisplay(R)\n</pre> R = diff(u, x, 2) + u + x display(R)   $\\displaystyle x + \\left(a^{2} \\sin{\\left(b x \\right)} + 2 a b \\cos{\\left(b x \\right)} - b^{2} \\sin{\\left(b x \\right)}\\right) e^{a x} + e^{a x} \\sin{\\left(b x \\right)}$  In\u00a0[15]: Copied! <pre>k, N = symbols(\"k, N\", integer=True)\nfactor(summation(k, (k, 1, N)))\n</pre> k, N = symbols(\"k, N\", integer=True) factor(summation(k, (k, 1, N))) Out[15]:  $\\displaystyle \\frac{N \\left(N + 1\\right)}{2}$  In\u00a0[18]: Copied! <pre>limit(sin(x) / x, x, 0)\n</pre> limit(sin(x) / x, x, 0) Out[18]:  $\\displaystyle 1$  In\u00a0[16]: Copied! <pre>s = Symbol(\"s\")\nt = Symbol(\"t\")\n\nl = (s**2 * x**3) + (t * x**2) + (3 * x) + 1\n\ndisplay(l)\n</pre> s = Symbol(\"s\") t = Symbol(\"t\")  l = (s**2 * x**3) + (t * x**2) + (3 * x) + 1  display(l)   $\\displaystyle s^{2} x^{3} + t x^{2} + 3 x + 1$  In\u00a0[17]: Copied! <pre>int_l = integrate(l, (x, 0, 1))\ndisplay(int_l)\n</pre> int_l = integrate(l, (x, 0, 1)) display(int_l)   $\\displaystyle \\frac{s^{2}}{4} + \\frac{t}{3} + \\frac{5}{2}$"},{"location":"pages/python-ipynb/sympy/#sympy","title":"SymPY\u00b6","text":"<p>SymPy is a Python library for symbolic mathematics. - sympy doc</p> <p>In this page, you see examples of sympy usage.</p>"},{"location":"pages/python-ipynb/sympy/#declare-symbols","title":"Declare symbols\u00b6","text":""},{"location":"pages/python-ipynb/sympy/#expansion","title":"Expansion\u00b6","text":""},{"location":"pages/python-ipynb/sympy/#substitution","title":"Substitution\u00b6","text":""},{"location":"pages/python-ipynb/sympy/#factorization","title":"Factorization\u00b6","text":""},{"location":"pages/python-ipynb/sympy/#solve-equations","title":"Solve equations\u00b6","text":""},{"location":"pages/python-ipynb/sympy/#partial-fraction-decomposition","title":"Partial fraction decomposition\u00b6","text":""},{"location":"pages/python-ipynb/sympy/#integrals-and-derivatives","title":"Integrals and derivatives\u00b6","text":""},{"location":"pages/python-ipynb/sympy/#summation","title":"Summation\u00b6","text":""},{"location":"pages/python-ipynb/sympy/#limits","title":"Limits\u00b6","text":"<p>$$ \\lim_{x \\to 0} \\frac{\\sin x}{x} = 1 $$</p>"},{"location":"pages/python-ipynb/sympy/#other-examples","title":"Other Examples\u00b6","text":""},{"location":"pages/tools/","title":"Tools","text":"<ul> <li>Web Apps</li> <li>Mac Apps</li> <li>Firefox Extensions</li> <li>VScode Extensions</li> </ul>"},{"location":"pages/tools/firefox/firefox/","title":"Useful Firefox Extensions","text":""},{"location":"pages/tools/firefox/firefox/#security","title":"Security","text":""},{"location":"pages/tools/firefox/firefox/#adblocker-ultimate","title":"AdBlocker Ultimate","text":"<p><code>AdBlocker Ultimate</code> removes all ads and trackings from the web pages.</p>"},{"location":"pages/tools/firefox/firefox/#cookie-autodelete","title":"Cookie AutoDelete","text":"<p><code>Cookie AutoDelete</code> automatically deletes cookies when they are no longer used by open browser tabs.</p>"},{"location":"pages/tools/firefox/firefox/#decentraleyes","title":"Decentraleyes","text":"<p><code>Decentraleyes</code> protects you against tracking through \"free\", centralized, content delivery. It prevents a lot of requests from reaching networks like Google Hosted Libraries, and serves local files to keep sites from breaking. Complements regular content blockers.</p>"},{"location":"pages/tools/firefox/firefox/#firefox-relay","title":"Firefox Relay","text":"<p><code>Firefox Relay</code> lets you generate unique email aliases so you can sign up for new accounts without giving away your real email address. Messages sent to an alias are forwarded to your real inbox. 10 minute mail is a similar service.</p>"},{"location":"pages/tools/firefox/firefox/#flagfox","title":"Flagfox","text":"<p><code>Flagfox</code> displays a country flag depicting the location of the current website's server.</p> <p></p>"},{"location":"pages/tools/firefox/firefox/#privacy-badger","title":"Privacy Badger","text":"<p><code>Privacy Badger</code> automatically learns to block invisible trackers.</p>"},{"location":"pages/tools/firefox/firefox/#ublock-origin","title":"uBlock Origin","text":"<p><code>uBlock Origin</code> is an ad blocker with low memory usage and high performance.</p>"},{"location":"pages/tools/firefox/firefox/#webrtc-leak-shield","title":"WebRTC Leak Shield","text":"<p><code>WebRTC Leak Shield</code> prevents WebRTC leaks.</p> <p>WebRTC</p> <p>WebRTC stands for Web Real-Time Communication. It is a technology that allows audio and video communication over the internet directly between browsers, without the need for plugins or external software. While it can be useful for video conferencing and other real-time communication, it can also potentially leak your IP address, which is a privacy concern. Disabling WebRTC in your browser can help prevent IP leaks.</p>"},{"location":"pages/tools/firefox/firefox/#productivity","title":"Productivity","text":""},{"location":"pages/tools/firefox/firefox/#bitwarden","title":"Bitwarden","text":"<p><code>Bitwarden</code> is free, useful, and secure open source password manager.</p> <p> </p>"},{"location":"pages/tools/firefox/firefox/#dark-reader","title":"Dark Reader","text":"<p><code>Dark Reader</code> inverts the colors of websites making them easier to read for a long time.</p>"},{"location":"pages/tools/firefox/firefox/#duplicate-tabs-shortcut","title":"Duplicate Tabs Shortcut","text":"<p><code>Duplicate Tabs Shortcut</code> lets you duplicate tabs with a keyboard shortcut <code>Alt+Shift+D</code> on Windows/Linux, <code>Option+Shift+D</code> on Mac.</p>"},{"location":"pages/tools/firefox/firefox/#g-app-launcher","title":"G App Launcher","text":"<p><code>G App Launcher</code> is a shortcut to all Google services, such as Gmail, Google Drive, Google Calendar, Google Maps, Google Translate, and more.</p>"},{"location":"pages/tools/firefox/firefox/#grammar-and-spell-checker-languagetool","title":"Grammar and Spell Checker - LanguageTool","text":"<p><code>Grammar and Spell Checker - LanguageTool</code> check your texts for spelling and grammar problems everywhere on the web.</p>"},{"location":"pages/tools/firefox/firefox/#keepacom-amazon-price-tracker","title":"Keepa.com - Amazon Price Tracker","text":"<p><code>Keepa.com - Amazon Price Tracker</code> shows price history charts for Amazon products.</p>"},{"location":"pages/tools/firefox/firefox/#multi-account-containers","title":"Multi-Account Containers","text":"<p><code>Multi-Account Containers</code> enables you to use multiple accounts on the same website simultaneously.</p>"},{"location":"pages/tools/firefox/firefox/#print-edit-we","title":"Print Edit WE","text":"<p><code>Print Edit WE</code> allows editing of the web page content while in Print Preview mode.</p>"},{"location":"pages/tools/firefox/firefox/#simple-tab-groups","title":"Simple Tab Groups","text":"<p><code>Simple Tab Groups</code> lets you organize your tabs into groups. You can quickly switch between groups and you won't get lost in dozens of open tabs anymore. I recommend you to set the shortcuts</p> groupsshortcut setting 1shortcut setting 2 <p> </p> <p> </p> <p> </p>"},{"location":"pages/tools/firefox/firefox/#simple-translate","title":"Simple Translate","text":"<p><code>Simple Translate</code> is a simple and lightweight translator. It translates selected text into a popup window.</p>"},{"location":"pages/tools/firefox/firefox/#singlefile","title":"SingleFile","text":"<p><code>SingleFile</code> helps you to save a complete page (with CSS, images, fonts, frames, etc.) as a single HTML file.</p>"},{"location":"pages/tools/firefox/firefox/#swift-selection-search","title":"Swift Selection Search","text":"<p><code>Swift Selection Search</code> lets you search for text on search engines by selecting it.</p> <p> </p>"},{"location":"pages/tools/firefox/firefox/#tabliss","title":"Tabliss","text":"<p><code>Tabliss</code> is a customizable new tab page with beautiful backgrounds, to-do list, quotes, and more.</p> new tab pagesettings <p> </p> <p> </p>"},{"location":"pages/tools/firefox/firefox/#zotero-connector","title":"Zotero Connector","text":"<p><code>Zotero Connector</code> automatically detects content in your web browser, allowing you to add it to your Zotero library with a single click. <code>{image} img/zotero-connector.png :width: 400px :align: center</code></p>"},{"location":"pages/tools/firefox/firefox/#youtube","title":"Youtube","text":""},{"location":"pages/tools/firefox/firefox/#enhancer-for-youtube","title":"Enhancer for YouTube","text":"<p><code>Enhancer for YouTube</code> adds many useful features to YouTube, such as video playback speed control, cinema mode, screenshot and more. You can finely change the speed of the video from 0.05 by (0.01, 0.02, 0.05, 0.1, 0.2, 0.25, 0.5, 1) increments.</p> <p> </p>"},{"location":"pages/tools/firefox/firefox/#video-speed-controller","title":"Video Speed Controller","text":"<p><code>Video Speed Controller</code> lets you control the video playback speed with keyboard shortcuts <code>S</code> and <code>D</code> and advance and rewind the video with keyboard shortcuts <code>X</code> and <code>Z</code> in any HTML5 video player.</p>"},{"location":"pages/tools/firefox/firefox/#youtube-audio","title":"Youtube Audio","text":"<p><code>Youtube Audio</code> lets you play only the audio of a YouTube video.</p>"},{"location":"pages/tools/macapp/macapp/","title":"Useful Mac Apps","text":"<p>Recommended Apps here are basically free.</p>"},{"location":"pages/tools/macapp/macapp/#appcleaner","title":"AppCleaner","text":"<p>When removing an app from your computer, <code>AppCleaner</code> helps you to find all files related to the app so that you can remove all of them at once.</p> <p> </p>"},{"location":"pages/tools/macapp/macapp/#bitwarden","title":"Bitwarden","text":"<p><code>Bitwarden</code> is free, useful, and secure open source password manager. It is compatible with Mac, Windows, Linux, Android, and iOS. You can also use it as a browser extension.</p> <p> </p>"},{"location":"pages/tools/macapp/macapp/#cheatsheet","title":"CheatSheet","text":"<p>You can check shortcuts key of the currently using app with <code>cmd</code>.</p> <p> </p>"},{"location":"pages/tools/macapp/macapp/#customshortcut","title":"CustomShortCut","text":"<p>CustomShortCut is compatible with CheatSheet. You can redefine shortcut keys easily.</p>"},{"location":"pages/tools/macapp/macapp/#clipy","title":"Clipy","text":"<p><code>Clipy</code> is a free and open source clipboard extension app. You can use it from a menu bar icon or with a shortcut key <code>cmd + shift + v</code>. You can also use it as a snippet manager.</p>"},{"location":"pages/tools/macapp/macapp/#coteditor","title":"CotEditor","text":"<p><code>CotEditor</code> is lightweight open source text editor with many useful features. You can use it for coding.</p>"},{"location":"pages/tools/macapp/macapp/#coconutbattery","title":"coconutBattery","text":"<p>You can check the device battery information of Mac, iPad, and iPhone with <code>coconutBattery</code>.</p>"},{"location":"pages/tools/macapp/macapp/#drawio","title":"draw.io","text":"<p><code>draw.io</code> is a free and open source diagram software for making flowchart, network diagrams, and so on. The UI is very simple and easy to use. You can use it from a browser or desktop app. You can put mathematical equations in the diagram with \\(LaTeX\\). </p>"},{"location":"pages/tools/macapp/macapp/#firefox","title":"Firefox","text":"<p><code>Firefox</code> is a free and open source web browser. It is famous for its privacy protection and many useful utilities and  extensions.</p>"},{"location":"pages/tools/macapp/macapp/#grammerly-desktop","title":"Grammerly Desktop","text":"<p><code>Grammerly</code> is a useful app for checking grammar and spelling. You can write better English with it.</p>"},{"location":"pages/tools/macapp/macapp/#hand-mirror","title":"Hand Mirror","text":"<p><code>Hand Mirror</code> is a free app for checking your face with your Mac camera. You can open it from a menu bar icon or with a shortcut key.</p>"},{"location":"pages/tools/macapp/macapp/#imageoptim","title":"ImageOptim","text":"<p><code>ImageOptim</code> is a free and open source app for compressing images. You can compress images without losing quality. You can also use it from the command line. For example, you can compress all images in the current directory with the following command: <pre><code>$ open -a ImageOptim .\n</code></pre></p>"},{"location":"pages/tools/macapp/macapp/#mathpix-snipping-tool","title":"Mathpix Snipping Tool","text":"<p><code>Mathpix Snipping Tool</code> is a free app for converting images to LaTeX. You can convert images to LaTeX by taking a screenshot: <code>cmd + ctrl + M</code>. You can also make a latex equation image from a menu bar.</p> <p> </p>"},{"location":"pages/tools/macapp/macapp/#notion","title":"Notion","text":"<p>Notion is a markdown-based note app with many useful features. You can make markdown pages like directory structure. You can use it for individual notes or team documents (easy to share). Moreover, you can publish your documents on website at ease.</p>"},{"location":"pages/tools/macapp/macapp/#monitorcontrol","title":"MonitorControl","text":"<p><code>MonitorControl</code> is a free and open-source app for adjusting the brightness of your Mac screen and external monitors. You don't need to use the monitor's buttons anymore! You can adjust the brightness with shortcut keys.</p>"},{"location":"pages/tools/macapp/macapp/#rectangle","title":"Rectangle","text":"<p><code>Rectangle</code> is a free app for resizing application windows. You can use <code>Rectangle</code> from a menu bar icon, with shortcut keys, or by dragging the window to the edge of the screen.</p> shortcut keysdragging a window <p> </p> <p> </p>"},{"location":"pages/tools/macapp/macapp/#shotcut","title":"Shotcut","text":"<p><code>Shotcut</code> is a free and open source video editor.</p>"},{"location":"pages/tools/macapp/macapp/#shottr","title":"Shottr","text":"<p><code>Shottr</code> is a free app for taking screenshots. You can take a screenshot of a whole screen: <code>cmd + shift + 1</code>, or a selected area: <code>cmd + shift + 2</code>, an active window: <code>cmd + shift + 8</code>, or a whole page by scrolling: <code>cmd + shift + 9</code>. Moreover, you can use multi-language OCR to convert the screenshot to text: <code>cmd + option + ctrl + O</code> (not zero).</p> blurerasearrowmarkertextrectangle <p> </p> <p> </p> <p> </p> <p> </p> <p> </p> <p> </p>"},{"location":"pages/tools/macapp/macapp/#syntax-highlight","title":"Syntax Highlight","text":"<p><code>Syntax Highlight</code> is a free and open source app for highlighting the syntax of source code in Quick Look (press space key on a file).</p>"},{"location":"pages/tools/macapp/macapp/#vs-code","title":"VS Code","text":"<p><code>VS Code</code> is a free and open source code editor. It is famous for its many useful extensions. Useful extensions are listed in here.</p> <p> </p>"},{"location":"pages/tools/macapp/macapp/#unsplash-wallpapers","title":"Unsplash Wallpapers","text":"<p><code>Unsplash Wallpapers</code> is a free app for setting beautiful wallpapers. You can set a new wallpaper from a menu bar icon.</p>"},{"location":"pages/tools/macapp/macapp/#vlc","title":"VLC","text":"<p><code>VLC</code> is a free and open source media player.</p>"},{"location":"pages/tools/macapp/macapp/#zotero","title":"Zotero","text":"<p>Zotero is a free and open source app for managing research papers. You can manage your papers with tags and folders. You can import papers from browser with a single click using a browser extension: Zotero Connector.</p> <p> </p>"},{"location":"pages/tools/vscode/vscode/","title":"Useful VScode Extensions","text":""},{"location":"pages/tools/vscode/vscode/#github-copilot","title":"GitHub Copilot","text":"<p>GitHub Copilot is an AI pair programmer that helps you write code faster and with less work. It uses machine learning trained on billions of lines of public code to suggest new lines of code as you type.</p>"},{"location":"pages/tools/vscode/vscode/#better-comments","title":"Better Comments","text":"<p>Better Comments helps you create more human-friendly comments in your code.</p>"},{"location":"pages/tools/vscode/vscode/#code-runner","title":"Code Runner","text":"<p>Run code snippet or code file for multiple languages.</p>"},{"location":"pages/tools/vscode/vscode/#code-spell-checker","title":"Code Spell Checker","text":"<p>A basic spell checker that works well with code and documents.</p>"},{"location":"pages/tools/vscode/vscode/#rainbow-csv","title":"Rainbow CSV","text":"<p>Highlight CSV files in different colors.</p>"},{"location":"pages/tools/vscode/vscode/#error-lens","title":"Error Lens","text":"<p>Improve highlighting of errors, warnings and other language diagnostics.</p>"},{"location":"pages/tools/vscode/vscode/#grammerly","title":"Grammerly","text":"<p>Grammarly for VS Code. Grammarly adapts to your needs and writing style, giving you the confidence of mistake-free communication every time you write.</p>"},{"location":"pages/tools/vscode/vscode/#indent-rainbow","title":"indent-rainbow","text":"<p>Makes indentation more readable.</p>"},{"location":"pages/tools/vscode/vscode/#isort","title":"isort","text":"<p>Sort Python imports.</p>"},{"location":"pages/tools/vscode/vscode/#jupyter-jupyter-keymap","title":"Jupyter &amp; Jupyter Keymap","text":"<p>Jupyter notebook support, interactive programming and computing that supports Intellisense, debugging and more.</p>"},{"location":"pages/tools/vscode/vscode/#latex-workshop","title":"Latex workshop","text":"<p>Boost LaTeX typesetting efficiency with preview, compile, autocomplete, colorize, and more.</p>"},{"location":"pages/tools/vscode/vscode/#live-share","title":"Live Share","text":"<p>Real-time collaborative development from the comfort of your favorite tools.</p>"},{"location":"pages/tools/vscode/vscode/#material-icon-theme","title":"Material Icon Theme","text":"<p>Material Design Icons for Visual Studio Code.</p>"},{"location":"pages/tools/vscode/vscode/#python","title":"Python","text":"<p>IntelliSense (Pylance), Linting, Debugging (multi-threaded, remote), Jupyter Notebooks, code formatting, refactoring, unit tests, and more.</p>"},{"location":"pages/tools/vscode/vscode/#trainling-spaces","title":"Trainling Spaces","text":"<p>Highlight trailing spaces and delete them in a flash!</p>"},{"location":"pages/tools/vscode/vscode/#vs-code-counter","title":"VS Code Counter","text":"<p>Count words, lines, and characters in your text.</p>"},{"location":"pages/tools/vscode/vscode/#word-counter","title":"Word Counter","text":"<p>Display word count and word count goal in the status bar.</p> <p>More</p>"},{"location":"pages/tools/webapp/webapp/","title":"Useful Web Apps","text":""},{"location":"pages/tools/webapp/webapp/#10-minutes-mail","title":"10 minutes mail","text":"<p>You can get a temporary email address for 10 minutes. You can use it to sign up for a service not worth using your real email address. You can extend the time. There are many similar services.</p> <p> </p>"},{"location":"pages/tools/webapp/webapp/#2ocr","title":"2OCR","text":"<p>You can convert images to text. It can detect multiple languages.</p> <p> </p>"},{"location":"pages/tools/webapp/webapp/#internet-speed-test","title":"Internet speed test","text":"<p>You can check your internet speed.</p> <p> </p>"},{"location":"pages/tools/webapp/webapp/#lettucemeet","title":"LettuceMeet","text":"<p>You can schedule a meeting with your friends.</p> <p> </p>"},{"location":"pages/tools/webapp/webapp/#link-lock","title":"Link Lock","text":"<p>You can lock a link with a password.</p> <p> </p>"},{"location":"pages/tools/webapp/webapp/#online-timer","title":"Online timer","text":"<p>Online timer with simple UI.</p> <p> </p>"},{"location":"pages/tools/webapp/webapp/#pdf-compressor","title":"PDF compressor","text":"<p>Sometimes, lazy people send large PDF files to you. You can compress it with this service. There are many similar services, but this one is my favorite.</p> <p> </p>"},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"blog/archive/2022/","title":"2022","text":""},{"location":"blog/category/abcd/","title":"ABCD","text":""},{"location":"blog/category/asdf/","title":"Asdf","text":""}]}